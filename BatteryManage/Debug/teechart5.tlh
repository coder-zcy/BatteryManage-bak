// Created by Microsoft (R) C/C++ Compiler Version 12.00.21005.1 (9b6a5078).
//
// d:\work\batterymanage\batterymanage\debug\teechart5.tlh
//
// C++ source equivalent of Win32 type library C:\\Program Files (x86)\\TeeChart Pro v5 ActiveX Control\\TeeChart5.ocx
// compiler-generated file created 05/06/18 at 20:34:00 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

//
// Forward references and typedefs
//

struct __declspec(uuid("b6c10482-fb89-11d4-93c9-006008a7eed4"))
/* LIBID */ __TeeChart;
enum EPanelBevel;
enum EBorderStyle;
enum EDragMode;
enum EChartPenStyle;
enum ELegendStyle;
enum EMouseButton;
enum EDragState;
enum EGradientDirection;
enum EAxisLabelStyle;
enum EHorizontalAxis;
enum EBrushStyle;
enum EMultiArea;
enum EMultiBar;
enum EMarkStyle;
enum EBarStyle;
enum EChartScroll;
enum ELegendAlignment;
enum ELegendTextStyle;
enum EAxisType;
enum EDateTimeStep;
enum EJPEGPerformance;
enum EConstants;
enum EFunctionType;
enum EShapeXYStyle;
enum ECandleStyle;
enum EErrorWidthUnits;
enum EValueListOrder;
enum EShapeStyle;
enum ESeriesClass;
enum EPrinterOrientation;
enum EPointerStyle;
enum ETypeFitting;
enum EBackImageMode;
enum ETextAlignment;
enum EVerticalAxis;
enum EShiftState;
enum ETitleAlignment;
struct __declspec(uuid("b6c10485-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ ITChart;
struct __declspec(uuid("b6c10487-fb89-11d4-93c9-006008a7eed4"))
/* dispinterface */ ITChartEvents;
struct /* coclass */ TChart;
struct __declspec(uuid("b6c1048b-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IPen;
struct __declspec(uuid("b6c1048d-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IBrush;
struct __declspec(uuid("b6c1048e-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IStrings;
struct __declspec(uuid("b6c1048f-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ ICanvas;
struct __declspec(uuid("b6c10490-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IAspect;
struct __declspec(uuid("b6c10491-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IAxes;
struct __declspec(uuid("b6c104c6-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IAxis;
struct __declspec(uuid("b6c10493-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IAxisLabels;
struct __declspec(uuid("b6c10494-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IAxisTitle;
struct __declspec(uuid("b6c10495-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ ITeeCustomShape;
struct __declspec(uuid("b6c10496-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IExport;
struct __declspec(uuid("b6c10497-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IImport;
struct __declspec(uuid("b6c104a3-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IScroll;
struct __declspec(uuid("b6c104a4-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IZoom;
struct __declspec(uuid("b6c104a5-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IPrinter;
struct __declspec(uuid("b6c104a6-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IWall;
struct __declspec(uuid("b6c104a7-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IWalls;
struct __declspec(uuid("e517cb2c-1c48-11d5-9400-006008a7eed4"))
/* dual interface */ ITeeShapePosition;
struct __declspec(uuid("b6c104a9-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IGradient;
struct __declspec(uuid("b6c104aa-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IPage;
struct __declspec(uuid("b6c104ab-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IPanel;
struct __declspec(uuid("b6c104ac-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ ISeries;
struct __declspec(uuid("b6c104ad-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ ITeeFunction;
struct __declspec(uuid("b6c104ae-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IMarks;
struct __declspec(uuid("b6c104af-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IValueList;
struct __declspec(uuid("b6c104bd-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IPointer;
struct __declspec(uuid("b6c104be-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ ICustomSeries;
struct __declspec(uuid("b6c104bf-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IAreaSeries;
struct __declspec(uuid("b6c104c0-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IPointSeries;
struct __declspec(uuid("b6c104c1-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ ILineSeries;
struct __declspec(uuid("b6c104c2-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IFastLineSeries;
struct __declspec(uuid("b6c104c3-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ ICircledSeries;
struct __declspec(uuid("b6c104c4-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IPieSeries;
struct __declspec(uuid("b6c104c5-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IBubbleSeries;
struct __declspec(uuid("b6c104c7-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IGanttSeries;
struct __declspec(uuid("b6c104c8-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IShapeSeries;
struct __declspec(uuid("b6c104c9-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IArrowSeries;
struct __declspec(uuid("b6c104ca-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ ICustomBarSeries;
struct __declspec(uuid("b6c104cb-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IBarSeries;
struct __declspec(uuid("b6c104db-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IHorizBarSeries;
struct __declspec(uuid("b6c104dc-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ ICandleSeries;
struct __declspec(uuid("b6c104dd-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ ICustomPolarSeries;
struct __declspec(uuid("b6c104de-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ ICustom3DSeries;
struct __declspec(uuid("b6c104df-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IErrorBarSeries;
struct __declspec(uuid("b6c104e0-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IVolumeSeries;
struct __declspec(uuid("b6c104e1-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IAddFunction;
struct __declspec(uuid("b6c104e2-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ ISubtractFunction;
struct __declspec(uuid("b6c104e3-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IMultiplyFunction;
struct __declspec(uuid("b6c104e4-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IDivideFunction;
struct __declspec(uuid("b6c104e5-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IAverageFunction;
struct __declspec(uuid("b6c104e6-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IHighFunction;
struct __declspec(uuid("b6c104e7-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ ILowFunction;
struct __declspec(uuid("b6c104e8-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ ICurveFittingFunction;
struct __declspec(uuid("b6c104e9-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IExpAvgFunction;
struct __declspec(uuid("b6c104ea-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IMovingAvgFunction;
struct __declspec(uuid("b6c104eb-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IChartFont;
struct __declspec(uuid("b6c104ec-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IMomentumFunction;
enum ECanvasBackMode;
enum ECanvasTextAlign;
struct __declspec(uuid("b6c104ed-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IPieOtherSlice;
enum EPieOtherStyle;
struct __declspec(uuid("b6c10501-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IExplodedSlices;
struct __declspec(uuid("b6c10502-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ ICustom3DPaletteSeries;
struct __declspec(uuid("b6c10503-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ ICustom3DGridSeries;
struct __declspec(uuid("b6c10504-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IBezierSeries;
struct __declspec(uuid("b6c10505-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IRadarSeries;
struct __declspec(uuid("b6c10506-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IErrorSeries;
struct __declspec(uuid("b6c10507-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IPoint3DSeries;
struct __declspec(uuid("b6c10508-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ ISurfaceSeries;
struct __declspec(uuid("b6c10509-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ ISeriesMarksPositions;
struct __declspec(uuid("b6c1050a-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ ISeriesMarkPosition;
struct __declspec(uuid("b6c1050b-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IPolarSeries;
struct __declspec(uuid("b6c1050c-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ ICircleLabels;
enum EErrorSeriesStyle;
enum EFunctionPeriodAlign;
enum EFunctionPeriodStyle;
struct __declspec(uuid("b6c1050d-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ ITrendFunction;
struct __declspec(uuid("b6c1050e-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IStdDeviationFunction;
struct __declspec(uuid("b6c1050f-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ ICumulativeFunction;
struct __declspec(uuid("b6c10510-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IRSIFunction;
struct __declspec(uuid("b6c10511-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ ICountFunction;
struct __declspec(uuid("b6c10512-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IEnvironment;
struct __declspec(uuid("b6c10513-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ ITeeLinked;
struct __declspec(uuid("b6c10529-fb89-11d4-93c9-006008a7eed4"))
/* dispinterface */ ITeeCommanderEvents;
struct __declspec(uuid("b6c1052a-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ ITeeCommander;
struct __declspec(uuid("b6c1052b-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ ITeeListBox;
struct __declspec(uuid("b6c1052c-fb89-11d4-93c9-006008a7eed4"))
/* dispinterface */ ITeeListBoxEvents;
struct /* coclass */ TeeListBox;
struct __declspec(uuid("b6c1052e-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ ITeeEditor;
struct __declspec(uuid("b6c1052f-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ ITeePreviewer;
struct /* coclass */ TeeEditor;
struct /* coclass */ TeePreviewer;
struct /* coclass */ TeeCommander;
enum ETeeEditorPage;
struct __declspec(uuid("b6c10533-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ ITeePoint2D;
struct __declspec(uuid("b6c10534-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ ITeePoint3D;
struct __declspec(uuid("b6c10535-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ ITeeEditorShowPages;
struct __declspec(uuid("b6c10536-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ ITeeEditorOptions;
struct __declspec(uuid("b6c10537-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ ITeePreviewerOptions;
struct __declspec(uuid("b6c10538-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ ITeeOpenGL;
struct __declspec(uuid("b6c10539-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IClockSeries;
struct __declspec(uuid("b6c1053a-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IWindRoseSeries;
struct __declspec(uuid("b6c1053c-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IBar3DSeries;
struct __declspec(uuid("b6c1053b-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ IImageBarSeries;
enum EStreamType;
struct __declspec(uuid("67d7aa1c-12fa-4f34-8eb2-b3e8646e0e5f"))
/* dual interface */ ITools;
struct __declspec(uuid("62dd8655-f041-11d4-93b1-006008a7eed4"))
/* dual interface */ ICustomToolSeries;
enum ECursorToolStyle;
struct __declspec(uuid("9ce4e780-4431-4504-948a-797d83c1e310"))
/* dual interface */ IDragMarksTool;
struct __declspec(uuid("11f8e071-f114-11d4-93b3-006008a7eed4"))
/* dual interface */ ICustomToolAxis;
struct __declspec(uuid("5970102e-e487-4b12-88a8-a7930ef23e5d"))
/* dual interface */ IDrawLineTool;
struct __declspec(uuid("2eb35e28-80cf-4f35-9b6b-427e2ac1bfa6"))
/* dual interface */ INearestTool;
struct __declspec(uuid("c9f8e464-0b4b-4427-8678-363cf8e1955d"))
/* dual interface */ IColorBandTool;
struct __declspec(uuid("cde865c4-6b25-4604-8813-f0a65e51f1c8"))
/* dual interface */ IColorLineTool;
struct __declspec(uuid("97763cec-4d57-4612-a799-05c6e19ac789"))
/* dual interface */ IRotateTool;
enum EAxisArrowToolPosition;
enum ENearestToolStyle;
struct __declspec(uuid("c793db5d-e235-4248-87ad-e436822e64f2"))
/* dual interface */ IHorizLineSeries;
struct __declspec(uuid("b4b8b973-32bf-40a8-8e07-efba557e13f8"))
/* dual interface */ IHighLowSeries;
struct __declspec(uuid("3b2b9817-fbbf-11d4-93ca-006008a7eed4"))
/* dual interface */ ITitles;
enum EChartObjectShapeStyle;
struct __declspec(uuid("750eb847-b333-4a73-8aee-9087f8b98d1e"))
/* dual interface */ IToolList;
enum EToolClass;
struct __declspec(uuid("cc476b13-71ac-463f-85e4-0aa8dd8b8bde"))
/* dual interface */ ILegendSymbol;
enum ELegendSymbolPosition;
enum ELegendSymbolSize;
struct __declspec(uuid("3b2b9819-fbbf-11d4-93ca-006008a7eed4"))
/* dual interface */ ITeeFont;
struct __declspec(uuid("5101d067-ad02-426b-832e-a898af6e4f5e"))
/* dual interface */ ITeeShadow;
enum ETeeZoomDirection;
struct __declspec(uuid("252a62f5-0c94-48e0-90ad-7b64200e53c1"))
/* dual interface */ ITeePreviewPanel;
struct __declspec(uuid("26f54550-bcb7-4cae-b817-0d681fef07f7"))
/* dispinterface */ ITeePreviewPanelEvents;
struct /* coclass */ TeePreviewPanel;
enum ETeePreviewPanelOrientation;
struct __declspec(uuid("fd15f1c9-69d8-4fae-9a96-dd2e0b88ddd4"))
/* dual interface */ IChartGrid;
struct __declspec(uuid("74687f85-2744-11d5-9411-006008a7eed4"))
/* dispinterface */ IChartGridEvents;
struct __declspec(uuid("9a52f188-2664-4615-b199-b9aa9ad22861"))
/* dual interface */ IChartGridNavigator;
struct /* coclass */ ChartGridNavigator;
struct __declspec(uuid("32268bd8-c0d1-473d-a13c-65ab4a58397b"))
/* dual interface */ IChartPageNavigator;
struct /* coclass */ ChartPageNavigator;
struct __declspec(uuid("8a48ba34-fa69-4168-a477-026f96344c49"))
/* dual interface */ IChartEditorPanel;
struct /* coclass */ ChartEditorPanel;
enum ERSIStyle;
enum ECustomSeriesStack;
enum ETeeVertAlign;
enum EAxisLabelAlign;
struct __declspec(uuid("f66470fb-1309-47ff-a790-26e2e38bebd0"))
/* dual interface */ IContourLevels;
struct __declspec(uuid("0b304b42-253f-4221-8c87-8ad1fca76c94"))
/* dual interface */ IContourLevel;
struct __declspec(uuid("41a5c203-7f36-4e11-840d-d41230760d8e"))
/* dual interface */ IDonutSeries;
struct __declspec(uuid("5b9827e5-3be4-4da3-9a6f-611bf900e4e1"))
/* dual interface */ ITriSurfaceSeries;
struct __declspec(uuid("9df3ed1f-13b7-4a7e-803e-d4bb0c7e5900"))
/* dual interface */ ICustomBoxSeries;
struct __declspec(uuid("cb0ce331-76cb-449c-9be7-fb69c03c3439"))
/* dual interface */ IHorizBoxPlotSeries;
struct __declspec(uuid("70c80bd0-d36a-46c9-a9d6-ae8687ca0ea5"))
/* dual interface */ IHistogramSeries;
struct __declspec(uuid("ba3a0e2d-cce7-4cf6-82d2-044b2a64ee59"))
/* dual interface */ IColorGridSeries;
struct __declspec(uuid("da944291-24c8-4956-bee4-3129a675a49c"))
/* dual interface */ IBarJoinSeries;
struct __declspec(uuid("4cc67466-2a11-45c6-924e-15e8b9f6b780"))
/* dual interface */ IWaterfallSeries;
struct __declspec(uuid("69a3c18d-728e-47b5-9144-7c58b59aa42d"))
/* dual interface */ ISmithSeries;
struct __declspec(uuid("fdb6ae9b-ae83-4cc3-ac6d-03cf0e133867"))
/* dual interface */ IPyramidSeries;
struct __declspec(uuid("33a0cf4e-ae1f-43db-a3cf-b7f9905085c8"))
/* dual interface */ IMapSeries;
struct __declspec(uuid("dfbf9393-46fd-11d2-aec3-00400141862d"))
/* dual interface */ IContourSeries;
struct __declspec(uuid("2e375632-a81d-400a-9369-f609b6b914ac"))
/* dual interface */ IBoxPlotSeries;
struct __declspec(uuid("cf5dfd57-e60d-11d4-93a2-006008a7eed4"))
/* dual interface */ ITeePanelsList;
struct TeeRect;
enum EBezierStyle;
enum EPaletteStyle;
struct __declspec(uuid("449c6526-c2f8-47ee-8386-32d20b488b8b"))
/* dual interface */ ICursorTool;
struct __declspec(uuid("62dd8657-f041-11d4-93b1-006008a7eed4"))
/* dual interface */ IDrawLineList;
struct __declspec(uuid("62dd8659-f041-11d4-93b1-006008a7eed4"))
/* dual interface */ IDrawLine;
struct __declspec(uuid("c746269f-0a39-4ec5-b52f-7e489835035b"))
/* dual interface */ IAxisArrowTool;
struct __declspec(uuid("235fb742-f8ed-11d4-93c8-006008a7eed4"))
/* dual interface */ IExportFormat;
struct __declspec(uuid("a77491e3-f825-11d4-93c7-006008a7eed4"))
/* dual interface */ IJPEGExport;
struct __declspec(uuid("235fb744-f8ed-11d4-93c8-006008a7eed4"))
/* dual interface */ IPNGExport;
struct __declspec(uuid("235fb746-f8ed-11d4-93c8-006008a7eed4"))
/* dual interface */ IGIFExport;
enum EGIFCompression;
enum EGIFDitherMode;
enum EGIFColorReduction;
struct __declspec(uuid("235fb74b-f8ed-11d4-93c8-006008a7eed4"))
/* dual interface */ IPCXExport;
struct __declspec(uuid("235fb74d-f8ed-11d4-93c8-006008a7eed4"))
/* dual interface */ IMetafileExport;
struct __declspec(uuid("235fb74f-f8ed-11d4-93c8-006008a7eed4"))
/* dual interface */ IBMPExport;
enum EPixelFormat;
struct __declspec(uuid("235fb753-f8ed-11d4-93c8-006008a7eed4"))
/* dual interface */ IMarksTipTool;
struct __declspec(uuid("235fb755-f8ed-11d4-93c8-006008a7eed4"))
/* dual interface */ IChartImageTool;
enum EMarkToolMouseAction;
struct __declspec(uuid("6321aac0-d3f4-4dbd-8f84-27d98ec46046"))
/* dual interface */ IMomentumDivFunction;
struct __declspec(uuid("a3aa3639-e612-4d0a-ade7-57abdeb6ead6"))
/* dual interface */ IExpTrendFunction;
struct __declspec(uuid("d1a32481-6206-4cbf-8261-55141706e6ac"))
/* dual interface */ IExpMovAvgFunction;
struct __declspec(uuid("662c9054-0898-4f09-881e-5abb47978fb6"))
/* dual interface */ IRMSFunction;
struct __declspec(uuid("b86ae373-50dc-4ae9-8872-8e3f9fc21a4e"))
/* dual interface */ IMACDFunction;
struct __declspec(uuid("aa13e17b-57fc-4364-9bbe-ee2095821f16"))
/* dual interface */ IStochasticFunction;
struct __declspec(uuid("2dcbf4ff-bedf-4140-b726-70996bb2b6e6"))
/* dual interface */ IBollingerFunction;
struct __declspec(uuid("3752717c-15c0-4c15-9532-c9c371388028"))
/* dual interface */ IADXFunction;
struct __declspec(uuid("ac690acd-0730-11d5-93e3-006008a7eed4"))
/* dual interface */ INativeExport;
struct __declspec(uuid("ac690acf-0730-11d5-93e3-006008a7eed4"))
/* dual interface */ IDataExport;
struct __declspec(uuid("ac690ad1-0730-11d5-93e3-006008a7eed4"))
/* dual interface */ IXMLExport;
struct __declspec(uuid("ac690ad3-0730-11d5-93e3-006008a7eed4"))
/* dual interface */ IXLSExport;
struct __declspec(uuid("ac690ad5-0730-11d5-93e3-006008a7eed4"))
/* dual interface */ IHTMLExport;
struct __declspec(uuid("ac690ad7-0730-11d5-93e3-006008a7eed4"))
/* dual interface */ ITextExport;
struct __declspec(uuid("ac690ad9-0730-11d5-93e3-006008a7eed4"))
/* dual interface */ IMapPolygonList;
struct __declspec(uuid("ac690adb-0730-11d5-93e3-006008a7eed4"))
/* dual interface */ IMapPolygon;
struct __declspec(uuid("01e6d0d8-07ee-11d5-93e4-006008a7eed4"))
/* dual interface */ IFunnelSeries;
struct __declspec(uuid("01e6d0da-07ee-11d5-93e4-006008a7eed4"))
/* dual interface */ ICalendarSeries;
enum ETeeCommanderControls;
struct __declspec(uuid("e517cb25-1c48-11d5-9400-006008a7eed4"))
/* dual interface */ ICalendarCell;
struct __declspec(uuid("e517cb27-1c48-11d5-9400-006008a7eed4"))
/* dual interface */ ICalendarCellUpper;
struct __declspec(uuid("e517cb29-1c48-11d5-9400-006008a7eed4"))
/* dual interface */ IAnnotationTool;
enum EAnnotationPosition;
struct __declspec(uuid("b6c104a8-fb89-11d4-93c9-006008a7eed4"))
/* dual interface */ ILegend;
struct __declspec(uuid("e517cb2e-1c48-11d5-9400-006008a7eed4"))
/* dual interface */ IPageNumTool;
struct __declspec(uuid("4061f8f0-1d1c-11d5-9401-006008a7eed4"))
/* dual interface */ ISeriesTextSource;
struct /* coclass */ SeriesTextSource;
struct __declspec(uuid("4061f8f5-1d1c-11d5-9401-006008a7eed4"))
/* dual interface */ ISeriesTextFields;
struct __declspec(uuid("4061f8f7-1d1c-11d5-9401-006008a7eed4"))
/* dual interface */ ISeriesTextField;
struct /* coclass */ ChartGrid;
enum EDatasourceType;
struct __declspec(uuid("a841a3e5-3ed7-11d5-943d-006008a7eed4"))
/* dual interface */ IValueLists;
struct __declspec(uuid("22a5d9bb-b643-11d5-94f8-006008a7eed4"))
/* dual interface */ ITeeShapePanel;
struct __declspec(uuid("5253cebf-921c-4b2a-80d8-c23be8908900"))
/* dual interface */ IChartGridRows;
struct __declspec(uuid("8bfbfaf7-2fab-4f28-9c7b-08a2d1f157ae"))
/* dual interface */ IChartGridCols;
enum EPenEndStyle;
struct TeePoint2D;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(ITChartEvents, __uuidof(ITChartEvents));
_COM_SMARTPTR_TYPEDEF(IBrush, __uuidof(IBrush));
_COM_SMARTPTR_TYPEDEF(IStrings, __uuidof(IStrings));
_COM_SMARTPTR_TYPEDEF(IImport, __uuidof(IImport));
_COM_SMARTPTR_TYPEDEF(IScroll, __uuidof(IScroll));
_COM_SMARTPTR_TYPEDEF(IPrinter, __uuidof(IPrinter));
_COM_SMARTPTR_TYPEDEF(IGradient, __uuidof(IGradient));
_COM_SMARTPTR_TYPEDEF(IPage, __uuidof(IPage));
_COM_SMARTPTR_TYPEDEF(IPanel, __uuidof(IPanel));
_COM_SMARTPTR_TYPEDEF(IValueList, __uuidof(IValueList));
_COM_SMARTPTR_TYPEDEF(IAddFunction, __uuidof(IAddFunction));
_COM_SMARTPTR_TYPEDEF(ISubtractFunction, __uuidof(ISubtractFunction));
_COM_SMARTPTR_TYPEDEF(IMultiplyFunction, __uuidof(IMultiplyFunction));
_COM_SMARTPTR_TYPEDEF(IDivideFunction, __uuidof(IDivideFunction));
_COM_SMARTPTR_TYPEDEF(IAverageFunction, __uuidof(IAverageFunction));
_COM_SMARTPTR_TYPEDEF(IHighFunction, __uuidof(IHighFunction));
_COM_SMARTPTR_TYPEDEF(ILowFunction, __uuidof(ILowFunction));
_COM_SMARTPTR_TYPEDEF(ICurveFittingFunction, __uuidof(ICurveFittingFunction));
_COM_SMARTPTR_TYPEDEF(IExpAvgFunction, __uuidof(IExpAvgFunction));
_COM_SMARTPTR_TYPEDEF(IMovingAvgFunction, __uuidof(IMovingAvgFunction));
_COM_SMARTPTR_TYPEDEF(IChartFont, __uuidof(IChartFont));
_COM_SMARTPTR_TYPEDEF(IMomentumFunction, __uuidof(IMomentumFunction));
_COM_SMARTPTR_TYPEDEF(IPieOtherSlice, __uuidof(IPieOtherSlice));
_COM_SMARTPTR_TYPEDEF(IExplodedSlices, __uuidof(IExplodedSlices));
_COM_SMARTPTR_TYPEDEF(ICircleLabels, __uuidof(ICircleLabels));
_COM_SMARTPTR_TYPEDEF(ITrendFunction, __uuidof(ITrendFunction));
_COM_SMARTPTR_TYPEDEF(IStdDeviationFunction, __uuidof(IStdDeviationFunction));
_COM_SMARTPTR_TYPEDEF(ICumulativeFunction, __uuidof(ICumulativeFunction));
_COM_SMARTPTR_TYPEDEF(ICountFunction, __uuidof(ICountFunction));
_COM_SMARTPTR_TYPEDEF(IEnvironment, __uuidof(IEnvironment));
_COM_SMARTPTR_TYPEDEF(ITeeCommanderEvents, __uuidof(ITeeCommanderEvents));
_COM_SMARTPTR_TYPEDEF(ITeeListBoxEvents, __uuidof(ITeeListBoxEvents));
_COM_SMARTPTR_TYPEDEF(ITeePoint2D, __uuidof(ITeePoint2D));
_COM_SMARTPTR_TYPEDEF(ISeriesMarkPosition, __uuidof(ISeriesMarkPosition));
_COM_SMARTPTR_TYPEDEF(ISeriesMarksPositions, __uuidof(ISeriesMarksPositions));
_COM_SMARTPTR_TYPEDEF(ITeePoint3D, __uuidof(ITeePoint3D));
_COM_SMARTPTR_TYPEDEF(ITeeEditorShowPages, __uuidof(ITeeEditorShowPages));
_COM_SMARTPTR_TYPEDEF(ITeeEditorOptions, __uuidof(ITeeEditorOptions));
_COM_SMARTPTR_TYPEDEF(ITeePreviewerOptions, __uuidof(ITeePreviewerOptions));
_COM_SMARTPTR_TYPEDEF(ITeeOpenGL, __uuidof(ITeeOpenGL));
_COM_SMARTPTR_TYPEDEF(IAspect, __uuidof(IAspect));
_COM_SMARTPTR_TYPEDEF(ICustomToolSeries, __uuidof(ICustomToolSeries));
_COM_SMARTPTR_TYPEDEF(IDragMarksTool, __uuidof(IDragMarksTool));
_COM_SMARTPTR_TYPEDEF(ICustomToolAxis, __uuidof(ICustomToolAxis));
_COM_SMARTPTR_TYPEDEF(IRotateTool, __uuidof(IRotateTool));
_COM_SMARTPTR_TYPEDEF(ILegendSymbol, __uuidof(ILegendSymbol));
_COM_SMARTPTR_TYPEDEF(ITeeShadow, __uuidof(ITeeShadow));
_COM_SMARTPTR_TYPEDEF(ITeeFont, __uuidof(ITeeFont));
_COM_SMARTPTR_TYPEDEF(IAxisTitle, __uuidof(IAxisTitle));
_COM_SMARTPTR_TYPEDEF(ITeePreviewPanelEvents, __uuidof(ITeePreviewPanelEvents));
_COM_SMARTPTR_TYPEDEF(IChartGridEvents, __uuidof(IChartGridEvents));
_COM_SMARTPTR_TYPEDEF(IRSIFunction, __uuidof(IRSIFunction));
_COM_SMARTPTR_TYPEDEF(IAxisLabels, __uuidof(IAxisLabels));
_COM_SMARTPTR_TYPEDEF(IContourLevel, __uuidof(IContourLevel));
_COM_SMARTPTR_TYPEDEF(IContourLevels, __uuidof(IContourLevels));
_COM_SMARTPTR_TYPEDEF(IPyramidSeries, __uuidof(IPyramidSeries));
_COM_SMARTPTR_TYPEDEF(ITeePanelsList, __uuidof(ITeePanelsList));
_COM_SMARTPTR_TYPEDEF(ITeeCustomShape, __uuidof(ITeeCustomShape));
_COM_SMARTPTR_TYPEDEF(ITeeShapePosition, __uuidof(ITeeShapePosition));
_COM_SMARTPTR_TYPEDEF(IExportFormat, __uuidof(IExportFormat));
_COM_SMARTPTR_TYPEDEF(IJPEGExport, __uuidof(IJPEGExport));
_COM_SMARTPTR_TYPEDEF(IPNGExport, __uuidof(IPNGExport));
_COM_SMARTPTR_TYPEDEF(IGIFExport, __uuidof(IGIFExport));
_COM_SMARTPTR_TYPEDEF(IPCXExport, __uuidof(IPCXExport));
_COM_SMARTPTR_TYPEDEF(IMetafileExport, __uuidof(IMetafileExport));
_COM_SMARTPTR_TYPEDEF(IBMPExport, __uuidof(IBMPExport));
_COM_SMARTPTR_TYPEDEF(IChartImageTool, __uuidof(IChartImageTool));
_COM_SMARTPTR_TYPEDEF(IMarksTipTool, __uuidof(IMarksTipTool));
_COM_SMARTPTR_TYPEDEF(IMomentumDivFunction, __uuidof(IMomentumDivFunction));
_COM_SMARTPTR_TYPEDEF(IExpTrendFunction, __uuidof(IExpTrendFunction));
_COM_SMARTPTR_TYPEDEF(IExpMovAvgFunction, __uuidof(IExpMovAvgFunction));
_COM_SMARTPTR_TYPEDEF(IRMSFunction, __uuidof(IRMSFunction));
_COM_SMARTPTR_TYPEDEF(IStochasticFunction, __uuidof(IStochasticFunction));
_COM_SMARTPTR_TYPEDEF(INativeExport, __uuidof(INativeExport));
_COM_SMARTPTR_TYPEDEF(IDataExport, __uuidof(IDataExport));
_COM_SMARTPTR_TYPEDEF(IXMLExport, __uuidof(IXMLExport));
_COM_SMARTPTR_TYPEDEF(IXLSExport, __uuidof(IXLSExport));
_COM_SMARTPTR_TYPEDEF(IHTMLExport, __uuidof(IHTMLExport));
_COM_SMARTPTR_TYPEDEF(ITextExport, __uuidof(ITextExport));
_COM_SMARTPTR_TYPEDEF(IExport, __uuidof(IExport));
_COM_SMARTPTR_TYPEDEF(ICalendarCell, __uuidof(ICalendarCell));
_COM_SMARTPTR_TYPEDEF(ICalendarCellUpper, __uuidof(ICalendarCellUpper));
_COM_SMARTPTR_TYPEDEF(ICalendarSeries, __uuidof(ICalendarSeries));
_COM_SMARTPTR_TYPEDEF(ISeriesTextField, __uuidof(ISeriesTextField));
_COM_SMARTPTR_TYPEDEF(ISeriesTextFields, __uuidof(ISeriesTextFields));
_COM_SMARTPTR_TYPEDEF(IValueLists, __uuidof(IValueLists));
_COM_SMARTPTR_TYPEDEF(IChartGridRows, __uuidof(IChartGridRows));
_COM_SMARTPTR_TYPEDEF(IChartGridCols, __uuidof(IChartGridCols));
_COM_SMARTPTR_TYPEDEF(IPen, __uuidof(IPen));
_COM_SMARTPTR_TYPEDEF(ICanvas, __uuidof(ICanvas));
_COM_SMARTPTR_TYPEDEF(IAxis, __uuidof(IAxis));
_COM_SMARTPTR_TYPEDEF(IAxes, __uuidof(IAxes));
_COM_SMARTPTR_TYPEDEF(IZoom, __uuidof(IZoom));
_COM_SMARTPTR_TYPEDEF(IWall, __uuidof(IWall));
_COM_SMARTPTR_TYPEDEF(IWalls, __uuidof(IWalls));
_COM_SMARTPTR_TYPEDEF(IMarks, __uuidof(IMarks));
_COM_SMARTPTR_TYPEDEF(IPointer, __uuidof(IPointer));
_COM_SMARTPTR_TYPEDEF(ICustomSeries, __uuidof(ICustomSeries));
_COM_SMARTPTR_TYPEDEF(IAreaSeries, __uuidof(IAreaSeries));
_COM_SMARTPTR_TYPEDEF(IPointSeries, __uuidof(IPointSeries));
_COM_SMARTPTR_TYPEDEF(ILineSeries, __uuidof(ILineSeries));
_COM_SMARTPTR_TYPEDEF(IFastLineSeries, __uuidof(IFastLineSeries));
_COM_SMARTPTR_TYPEDEF(IBubbleSeries, __uuidof(IBubbleSeries));
_COM_SMARTPTR_TYPEDEF(IGanttSeries, __uuidof(IGanttSeries));
_COM_SMARTPTR_TYPEDEF(IShapeSeries, __uuidof(IShapeSeries));
_COM_SMARTPTR_TYPEDEF(IArrowSeries, __uuidof(IArrowSeries));
_COM_SMARTPTR_TYPEDEF(ICustomBarSeries, __uuidof(ICustomBarSeries));
_COM_SMARTPTR_TYPEDEF(IBarSeries, __uuidof(IBarSeries));
_COM_SMARTPTR_TYPEDEF(IHorizBarSeries, __uuidof(IHorizBarSeries));
_COM_SMARTPTR_TYPEDEF(ICandleSeries, __uuidof(ICandleSeries));
_COM_SMARTPTR_TYPEDEF(ICustom3DSeries, __uuidof(ICustom3DSeries));
_COM_SMARTPTR_TYPEDEF(IErrorBarSeries, __uuidof(IErrorBarSeries));
_COM_SMARTPTR_TYPEDEF(IVolumeSeries, __uuidof(IVolumeSeries));
_COM_SMARTPTR_TYPEDEF(ICustom3DPaletteSeries, __uuidof(ICustom3DPaletteSeries));
_COM_SMARTPTR_TYPEDEF(ICustom3DGridSeries, __uuidof(ICustom3DGridSeries));
_COM_SMARTPTR_TYPEDEF(IBezierSeries, __uuidof(IBezierSeries));
_COM_SMARTPTR_TYPEDEF(IErrorSeries, __uuidof(IErrorSeries));
_COM_SMARTPTR_TYPEDEF(IPoint3DSeries, __uuidof(IPoint3DSeries));
_COM_SMARTPTR_TYPEDEF(ISurfaceSeries, __uuidof(ISurfaceSeries));
_COM_SMARTPTR_TYPEDEF(IBar3DSeries, __uuidof(IBar3DSeries));
_COM_SMARTPTR_TYPEDEF(IImageBarSeries, __uuidof(IImageBarSeries));
_COM_SMARTPTR_TYPEDEF(INearestTool, __uuidof(INearestTool));
_COM_SMARTPTR_TYPEDEF(IColorBandTool, __uuidof(IColorBandTool));
_COM_SMARTPTR_TYPEDEF(IColorLineTool, __uuidof(IColorLineTool));
_COM_SMARTPTR_TYPEDEF(IHorizLineSeries, __uuidof(IHorizLineSeries));
_COM_SMARTPTR_TYPEDEF(IHighLowSeries, __uuidof(IHighLowSeries));
_COM_SMARTPTR_TYPEDEF(ITitles, __uuidof(ITitles));
_COM_SMARTPTR_TYPEDEF(ITriSurfaceSeries, __uuidof(ITriSurfaceSeries));
_COM_SMARTPTR_TYPEDEF(ICustomBoxSeries, __uuidof(ICustomBoxSeries));
_COM_SMARTPTR_TYPEDEF(IHorizBoxPlotSeries, __uuidof(IHorizBoxPlotSeries));
_COM_SMARTPTR_TYPEDEF(IHistogramSeries, __uuidof(IHistogramSeries));
_COM_SMARTPTR_TYPEDEF(IColorGridSeries, __uuidof(IColorGridSeries));
_COM_SMARTPTR_TYPEDEF(IBarJoinSeries, __uuidof(IBarJoinSeries));
_COM_SMARTPTR_TYPEDEF(IWaterfallSeries, __uuidof(IWaterfallSeries));
_COM_SMARTPTR_TYPEDEF(IContourSeries, __uuidof(IContourSeries));
_COM_SMARTPTR_TYPEDEF(IBoxPlotSeries, __uuidof(IBoxPlotSeries));
_COM_SMARTPTR_TYPEDEF(ICursorTool, __uuidof(ICursorTool));
_COM_SMARTPTR_TYPEDEF(IDrawLine, __uuidof(IDrawLine));
_COM_SMARTPTR_TYPEDEF(IDrawLineList, __uuidof(IDrawLineList));
_COM_SMARTPTR_TYPEDEF(IDrawLineTool, __uuidof(IDrawLineTool));
_COM_SMARTPTR_TYPEDEF(IAxisArrowTool, __uuidof(IAxisArrowTool));
_COM_SMARTPTR_TYPEDEF(IMapPolygon, __uuidof(IMapPolygon));
_COM_SMARTPTR_TYPEDEF(IMapPolygonList, __uuidof(IMapPolygonList));
_COM_SMARTPTR_TYPEDEF(IMapSeries, __uuidof(IMapSeries));
_COM_SMARTPTR_TYPEDEF(IFunnelSeries, __uuidof(IFunnelSeries));
_COM_SMARTPTR_TYPEDEF(ILegend, __uuidof(ILegend));
_COM_SMARTPTR_TYPEDEF(ITeeShapePanel, __uuidof(ITeeShapePanel));
_COM_SMARTPTR_TYPEDEF(IAnnotationTool, __uuidof(IAnnotationTool));
_COM_SMARTPTR_TYPEDEF(IPageNumTool, __uuidof(IPageNumTool));
_COM_SMARTPTR_TYPEDEF(ITools, __uuidof(ITools));
_COM_SMARTPTR_TYPEDEF(IToolList, __uuidof(IToolList));
_COM_SMARTPTR_TYPEDEF(ICircledSeries, __uuidof(ICircledSeries));
_COM_SMARTPTR_TYPEDEF(IPieSeries, __uuidof(IPieSeries));
_COM_SMARTPTR_TYPEDEF(ICustomPolarSeries, __uuidof(ICustomPolarSeries));
_COM_SMARTPTR_TYPEDEF(IRadarSeries, __uuidof(IRadarSeries));
_COM_SMARTPTR_TYPEDEF(IPolarSeries, __uuidof(IPolarSeries));
_COM_SMARTPTR_TYPEDEF(IClockSeries, __uuidof(IClockSeries));
_COM_SMARTPTR_TYPEDEF(IWindRoseSeries, __uuidof(IWindRoseSeries));
_COM_SMARTPTR_TYPEDEF(IDonutSeries, __uuidof(IDonutSeries));
_COM_SMARTPTR_TYPEDEF(ISmithSeries, __uuidof(ISmithSeries));
_COM_SMARTPTR_TYPEDEF(ITChart, __uuidof(ITChart));
_COM_SMARTPTR_TYPEDEF(ITeeLinked, __uuidof(ITeeLinked));
_COM_SMARTPTR_TYPEDEF(ITeeListBox, __uuidof(ITeeListBox));
_COM_SMARTPTR_TYPEDEF(ITeeEditor, __uuidof(ITeeEditor));
_COM_SMARTPTR_TYPEDEF(ITeePreviewer, __uuidof(ITeePreviewer));
_COM_SMARTPTR_TYPEDEF(ITeeCommander, __uuidof(ITeeCommander));
_COM_SMARTPTR_TYPEDEF(ITeePreviewPanel, __uuidof(ITeePreviewPanel));
_COM_SMARTPTR_TYPEDEF(IChartGrid, __uuidof(IChartGrid));
_COM_SMARTPTR_TYPEDEF(IChartGridNavigator, __uuidof(IChartGridNavigator));
_COM_SMARTPTR_TYPEDEF(IChartPageNavigator, __uuidof(IChartPageNavigator));
_COM_SMARTPTR_TYPEDEF(IChartEditorPanel, __uuidof(IChartEditorPanel));
_COM_SMARTPTR_TYPEDEF(ISeriesTextSource, __uuidof(ISeriesTextSource));
_COM_SMARTPTR_TYPEDEF(ISeries, __uuidof(ISeries));
_COM_SMARTPTR_TYPEDEF(IMACDFunction, __uuidof(IMACDFunction));
_COM_SMARTPTR_TYPEDEF(IBollingerFunction, __uuidof(IBollingerFunction));
_COM_SMARTPTR_TYPEDEF(IADXFunction, __uuidof(IADXFunction));
_COM_SMARTPTR_TYPEDEF(ITeeFunction, __uuidof(ITeeFunction));

//
// Type library items
//

enum __declspec(uuid("3b2b97e9-fbbf-11d4-93ca-006008a7eed4"))
EPanelBevel
{
    bvNone = 0,
    bvLowered = 1,
    bvRaised = 2
};

enum __declspec(uuid("3b2b97ea-fbbf-11d4-93ca-006008a7eed4"))
EBorderStyle
{
    bsNone = 0,
    bsSingle = 1
};

enum __declspec(uuid("3b2b97eb-fbbf-11d4-93ca-006008a7eed4"))
EDragMode
{
    dmManual = 0,
    dmAutomatic = 1
};

enum __declspec(uuid("3b2b97ec-fbbf-11d4-93ca-006008a7eed4"))
EChartPenStyle
{
    psSolid = 0,
    psDash = 1,
    psDot = 2,
    psDashDot = 3,
    psDashDotDot = 4,
    psClear = 5,
    psInsideFrame = 6,
    psSmallDots = 7
};

enum __declspec(uuid("3b2b97ed-fbbf-11d4-93ca-006008a7eed4"))
ELegendStyle
{
    lsAuto = 0,
    lsSeries = 1,
    lsValues = 2,
    lsLastValues = 3
};

enum __declspec(uuid("3b2b97ee-fbbf-11d4-93ca-006008a7eed4"))
EMouseButton
{
    mbLeft = 1,
    mbRight = 2,
    mbMiddle = 4
};

enum __declspec(uuid("3b2b97ef-fbbf-11d4-93ca-006008a7eed4"))
EDragState
{
    dsDragEnter = 0,
    dsDragLeave = 1,
    dsDragMove = 2
};

enum __declspec(uuid("3b2b97f0-fbbf-11d4-93ca-006008a7eed4"))
EGradientDirection
{
    gdTopBottom = 0,
    gdBottomTop = 1,
    gdLeftRight = 2,
    gdRightLeft = 3,
    gdFromCenter = 4,
    gdFromTopLeft = 5,
    gdFromBottomLeft = 6
};

enum __declspec(uuid("3b2b97f1-fbbf-11d4-93ca-006008a7eed4"))
EAxisLabelStyle
{
    talAuto = 0,
    talNone = 1,
    talValue = 2,
    talMark = 3,
    talText = 4
};

enum __declspec(uuid("3b2b97f2-fbbf-11d4-93ca-006008a7eed4"))
EHorizontalAxis
{
    aTopAxis = 0,
    aBottomAxis = 1,
    aBothHorizAxis = 2,
    aCustomHorizAxis = 3
};

enum __declspec(uuid("3b2b97f3-fbbf-11d4-93ca-006008a7eed4"))
EBrushStyle
{
    bsSolid = 0,
    bsClear = 1,
    bsHorizontal = 2,
    bsVertical = 3,
    bsFDiagonal = 4,
    bsBDiagonal = 5,
    bsCross = 6,
    bsDiagCross = 7,
    bsFill80 = 8,
    bsFill60 = 9,
    bsFill40 = 10,
    bsFill20 = 11,
    bsFill10 = 12,
    bsZigZag = 13,
    bsVertSmall = 14,
    bsHorizSmall = 15,
    bsDiagSmall = 16,
    bsBackDiagSmall = 17,
    bsCrossSmall = 18,
    bsBackCrossSmall = 19
};

enum __declspec(uuid("3b2b97f4-fbbf-11d4-93ca-006008a7eed4"))
EMultiArea
{
    maNone = 0,
    maStacked = 1,
    maStacked100 = 2
};

enum __declspec(uuid("3b2b97f5-fbbf-11d4-93ca-006008a7eed4"))
EMultiBar
{
    mbNone = 0,
    mbSide = 1,
    mbStacked = 2,
    mbStacked100 = 3,
    mbSideAll = 4
};

enum __declspec(uuid("3b2b97f7-fbbf-11d4-93ca-006008a7eed4"))
EMarkStyle
{
    smsValue = 0,
    smsPercent = 1,
    smsLabel = 2,
    smsLabelPercent = 3,
    smsLabelValue = 4,
    smsLegend = 5,
    smsPercentTotal = 6,
    smsLabelPercentTotal = 7,
    smsXValue = 8,
    smsXY = 9
};

enum __declspec(uuid("3b2b97f8-fbbf-11d4-93ca-006008a7eed4"))
EBarStyle
{
    bsRectangle = 0,
    bsPyramid = 1,
    bsInvPyramid = 2,
    bsCilinder = 3,
    bsEllipse = 4,
    bsArrow = 5,
    bsRectGradient = 6,
    bsCone = 7
};

enum __declspec(uuid("3b2b97f9-fbbf-11d4-93ca-006008a7eed4"))
EChartScroll
{
    pmNone = 0,
    pmHorizontal = 1,
    pmVertical = 2,
    pmBoth = 3
};

enum __declspec(uuid("3b2b97fa-fbbf-11d4-93ca-006008a7eed4"))
ELegendAlignment
{
    laLeft = 0,
    laRight = 1,
    laTop = 2,
    laBottom = 3
};

enum __declspec(uuid("3b2b97fb-fbbf-11d4-93ca-006008a7eed4"))
ELegendTextStyle
{
    ltsPlain = 0,
    ltsLeftValue = 1,
    ltsRightValue = 2,
    ltsLeftPercent = 3,
    ltsRightPercent = 4,
    ltsXValue = 5,
    ltsValue = 6,
    ltsPercent = 7,
    ltsXAndValue = 8,
    ltsXAndPercent = 9
};

enum __declspec(uuid("3b2b97fc-fbbf-11d4-93ca-006008a7eed4"))
EAxisType
{
    atLeft = 0,
    atTop = 1,
    atRight = 2,
    atBottom = 3,
    atDepth = 4,
    atCustom = 5
};

enum __declspec(uuid("3b2b97fd-fbbf-11d4-93ca-006008a7eed4"))
EDateTimeStep
{
    dtOneSecond = 1,
    dtFiveSeconds = 2,
    dtTenSeconds = 3,
    dtFifteenSeconds = 4,
    dtThirtySeconds = 5,
    dtOneMinute = 6,
    dtFiveMinutes = 7,
    dtTenMinutes = 8,
    dtFifteenMinutes = 9,
    dtThirtyMinutes = 10,
    dtOneHour = 11,
    dtTwoHours = 12,
    dtSixHours = 13,
    dtTwelveHours = 14,
    dtOneDay = 15,
    dtTwoDays = 16,
    dtThreeDays = 17,
    dtOneWeek = 18,
    dtHalfMonth = 19,
    dtOneMonth = 20,
    dtTwoMonths = 21,
    dtThreeMonths = 22,
    dtFourMonths = 23,
    dtOneMillisecond = 0,
    dtSixMonths = 24,
    dtOneYear = 25
};

enum __declspec(uuid("3b2b97fe-fbbf-11d4-93ca-006008a7eed4"))
EJPEGPerformance
{
    jpegBestQuality = 0,
    jpegBestSpeed = 1
};

enum __declspec(uuid("3b2b97ff-fbbf-11d4-93ca-006008a7eed4"))
EConstants
{
    clTeeColor = 536870912,
    clNone = 536870911
};

enum __declspec(uuid("3b2b9800-fbbf-11d4-93ca-006008a7eed4"))
EFunctionType
{
    tfCopy = 0,
    tfAdd = 1,
    tfSubtract = 2,
    tfMultiply = 3,
    tfDivide = 4,
    tfAverage = 5,
    tfHigh = 6,
    tfLow = 7,
    tfMovavg = 8,
    tfExpavg = 9,
    tfMomentum = 10,
    tfCurveFit = 11,
    tfRSI = 12,
    tfTrend = 13,
    tfStdDeviation = 14,
    tfCumulative = 15,
    tfCount = 16,
    tfExpTrend = 17,
    tfExpMovAvg = 18,
    tfMomentumDiv = 19,
    tfRMS = 20,
    tfMACD = 21,
    tfStochastic = 22,
    tfBollinger = 23,
    tfADX = 24
};

enum __declspec(uuid("3b2b9801-fbbf-11d4-93ca-006008a7eed4"))
EShapeXYStyle
{
    xysPixels = 0,
    xysAxis = 1,
    xysAxisOrigin = 2
};

enum __declspec(uuid("3b2b9802-fbbf-11d4-93ca-006008a7eed4"))
ECandleStyle
{
    csCandleBar = 0,
    csCandleStick = 1,
    csOpenClose = 2
};

enum __declspec(uuid("3b2b9803-fbbf-11d4-93ca-006008a7eed4"))
EErrorWidthUnits
{
    ewuPercent = 0,
    ewuPixels = 1
};

enum __declspec(uuid("3b2b9804-fbbf-11d4-93ca-006008a7eed4"))
EValueListOrder
{
    loNone = 0,
    loAscending = 1,
    loDescending = 2
};

enum __declspec(uuid("3b2b9805-fbbf-11d4-93ca-006008a7eed4"))
EShapeStyle
{
    chasRectangle = 0,
    chasCircle = 1,
    chasVertLine = 2,
    chasHorizLine = 3,
    chasTriangle = 4,
    chasInvertTriangle = 5,
    chasLine = 6,
    chasDiamond = 7,
    chasCube = 8,
    chasCross = 9,
    chasDiagCross = 10,
    chasStar = 11,
    chasPyramid = 12,
    chasInvertPyramid = 13
};

enum __declspec(uuid("3b2b9806-fbbf-11d4-93ca-006008a7eed4"))
ESeriesClass
{
    scLine = 0,
    scBar = 1,
    scHorizBar = 2,
    scArea = 3,
    scPoint = 4,
    scPie = 5,
    scFastLine = 6,
    scShape = 7,
    scGantt = 8,
    scBubble = 9,
    scArrow = 10,
    scCandle = 11,
    scPolar = 12,
    scSurface = 13,
    scVolume = 14,
    scErrorBar = 15,
    scBezier = 16,
    scContour = 17,
    scError = 18,
    scPoint3D = 19,
    scRadar = 20,
    scClock = 21,
    scWindRose = 22,
    scBar3D = 23,
    scImageBar = 24,
    scDonut = 25,
    scTriSurface = 26,
    scBox = 27,
    scHorizBox = 28,
    scHistogram = 29,
    scColorGrid = 30,
    scBarJoin = 31,
    scHighLow = 32,
    scWaterfall = 33,
    scSmith = 34,
    scPyramid = 35,
    scMap = 36,
    scHorizLine = 37,
    scFunnel = 38,
    scCalendar = 39
};

enum __declspec(uuid("3b2b9807-fbbf-11d4-93ca-006008a7eed4"))
EPrinterOrientation
{
    poPortrait = 0,
    poLandscape = 1
};

enum __declspec(uuid("3b2b9808-fbbf-11d4-93ca-006008a7eed4"))
EPointerStyle
{
    psRectangle = 0,
    psCircle = 1,
    psTriangle = 2,
    psDownTriangle = 3,
    psCross = 4,
    psDiagCross = 5,
    psStar = 6,
    psDiamond = 7,
    psSmallDot = 8
};

enum __declspec(uuid("3b2b9809-fbbf-11d4-93ca-006008a7eed4"))
ETypeFitting
{
    cfPolynomial = 0,
    cfLogarithmic = 1,
    cfExponential = 2
};

enum __declspec(uuid("3b2b980a-fbbf-11d4-93ca-006008a7eed4"))
EBackImageMode
{
    pbmStretch = 0,
    pbmTile = 1,
    pbmCenter = 2
};

enum __declspec(uuid("3b2b980b-fbbf-11d4-93ca-006008a7eed4"))
ETextAlignment
{
    aLeft = 0,
    aRight = 1,
    aCenter = 2
};

enum __declspec(uuid("3b2b980c-fbbf-11d4-93ca-006008a7eed4"))
EVerticalAxis
{
    aLeftAxis = 0,
    aRightAxis = 1,
    aBothVertAxis = 2,
    aCustomVertAxis = 3
};

enum __declspec(uuid("3b2b980d-fbbf-11d4-93ca-006008a7eed4"))
EShiftState
{
    ssShift = 1,
    ssAlt = 2,
    ssCtrl = 4,
    ssNone = 0
};

enum __declspec(uuid("3b2b980e-fbbf-11d4-93ca-006008a7eed4"))
ETitleAlignment
{
    taLeftJustify = 0,
    taRightJustify = 1,
    taCenter = 2
};

struct __declspec(uuid("b6c10487-fb89-11d4-93c9-006008a7eed4"))
ITChartEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT OnAfterDraw ( );
    HRESULT OnBeforeDrawSeries ( );
    HRESULT OnBeforeDrawAxes ( );
    HRESULT OnClick ( );
    HRESULT OnClickAxis (
        long Axis,
        enum EMouseButton Button,
        enum EShiftState Shift,
        long X,
        long Y );
    HRESULT OnClickBackground (
        enum EMouseButton Button,
        enum EShiftState Shift,
        long X,
        long Y );
    HRESULT OnClickLegend (
        enum EMouseButton Button,
        enum EShiftState Shift,
        long X,
        long Y );
    HRESULT OnClickSeries (
        long SeriesIndex,
        long ValueIndex,
        enum EMouseButton Button,
        enum EShiftState Shift,
        long X,
        long Y );
    HRESULT OnDblClick ( );
    HRESULT OnDragDrop (
        long X,
        long Y );
    HRESULT OnDragOver (
        long X,
        long Y,
        enum EDragState State,
        VARIANT_BOOL * Accept );
    HRESULT OnEndDrag (
        long X,
        long Y );
    HRESULT OnEnter ( );
    HRESULT OnExit ( );
    HRESULT OnGetAxisLabel (
        long Axis,
        long SeriesIndex,
        long ValueIndex,
        BSTR * LabelText );
    HRESULT OnGetLegendRect (
        long * Left,
        long * Top,
        long * Right,
        long * Bottom );
    HRESULT OnGetNextAxisLabel (
        long Axis,
        long LabelIndex,
        double * LabelValue,
        VARIANT_BOOL * MoreLabels );
    HRESULT OnMouseDown (
        enum EMouseButton Button,
        enum EShiftState Shift,
        long X,
        long Y );
    HRESULT OnMouseMove (
        enum EShiftState Shift,
        long X,
        long Y );
    HRESULT OnMouseUp (
        enum EMouseButton Button,
        enum EShiftState Shift,
        long X,
        long Y );
    HRESULT OnPageChange ( );
    HRESULT OnResize ( );
    HRESULT OnScroll ( );
    HRESULT OnStartDrag ( );
    HRESULT OnUndoZoom ( );
    HRESULT OnZoom ( );
    HRESULT OnAllowScroll (
        enum EAxisType Axis,
        double * AMin,
        double * AMax,
        VARIANT_BOOL * AllowScroll );
    HRESULT OnGetLegendPos (
        long ItemIndex,
        long * X,
        long * Y,
        long * XColor );
    HRESULT OnGetLegendText (
        long LegendStyle,
        long ValueIndex,
        BSTR * LegendText );
    HRESULT OnDatabaseRecord (
        long SeriesIndex,
        long Index,
        VARIANT_BOOL * StopRetrieve );
    HRESULT OnTimer ( );
    HRESULT OnGetSeriesMark (
        long SeriesIndex,
        long ValueIndex,
        BSTR * MarkText );
    HRESULT OnGetSeriesPointerStyle (
        long SeriesIndex,
        long ValueIndex,
        enum EPointerStyle * AStyle );
    HRESULT OnGetSeriesContourLevel (
        long SeriesIndex,
        long LevelIndex,
        double * LevelValue,
        OLE_COLOR * LevelColor );
    HRESULT OnBeforeDrawChart ( );
    HRESULT OnSeriesBeforeDrawValues (
        long SeriesIndex );
    HRESULT OnSeriesAfterDrawValues (
        long SeriesIndex );
    HRESULT OnMarkTipToolGetText (
        long Tool,
        BSTR * Text );
    HRESULT OnCursorToolChange (
        long Tool,
        long X,
        long Y,
        double XVal,
        double YVal,
        long Series,
        long ValueIndex );
    HRESULT OnDrawLineToolLineDrag ( );
    HRESULT OnDrawLineToolNewLine ( );
    HRESULT OnDrawLineToolDraggedLine ( );
    HRESULT OnDrawLineToolSelectLine ( );
    HRESULT OnCalendarSeriesChange (
        long Series,
        double Value );
    HRESULT OnSeriesBeforeAdd (
        long SeriesIndex,
        VARIANT_BOOL * MoreValues );
};

struct __declspec(uuid("b6c10489-fb89-11d4-93c9-006008a7eed4"))
TChart;
    // [ default ] interface ITChart
    // [ default, source ] dispinterface ITChartEvents

struct __declspec(uuid("b6c1048d-fb89-11d4-93c9-006008a7eed4"))
IBrush : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum EBrushStyle Style;

    //
    // Wrapper methods for error-handling
    //

    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR Color );
    enum EBrushStyle GetStyle ( );
    void PutStyle (
        enum EBrushStyle Style );
    HRESULT LoadImage (
        _bstr_t FileName );
    HRESULT AssignImage (
        long ImageHandle );
    HRESULT ClearImage ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * Color ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR Color ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum EBrushStyle * Style ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum EBrushStyle Style ) = 0;
      virtual HRESULT __stdcall raw_LoadImage (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_AssignImage (
        /*[in]*/ long ImageHandle ) = 0;
      virtual HRESULT __stdcall raw_ClearImage ( ) = 0;
};

struct __declspec(uuid("b6c1048e-fb89-11d4-93c9-006008a7eed4"))
IStrings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetControlDefault,put=PutControlDefault))
    _variant_t ControlDefault[];
    __declspec(property(get=GetItem,put=PutItem))
    _variant_t Item[];

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetControlDefault (
        long Index );
    void PutControlDefault (
        long Index,
        const _variant_t & Value );
    long Count ( );
    _variant_t GetItem (
        long Index );
    void PutItem (
        long Index,
        const _variant_t & Value );
    HRESULT Remove (
        long Index );
    HRESULT Clear ( );
    long Add (
        const _variant_t & AItem );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ControlDefault (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall put_ControlDefault (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT Value ) = 0;
      virtual HRESULT __stdcall raw_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall put_Item (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT Value ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT AItem,
        /*[out,retval]*/ long * Item ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * _NewEnum ) = 0;
};

struct __declspec(uuid("b6c10497-fb89-11d4-93c9-006008a7eed4"))
IImport : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT LoadFromFile (
        _bstr_t FileName );
    HRESULT LoadFromURL (
        _bstr_t URL );
    HRESULT LoadFromStream (
        const _variant_t & AStream );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_LoadFromFile (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_LoadFromURL (
        /*[in]*/ BSTR URL ) = 0;
      virtual HRESULT __stdcall raw_LoadFromStream (
        /*[in]*/ VARIANT AStream ) = 0;
};

struct __declspec(uuid("b6c104a3-fb89-11d4-93c9-006008a7eed4"))
IScroll : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnable,put=PutEnable))
    enum EChartScroll Enable;
    __declspec(property(get=GetMouseButton,put=PutMouseButton))
    enum EMouseButton MouseButton;

    //
    // Wrapper methods for error-handling
    //

    enum EChartScroll GetEnable ( );
    void PutEnable (
        enum EChartScroll Enable );
    enum EMouseButton GetMouseButton ( );
    void PutMouseButton (
        enum EMouseButton Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Enable (
        /*[out,retval]*/ enum EChartScroll * Enable ) = 0;
      virtual HRESULT __stdcall put_Enable (
        /*[in]*/ enum EChartScroll Enable ) = 0;
      virtual HRESULT __stdcall get_MouseButton (
        /*[out,retval]*/ enum EMouseButton * Value ) = 0;
      virtual HRESULT __stdcall put_MouseButton (
        /*[in]*/ enum EMouseButton Value ) = 0;
};

struct __declspec(uuid("b6c104a5-fb89-11d4-93c9-006008a7eed4"))
IPrinter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum EPrinterOrientation Orientation;
    __declspec(property(get=GetMarginBottom,put=PutMarginBottom))
    long MarginBottom;
    __declspec(property(get=GetMarginLeft,put=PutMarginLeft))
    long MarginLeft;
    __declspec(property(get=GetMarginTop,put=PutMarginTop))
    long MarginTop;
    __declspec(property(get=GetMarginRight,put=PutMarginRight))
    long MarginRight;
    __declspec(property(get=GetPrinterIndex,put=PutPrinterIndex))
    long PrinterIndex;
    __declspec(property(get=GetPrinterCount))
    long PrinterCount;
    __declspec(property(get=GetPrinterDescription))
    _bstr_t PrinterDescription[];
    __declspec(property(get=GetPageHeight))
    long PageHeight;
    __declspec(property(get=GetPageWidth))
    long PageWidth;
    __declspec(property(get=GetJobTitle,put=PutJobTitle))
    _bstr_t JobTitle;
    __declspec(property(get=GetPrintProportional,put=PutPrintProportional))
    VARIANT_BOOL PrintProportional;
    __declspec(property(get=GetDetail,put=PutDetail))
    long Detail;

    //
    // Wrapper methods for error-handling
    //

    long GetDetail ( );
    void PutDetail (
        long Value );
    long GetMarginBottom ( );
    void PutMarginBottom (
        long Value );
    long GetMarginLeft ( );
    void PutMarginLeft (
        long Value );
    long GetMarginTop ( );
    void PutMarginTop (
        long Value );
    long GetMarginRight ( );
    void PutMarginRight (
        long Value );
    enum EPrinterOrientation GetOrientation ( );
    void PutOrientation (
        enum EPrinterOrientation Value );
    HRESULT Print ( );
    HRESULT PrintLandscape ( );
    HRESULT PrintPortrait ( );
    HRESULT ShowPreview ( );
    HRESULT PrintPartial (
        long Left,
        long Top,
        long Right,
        long Bottom );
    HRESULT BeginDoc ( );
    HRESULT EndDoc ( );
    long GetPrinterIndex ( );
    void PutPrinterIndex (
        long Value );
    long GetPrinterCount ( );
    _bstr_t GetPrinterDescription (
        long Index );
    HRESULT PrintChart ( );
    long GetPageHeight ( );
    long GetPageWidth ( );
    _bstr_t GetJobTitle ( );
    void PutJobTitle (
        _bstr_t Value );
    VARIANT_BOOL GetPrintProportional ( );
    void PutPrintProportional (
        VARIANT_BOOL Value );
    HRESULT PrintPartialHandle (
        const _variant_t & DC,
        long Left,
        long Top,
        long Right,
        long Bottom );
    HRESULT PrintPages (
        long FromPage,
        long ToPage );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Detail (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Detail (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_MarginBottom (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_MarginBottom (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_MarginLeft (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_MarginLeft (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_MarginTop (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_MarginTop (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_MarginRight (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_MarginRight (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum EPrinterOrientation * Value ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ enum EPrinterOrientation Value ) = 0;
      virtual HRESULT __stdcall raw_Print ( ) = 0;
      virtual HRESULT __stdcall raw_PrintLandscape ( ) = 0;
      virtual HRESULT __stdcall raw_PrintPortrait ( ) = 0;
      virtual HRESULT __stdcall raw_ShowPreview ( ) = 0;
      virtual HRESULT __stdcall raw_PrintPartial (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Right,
        /*[in]*/ long Bottom ) = 0;
      virtual HRESULT __stdcall raw_BeginDoc ( ) = 0;
      virtual HRESULT __stdcall raw_EndDoc ( ) = 0;
      virtual HRESULT __stdcall get_PrinterIndex (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_PrinterIndex (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_PrinterCount (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_PrinterDescription (
        /*[in]*/ long Index,
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall raw_PrintChart ( ) = 0;
      virtual HRESULT __stdcall get_PageHeight (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_PageWidth (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_JobTitle (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_JobTitle (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_PrintProportional (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_PrintProportional (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_PrintPartialHandle (
        /*[in]*/ VARIANT DC,
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Right,
        /*[in]*/ long Bottom ) = 0;
      virtual HRESULT __stdcall raw_PrintPages (
        /*[in]*/ long FromPage,
        /*[in]*/ long ToPage ) = 0;
};

struct __declspec(uuid("b6c104a9-fb89-11d4-93c9-006008a7eed4"))
IGradient : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDirection,put=PutDirection))
    enum EGradientDirection Direction;
    __declspec(property(get=GetStartColor,put=PutStartColor))
    OLE_COLOR StartColor;
    __declspec(property(get=GetEndColor,put=PutEndColor))
    OLE_COLOR EndColor;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetMidColor,put=PutMidColor))
    OLE_COLOR MidColor;

    //
    // Wrapper methods for error-handling
    //

    enum EGradientDirection GetDirection ( );
    void PutDirection (
        enum EGradientDirection Direction );
    OLE_COLOR GetStartColor ( );
    void PutStartColor (
        OLE_COLOR StartColor );
    OLE_COLOR GetEndColor ( );
    void PutEndColor (
        OLE_COLOR EndColor );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Visible );
    OLE_COLOR GetMidColor ( );
    void PutMidColor (
        OLE_COLOR Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ enum EGradientDirection * Direction ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ enum EGradientDirection Direction ) = 0;
      virtual HRESULT __stdcall get_StartColor (
        /*[out,retval]*/ OLE_COLOR * StartColor ) = 0;
      virtual HRESULT __stdcall put_StartColor (
        /*[in]*/ OLE_COLOR StartColor ) = 0;
      virtual HRESULT __stdcall get_EndColor (
        /*[out,retval]*/ OLE_COLOR * EndColor ) = 0;
      virtual HRESULT __stdcall put_EndColor (
        /*[in]*/ OLE_COLOR EndColor ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall get_MidColor (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_MidColor (
        /*[in]*/ OLE_COLOR Value ) = 0;
};

struct __declspec(uuid("b6c104aa-fb89-11d4-93c9-006008a7eed4"))
IPage : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetMaxPointsPerPage,put=PutMaxPointsPerPage))
    long MaxPointsPerPage;
    __declspec(property(get=GetCurrent,put=PutCurrent))
    long Current;
    __declspec(property(get=GetScaleLastPage,put=PutScaleLastPage))
    VARIANT_BOOL ScaleLastPage;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Next ( );
    HRESULT Previous ( );
    long GetMaxPointsPerPage ( );
    void PutMaxPointsPerPage (
        long MaxPointsPerPage );
    long GetCurrent ( );
    void PutCurrent (
        long Current );
    VARIANT_BOOL GetScaleLastPage ( );
    void PutScaleLastPage (
        VARIANT_BOOL ScaleLastPage );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Next ( ) = 0;
      virtual HRESULT __stdcall raw_Previous ( ) = 0;
      virtual HRESULT __stdcall get_MaxPointsPerPage (
        /*[out,retval]*/ long * MaxPointsPerPage ) = 0;
      virtual HRESULT __stdcall put_MaxPointsPerPage (
        /*[in]*/ long MaxPointsPerPage ) = 0;
      virtual HRESULT __stdcall get_Current (
        /*[out,retval]*/ long * Current ) = 0;
      virtual HRESULT __stdcall put_Current (
        /*[in]*/ long Current ) = 0;
      virtual HRESULT __stdcall get_ScaleLastPage (
        /*[out,retval]*/ VARIANT_BOOL * ScaleLastPage ) = 0;
      virtual HRESULT __stdcall put_ScaleLastPage (
        /*[in]*/ VARIANT_BOOL ScaleLastPage ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
};

struct __declspec(uuid("b6c104ab-fb89-11d4-93c9-006008a7eed4"))
IPanel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBackImageInside,put=PutBackImageInside))
    VARIANT_BOOL BackImageInside;
    __declspec(property(get=GetBackImageMode,put=PutBackImageMode))
    enum EBackImageMode BackImageMode;
    __declspec(property(get=GetBevelInner,put=PutBevelInner))
    enum EPanelBevel BevelInner;
    __declspec(property(get=GetBevelOuter,put=PutBevelOuter))
    enum EPanelBevel BevelOuter;
    __declspec(property(get=GetBevelWidth,put=PutBevelWidth))
    long BevelWidth;
    __declspec(property(get=GetBevelOffset,put=PutBevelOffset))
    long BevelOffset;
    __declspec(property(get=GetBorderStyle,put=PutBorderStyle))
    enum EBorderStyle BorderStyle;
    __declspec(property(get=GetGradient))
    IGradientPtr Gradient;
    __declspec(property(get=GetMarginLeft,put=PutMarginLeft))
    long MarginLeft;
    __declspec(property(get=GetMarginTop,put=PutMarginTop))
    long MarginTop;
    __declspec(property(get=GetMarginRight,put=PutMarginRight))
    long MarginRight;
    __declspec(property(get=GetMarginBottom,put=PutMarginBottom))
    long MarginBottom;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetBackImageInside ( );
    void PutBackImageInside (
        VARIANT_BOOL BackImageInside );
    enum EBackImageMode GetBackImageMode ( );
    void PutBackImageMode (
        enum EBackImageMode BackImageMode );
    enum EPanelBevel GetBevelInner ( );
    void PutBevelInner (
        enum EPanelBevel BevelInner );
    enum EPanelBevel GetBevelOuter ( );
    void PutBevelOuter (
        enum EPanelBevel BevelOuter );
    long GetBevelWidth ( );
    void PutBevelWidth (
        long BevelWidth );
    long GetBevelOffset ( );
    void PutBevelOffset (
        long BevelOffset );
    enum EBorderStyle GetBorderStyle ( );
    void PutBorderStyle (
        enum EBorderStyle BorderStyle );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR Color );
    IGradientPtr GetGradient ( );
    long GetMarginLeft ( );
    void PutMarginLeft (
        long MarginLeft );
    long GetMarginTop ( );
    void PutMarginTop (
        long MarginTop );
    long GetMarginRight ( );
    void PutMarginRight (
        long MarginRight );
    long GetMarginBottom ( );
    void PutMarginBottom (
        long MarginBottom );
    HRESULT BackImageClear ( );
    HRESULT BackImageLoad (
        _bstr_t FileName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BackImageInside (
        /*[out,retval]*/ VARIANT_BOOL * BackImageInside ) = 0;
      virtual HRESULT __stdcall put_BackImageInside (
        /*[in]*/ VARIANT_BOOL BackImageInside ) = 0;
      virtual HRESULT __stdcall get_BackImageMode (
        /*[out,retval]*/ enum EBackImageMode * BackImageMode ) = 0;
      virtual HRESULT __stdcall put_BackImageMode (
        /*[in]*/ enum EBackImageMode BackImageMode ) = 0;
      virtual HRESULT __stdcall get_BevelInner (
        /*[out,retval]*/ enum EPanelBevel * BevelInner ) = 0;
      virtual HRESULT __stdcall put_BevelInner (
        /*[in]*/ enum EPanelBevel BevelInner ) = 0;
      virtual HRESULT __stdcall get_BevelOuter (
        /*[out,retval]*/ enum EPanelBevel * BevelOuter ) = 0;
      virtual HRESULT __stdcall put_BevelOuter (
        /*[in]*/ enum EPanelBevel BevelOuter ) = 0;
      virtual HRESULT __stdcall get_BevelWidth (
        /*[out,retval]*/ long * BevelWidth ) = 0;
      virtual HRESULT __stdcall put_BevelWidth (
        /*[in]*/ long BevelWidth ) = 0;
      virtual HRESULT __stdcall get_BevelOffset (
        /*[out,retval]*/ long * BevelOffset ) = 0;
      virtual HRESULT __stdcall put_BevelOffset (
        /*[in]*/ long BevelOffset ) = 0;
      virtual HRESULT __stdcall get_BorderStyle (
        /*[out,retval]*/ enum EBorderStyle * BorderStyle ) = 0;
      virtual HRESULT __stdcall put_BorderStyle (
        /*[in]*/ enum EBorderStyle BorderStyle ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * Color ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR Color ) = 0;
      virtual HRESULT __stdcall get_Gradient (
        /*[out,retval]*/ struct IGradient * * Gradient ) = 0;
      virtual HRESULT __stdcall get_MarginLeft (
        /*[out,retval]*/ long * MarginLeft ) = 0;
      virtual HRESULT __stdcall put_MarginLeft (
        /*[in]*/ long MarginLeft ) = 0;
      virtual HRESULT __stdcall get_MarginTop (
        /*[out,retval]*/ long * MarginTop ) = 0;
      virtual HRESULT __stdcall put_MarginTop (
        /*[in]*/ long MarginTop ) = 0;
      virtual HRESULT __stdcall get_MarginRight (
        /*[out,retval]*/ long * MarginRight ) = 0;
      virtual HRESULT __stdcall put_MarginRight (
        /*[in]*/ long MarginRight ) = 0;
      virtual HRESULT __stdcall get_MarginBottom (
        /*[out,retval]*/ long * MarginBottom ) = 0;
      virtual HRESULT __stdcall put_MarginBottom (
        /*[in]*/ long MarginBottom ) = 0;
      virtual HRESULT __stdcall raw_BackImageClear ( ) = 0;
      virtual HRESULT __stdcall raw_BackImageLoad (
        /*[in]*/ BSTR FileName ) = 0;
};

struct __declspec(uuid("b6c104af-fb89-11d4-93c9-006008a7eed4"))
IValueList : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetDateTime,put=PutDateTime))
    VARIANT_BOOL DateTime;
    __declspec(property(get=GetFirst))
    double First;
    __declspec(property(get=GetLast))
    double Last;
    __declspec(property(get=GetMaximum))
    double Maximum;
    __declspec(property(get=GetMinimum))
    double Minimum;
    __declspec(property(get=GetOrder,put=PutOrder))
    enum EValueListOrder Order;
    __declspec(property(get=GetTotal))
    double Total;
    __declspec(property(get=GetTotalABS))
    double TotalABS;
    __declspec(property(get=GetValue,put=PutValue))
    double Value[];
    __declspec(property(get=GetValueSource,put=PutValueSource))
    _bstr_t ValueSource;
    __declspec(property(get=GetModified,put=PutModified))
    VARIANT_BOOL Modified;
    __declspec(property(get=GetTempValue,put=PutTempValue))
    double TempValue;
    __declspec(property(get=GetName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    VARIANT_BOOL GetDateTime ( );
    void PutDateTime (
        VARIANT_BOOL DateTime );
    double GetFirst ( );
    double GetLast ( );
    double GetMaximum ( );
    double GetMinimum ( );
    enum EValueListOrder GetOrder ( );
    void PutOrder (
        enum EValueListOrder Order );
    double GetTotal ( );
    double GetTotalABS ( );
    double GetValue (
        long Index );
    void PutValue (
        long Index,
        double Value );
    _bstr_t GetValueSource ( );
    void PutValueSource (
        _bstr_t ValueSource );
    HRESULT Delete (
        long Index );
    HRESULT FillSequence ( );
    long Locate (
        double SomeValue );
    HRESULT Sort ( );
    VARIANT_BOOL GetModified ( );
    void PutModified (
        VARIANT_BOOL Value );
    double GetTempValue ( );
    void PutTempValue (
        double Value );
    _bstr_t GetName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_DateTime (
        /*[out,retval]*/ VARIANT_BOOL * DateTime ) = 0;
      virtual HRESULT __stdcall put_DateTime (
        /*[in]*/ VARIANT_BOOL DateTime ) = 0;
      virtual HRESULT __stdcall get_First (
        /*[out,retval]*/ double * First ) = 0;
      virtual HRESULT __stdcall get_Last (
        /*[out,retval]*/ double * Last ) = 0;
      virtual HRESULT __stdcall get_Maximum (
        /*[out,retval]*/ double * Maximum ) = 0;
      virtual HRESULT __stdcall get_Minimum (
        /*[out,retval]*/ double * Minimum ) = 0;
      virtual HRESULT __stdcall get_Order (
        /*[out,retval]*/ enum EValueListOrder * Order ) = 0;
      virtual HRESULT __stdcall put_Order (
        /*[in]*/ enum EValueListOrder Order ) = 0;
      virtual HRESULT __stdcall get_Total (
        /*[out,retval]*/ double * Total ) = 0;
      virtual HRESULT __stdcall get_TotalABS (
        /*[out,retval]*/ double * TotalABS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long Index,
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_ValueSource (
        /*[out,retval]*/ BSTR * ValueSource ) = 0;
      virtual HRESULT __stdcall put_ValueSource (
        /*[in]*/ BSTR ValueSource ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_FillSequence ( ) = 0;
      virtual HRESULT __stdcall raw_Locate (
        /*[in]*/ double SomeValue,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_Sort ( ) = 0;
      virtual HRESULT __stdcall get_Modified (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Modified (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_TempValue (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_TempValue (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Value ) = 0;
};

struct __declspec(uuid("b6c104e1-fb89-11d4-93c9-006008a7eed4"))
IAddFunction : IDispatch
{};

struct __declspec(uuid("b6c104e2-fb89-11d4-93c9-006008a7eed4"))
ISubtractFunction : IDispatch
{};

struct __declspec(uuid("b6c104e3-fb89-11d4-93c9-006008a7eed4"))
IMultiplyFunction : IDispatch
{};

struct __declspec(uuid("b6c104e4-fb89-11d4-93c9-006008a7eed4"))
IDivideFunction : IDispatch
{};

struct __declspec(uuid("b6c104e5-fb89-11d4-93c9-006008a7eed4"))
IAverageFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIncludeNulls,put=PutIncludeNulls))
    VARIANT_BOOL IncludeNulls;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIncludeNulls ( );
    void PutIncludeNulls (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IncludeNulls (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_IncludeNulls (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("b6c104e6-fb89-11d4-93c9-006008a7eed4"))
IHighFunction : IDispatch
{};

struct __declspec(uuid("b6c104e7-fb89-11d4-93c9-006008a7eed4"))
ILowFunction : IDispatch
{};

struct __declspec(uuid("b6c104e8-fb89-11d4-93c9-006008a7eed4"))
ICurveFittingFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPolyDegree,put=PutPolyDegree))
    long PolyDegree;
    __declspec(property(get=GetTypeFitting,put=PutTypeFitting))
    enum ETypeFitting TypeFitting;
    __declspec(property(get=GetFirstPoint,put=PutFirstPoint))
    long FirstPoint;
    __declspec(property(get=GetLastPoint,put=PutLastPoint))
    long LastPoint;
    __declspec(property(get=GetFirstCalcPoint,put=PutFirstCalcPoint))
    long FirstCalcPoint;
    __declspec(property(get=GetLastCalcPoint,put=PutLastCalcPoint))
    long LastCalcPoint;
    __declspec(property(get=GetAnswerVector))
    double AnswerVector[];

    //
    // Wrapper methods for error-handling
    //

    long GetPolyDegree ( );
    void PutPolyDegree (
        long PolyDegree );
    enum ETypeFitting GetTypeFitting ( );
    void PutTypeFitting (
        enum ETypeFitting TypeFitting );
    long GetFirstPoint ( );
    void PutFirstPoint (
        long FirstPoint );
    long GetLastPoint ( );
    void PutLastPoint (
        long LastPoint );
    long GetFirstCalcPoint ( );
    void PutFirstCalcPoint (
        long FirstCalcPoint );
    long GetLastCalcPoint ( );
    void PutLastCalcPoint (
        long LastCalcPoint );
    double GetAnswerVector (
        long Index );
    double GetCurveYValue (
        double X );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PolyDegree (
        /*[out,retval]*/ long * PolyDegree ) = 0;
      virtual HRESULT __stdcall put_PolyDegree (
        /*[in]*/ long PolyDegree ) = 0;
      virtual HRESULT __stdcall get_TypeFitting (
        /*[out,retval]*/ enum ETypeFitting * TypeFitting ) = 0;
      virtual HRESULT __stdcall put_TypeFitting (
        /*[in]*/ enum ETypeFitting TypeFitting ) = 0;
      virtual HRESULT __stdcall get_FirstPoint (
        /*[out,retval]*/ long * FirstPoint ) = 0;
      virtual HRESULT __stdcall put_FirstPoint (
        /*[in]*/ long FirstPoint ) = 0;
      virtual HRESULT __stdcall get_LastPoint (
        /*[out,retval]*/ long * LastPoint ) = 0;
      virtual HRESULT __stdcall put_LastPoint (
        /*[in]*/ long LastPoint ) = 0;
      virtual HRESULT __stdcall get_FirstCalcPoint (
        /*[out,retval]*/ long * FirstCalcPoint ) = 0;
      virtual HRESULT __stdcall put_FirstCalcPoint (
        /*[in]*/ long FirstCalcPoint ) = 0;
      virtual HRESULT __stdcall get_LastCalcPoint (
        /*[out,retval]*/ long * LastCalcPoint ) = 0;
      virtual HRESULT __stdcall put_LastCalcPoint (
        /*[in]*/ long LastCalcPoint ) = 0;
      virtual HRESULT __stdcall get_AnswerVector (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_GetCurveYValue (
        /*[in]*/ double X,
        /*[out,retval]*/ double * Value ) = 0;
};

struct __declspec(uuid("b6c104e9-fb89-11d4-93c9-006008a7eed4"))
IExpAvgFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWeight,put=PutWeight))
    double Weight;

    //
    // Wrapper methods for error-handling
    //

    double GetWeight ( );
    void PutWeight (
        double Weight );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Weight (
        /*[out,retval]*/ double * Weight ) = 0;
      virtual HRESULT __stdcall put_Weight (
        /*[in]*/ double Weight ) = 0;
};

struct __declspec(uuid("b6c104ea-fb89-11d4-93c9-006008a7eed4"))
IMovingAvgFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWeighted,put=PutWeighted))
    VARIANT_BOOL Weighted;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetWeighted ( );
    void PutWeighted (
        VARIANT_BOOL Weighted );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Weighted (
        /*[out,retval]*/ VARIANT_BOOL * Weighted ) = 0;
      virtual HRESULT __stdcall put_Weighted (
        /*[in]*/ VARIANT_BOOL Weighted ) = 0;
};

struct __declspec(uuid("b6c104eb-fb89-11d4-93c9-006008a7eed4"))
IChartFont : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetSize,put=PutSize))
    long Size;
    __declspec(property(get=GetBold,put=PutBold))
    VARIANT_BOOL Bold;
    __declspec(property(get=GetItalic,put=PutItalic))
    VARIANT_BOOL Italic;
    __declspec(property(get=GetUnderline,put=PutUnderline))
    VARIANT_BOOL Underline;
    __declspec(property(get=GetStrikethrough,put=PutStrikethrough))
    VARIANT_BOOL Strikethrough;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetCharset,put=PutCharset))
    short Charset;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetPixelsPerInch))
    long PixelsPerInch;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    long GetSize ( );
    void PutSize (
        long Size );
    VARIANT_BOOL GetBold ( );
    void PutBold (
        VARIANT_BOOL Bold );
    VARIANT_BOOL GetItalic ( );
    void PutItalic (
        VARIANT_BOOL Italic );
    VARIANT_BOOL GetUnderline ( );
    void PutUnderline (
        VARIANT_BOOL Underline );
    VARIANT_BOOL GetStrikethrough ( );
    void PutStrikethrough (
        VARIANT_BOOL Strikethrough );
    short GetCharset ( );
    void PutCharset (
        short Charset );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR Value );
    long GetHeight ( );
    void PutHeight (
        long Value );
    long GetPixelsPerInch ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ long * Size ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ long Size ) = 0;
      virtual HRESULT __stdcall get_Bold (
        /*[out,retval]*/ VARIANT_BOOL * Bold ) = 0;
      virtual HRESULT __stdcall put_Bold (
        /*[in]*/ VARIANT_BOOL Bold ) = 0;
      virtual HRESULT __stdcall get_Italic (
        /*[out,retval]*/ VARIANT_BOOL * Italic ) = 0;
      virtual HRESULT __stdcall put_Italic (
        /*[in]*/ VARIANT_BOOL Italic ) = 0;
      virtual HRESULT __stdcall get_Underline (
        /*[out,retval]*/ VARIANT_BOOL * Underline ) = 0;
      virtual HRESULT __stdcall put_Underline (
        /*[in]*/ VARIANT_BOOL Underline ) = 0;
      virtual HRESULT __stdcall get_Strikethrough (
        /*[out,retval]*/ VARIANT_BOOL * Strikethrough ) = 0;
      virtual HRESULT __stdcall put_Strikethrough (
        /*[in]*/ VARIANT_BOOL Strikethrough ) = 0;
      virtual HRESULT __stdcall get_Charset (
        /*[out,retval]*/ short * Charset ) = 0;
      virtual HRESULT __stdcall put_Charset (
        /*[in]*/ short Charset ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_PixelsPerInch (
        /*[out,retval]*/ long * Value ) = 0;
};

struct __declspec(uuid("b6c104ec-fb89-11d4-93c9-006008a7eed4"))
IMomentumFunction : IDispatch
{};

enum __declspec(uuid("3b2b980f-fbbf-11d4-93ca-006008a7eed4"))
ECanvasBackMode
{
    cbmOpaque = 2,
    cbmTransparent = 1,
    cbmNone = 0
};

enum __declspec(uuid("3b2b9810-fbbf-11d4-93ca-006008a7eed4"))
ECanvasTextAlign
{
    ctaLeft = 0,
    ctaCenter = 1,
    ctaRight = 2
};

enum __declspec(uuid("3b2b9811-fbbf-11d4-93ca-006008a7eed4"))
EPieOtherStyle
{
    poNone = 0,
    poBelowPercent = 1,
    poBelowValue = 2
};

struct __declspec(uuid("b6c104ed-fb89-11d4-93c9-006008a7eed4"))
IPieOtherSlice : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStyle,put=PutStyle))
    enum EPieOtherStyle Style;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetValue,put=PutValue))
    double Value;

    //
    // Wrapper methods for error-handling
    //

    enum EPieOtherStyle GetStyle ( );
    void PutStyle (
        enum EPieOtherStyle Value );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t Value );
    double GetValue ( );
    void PutValue (
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum EPieOtherStyle * Value ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum EPieOtherStyle Value ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("b6c10501-fb89-11d4-93c9-006008a7eed4"))
IExplodedSlices : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    long Value[];

    //
    // Wrapper methods for error-handling
    //

    long GetValue (
        long Index );
    void PutValue (
        long Index,
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Value (
        /*[in]*/ long Index,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long Index,
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("b6c1050c-fb89-11d4-93c9-006008a7eed4"))
ICircleLabels : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetFont))
    IChartFontPtr Font;
    __declspec(property(get=GetRotated,put=PutRotated))
    VARIANT_BOOL Rotated;
    __declspec(property(get=GetDegreeSymbol,put=PutDegreeSymbol))
    _bstr_t DegreeSymbol;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Value );
    IChartFontPtr GetFont ( );
    VARIANT_BOOL GetRotated ( );
    void PutRotated (
        VARIANT_BOOL Value );
    _bstr_t GetDegreeSymbol ( );
    void PutDegreeSymbol (
        _bstr_t Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct IChartFont * * Value ) = 0;
      virtual HRESULT __stdcall get_Rotated (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Rotated (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_DegreeSymbol (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_DegreeSymbol (
        /*[in]*/ BSTR Value ) = 0;
};

enum __declspec(uuid("3b2b9812-fbbf-11d4-93ca-006008a7eed4"))
EErrorSeriesStyle
{
    essLeft = 0,
    essRight = 1,
    essLeftRight = 2,
    essTop = 3,
    essBottom = 4,
    essTopBottom = 5
};

enum __declspec(uuid("3b2b9813-fbbf-11d4-93ca-006008a7eed4"))
EFunctionPeriodAlign
{
    paFirst = 0,
    paCenter = 1,
    paLast = 2
};

enum __declspec(uuid("3b2b9814-fbbf-11d4-93ca-006008a7eed4"))
EFunctionPeriodStyle
{
    psNumPoints = 0,
    psRange = 1
};

struct __declspec(uuid("b6c1050d-fb89-11d4-93c9-006008a7eed4"))
ITrendFunction : IDispatch
{};

struct __declspec(uuid("b6c1050e-fb89-11d4-93c9-006008a7eed4"))
IStdDeviationFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetComplete,put=PutComplete))
    VARIANT_BOOL Complete;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetComplete ( );
    void PutComplete (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Complete (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Complete (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("b6c1050f-fb89-11d4-93c9-006008a7eed4"))
ICumulativeFunction : IDispatch
{};

struct __declspec(uuid("b6c10511-fb89-11d4-93c9-006008a7eed4"))
ICountFunction : IDispatch
{};

struct __declspec(uuid("b6c10512-fb89-11d4-93c9-006008a7eed4"))
IEnvironment : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIEPrintWithPage,put=PutIEPrintWithPage))
    VARIANT_BOOL IEPrintWithPage;
    __declspec(property(get=GetMouseWheelScroll,put=PutMouseWheelScroll))
    VARIANT_BOOL MouseWheelScroll;
    __declspec(property(get=GetDecimalSeparator))
    _bstr_t DecimalSeparator;
    __declspec(property(get=GetNoPromptDBConnect,put=PutNoPromptDBConnect))
    VARIANT_BOOL NoPromptDBConnect;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetNoPromptDBConnect ( );
    void PutNoPromptDBConnect (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetIEPrintWithPage ( );
    void PutIEPrintWithPage (
        VARIANT_BOOL Value );
    HRESULT InternalRepaint ( );
    VARIANT_BOOL GetMouseWheelScroll ( );
    void PutMouseWheelScroll (
        VARIANT_BOOL Value );
    _bstr_t GetDecimalSeparator ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NoPromptDBConnect (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_NoPromptDBConnect (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_IEPrintWithPage (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_IEPrintWithPage (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_InternalRepaint ( ) = 0;
      virtual HRESULT __stdcall get_MouseWheelScroll (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_MouseWheelScroll (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_DecimalSeparator (
        /*[out,retval]*/ BSTR * Value ) = 0;
};

struct __declspec(uuid("b6c10529-fb89-11d4-93c9-006008a7eed4"))
ITeeCommanderEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT OnEditedChart ( );
};

struct __declspec(uuid("b6c1052c-fb89-11d4-93c9-006008a7eed4"))
ITeeListBoxEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT OnDblClickSeries (
        long SeriesIndex );
};

struct __declspec(uuid("b6c1052d-fb89-11d4-93c9-006008a7eed4"))
TeeListBox;
    // [ default ] interface ITeeListBox
    // [ default, source ] dispinterface ITeeListBoxEvents

struct __declspec(uuid("b6c10530-fb89-11d4-93c9-006008a7eed4"))
TeeEditor;
    // [ default ] interface ITeeEditor

struct __declspec(uuid("b6c10531-fb89-11d4-93c9-006008a7eed4"))
TeePreviewer;
    // [ default ] interface ITeePreviewer

struct __declspec(uuid("b6c10532-fb89-11d4-93c9-006008a7eed4"))
TeeCommander;
    // [ default ] interface ITeeCommander
    // [ default, source ] dispinterface ITeeCommanderEvents

enum __declspec(uuid("3b2b9815-fbbf-11d4-93ca-006008a7eed4"))
ETeeEditorPage
{
    epMain = 0,
    epGeneral = 1,
    epAxis = 2,
    epTitles = 3,
    epLegend = 4,
    epPanel = 5,
    epPaging = 6,
    epWalls = 7,
    epAspect = 8,
    epSeriesGeneral = 9,
    epSeriesMarks = 10,
    epAllSeries = 11,
    epSeriesData = 12,
    epExport = 13,
    epTools = 14,
    epPrintPreview = 15,
    epOpenGL = 16
};

struct __declspec(uuid("b6c10533-fb89-11d4-93c9-006008a7eed4"))
ITeePoint2D : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    void PutX (
        double Value );
    double GetY ( );
    void PutY (
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("b6c1050a-fb89-11d4-93c9-006008a7eed4"))
ISeriesMarkPosition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetArrowFrom))
    ITeePoint2DPtr ArrowFrom;
    __declspec(property(get=GetArrowTo))
    ITeePoint2DPtr ArrowTo;
    __declspec(property(get=GetCustom,put=PutCustom))
    VARIANT_BOOL Custom;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetLeftTop))
    ITeePoint2DPtr LeftTop;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;

    //
    // Wrapper methods for error-handling
    //

    ITeePoint2DPtr GetArrowFrom ( );
    ITeePoint2DPtr GetArrowTo ( );
    VARIANT_BOOL GetCustom ( );
    void PutCustom (
        VARIANT_BOOL Value );
    long GetHeight ( );
    void PutHeight (
        long Value );
    ITeePoint2DPtr GetLeftTop ( );
    long GetWidth ( );
    void PutWidth (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ArrowFrom (
        /*[out,retval]*/ struct ITeePoint2D * * Value ) = 0;
      virtual HRESULT __stdcall get_ArrowTo (
        /*[out,retval]*/ struct ITeePoint2D * * Value ) = 0;
      virtual HRESULT __stdcall get_Custom (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Custom (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_LeftTop (
        /*[out,retval]*/ struct ITeePoint2D * * Value ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("b6c10509-fb89-11d4-93c9-006008a7eed4"))
ISeriesMarksPositions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPosition))
    ISeriesMarkPositionPtr Position[];

    //
    // Wrapper methods for error-handling
    //

    ISeriesMarkPositionPtr GetPosition (
        long Index );
    HRESULT Automatic (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Position (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ISeriesMarkPosition * * Value ) = 0;
      virtual HRESULT __stdcall raw_Automatic (
        /*[in]*/ long Index ) = 0;
};

struct __declspec(uuid("b6c10534-fb89-11d4-93c9-006008a7eed4"))
ITeePoint3D : ITeePoint2D
{
    //
    // Property data
    //

    __declspec(property(get=GetZ,put=PutZ))
    double Z;

    //
    // Wrapper methods for error-handling
    //

    double GetZ ( );
    void PutZ (
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Z (
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("b6c10535-fb89-11d4-93c9-006008a7eed4"))
ITeeEditorShowPages : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMain,put=PutMain))
    VARIANT_BOOL Main;
    __declspec(property(get=GetGeneral,put=PutGeneral))
    VARIANT_BOOL General;
    __declspec(property(get=GetAxis,put=PutAxis))
    VARIANT_BOOL Axis;
    __declspec(property(get=GetTitles,put=PutTitles))
    VARIANT_BOOL Titles;
    __declspec(property(get=GetLegend,put=PutLegend))
    VARIANT_BOOL Legend;
    __declspec(property(get=GetPanel,put=PutPanel))
    VARIANT_BOOL Panel;
    __declspec(property(get=GetPaging,put=PutPaging))
    VARIANT_BOOL Paging;
    __declspec(property(get=GetWalls,put=PutWalls))
    VARIANT_BOOL Walls;
    __declspec(property(get=GetAspect,put=PutAspect))
    VARIANT_BOOL Aspect;
    __declspec(property(get=GetSeriesGeneral,put=PutSeriesGeneral))
    VARIANT_BOOL SeriesGeneral;
    __declspec(property(get=GetSeriesMarks,put=PutSeriesMarks))
    VARIANT_BOOL SeriesMarks;
    __declspec(property(get=GetTools,put=PutTools))
    VARIANT_BOOL Tools;
    __declspec(property(get=GetSeriesData,put=PutSeriesData))
    VARIANT_BOOL SeriesData;
    __declspec(property(get=GetExportDialog,put=PutExportDialog))
    VARIANT_BOOL ExportDialog;
    __declspec(property(get=GetPrintPreview,put=PutPrintPreview))
    VARIANT_BOOL PrintPreview;
    __declspec(property(get=GetOpenGL,put=PutOpenGL))
    VARIANT_BOOL OpenGL;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetMain ( );
    void PutMain (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetGeneral ( );
    void PutGeneral (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetAxis ( );
    void PutAxis (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetTitles ( );
    void PutTitles (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetLegend ( );
    void PutLegend (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetPanel ( );
    void PutPanel (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetPaging ( );
    void PutPaging (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetWalls ( );
    void PutWalls (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetAspect ( );
    void PutAspect (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetSeriesGeneral ( );
    void PutSeriesGeneral (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetSeriesMarks ( );
    void PutSeriesMarks (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetTools ( );
    void PutTools (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetSeriesData ( );
    void PutSeriesData (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetExportDialog ( );
    void PutExportDialog (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetPrintPreview ( );
    void PutPrintPreview (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetOpenGL ( );
    void PutOpenGL (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Main (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Main (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_General (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_General (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Axis (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Axis (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Titles (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Titles (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Legend (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Legend (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Panel (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Panel (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Paging (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Paging (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Walls (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Walls (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Aspect (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Aspect (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_SeriesGeneral (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_SeriesGeneral (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_SeriesMarks (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_SeriesMarks (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Tools (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Tools (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_SeriesData (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_SeriesData (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ExportDialog (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ExportDialog (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_PrintPreview (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_PrintPreview (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_OpenGL (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_OpenGL (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("b6c10536-fb89-11d4-93c9-006008a7eed4"))
ITeeEditorOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAdd,put=PutAdd))
    VARIANT_BOOL Add;
    __declspec(property(get=GetDelete,put=PutDelete))
    VARIANT_BOOL Delete;
    __declspec(property(get=GetChange,put=PutChange))
    VARIANT_BOOL Change;
    __declspec(property(get=GetClone,put=PutClone))
    VARIANT_BOOL Clone;
    __declspec(property(get=GetDataSource,put=PutDataSource))
    VARIANT_BOOL DataSource;
    __declspec(property(get=GetTitle,put=PutTitle))
    VARIANT_BOOL Title;
    __declspec(property(get=GetHelp,put=PutHelp))
    VARIANT_BOOL Help;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAdd ( );
    void PutAdd (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetDelete ( );
    void PutDelete (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetChange ( );
    void PutChange (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetClone ( );
    void PutClone (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetDataSource ( );
    void PutDataSource (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetTitle ( );
    void PutTitle (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetHelp ( );
    void PutHelp (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Add (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Add (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Delete (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Delete (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Change (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Change (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Clone (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Clone (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_DataSource (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_DataSource (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Title (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Help (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Help (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("b6c10537-fb89-11d4-93c9-006008a7eed4"))
ITeePreviewerOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetChangePrinter,put=PutChangePrinter))
    VARIANT_BOOL ChangePrinter;
    __declspec(property(get=GetSetupPrinter,put=PutSetupPrinter))
    VARIANT_BOOL SetupPrinter;
    __declspec(property(get=GetResizeImage,put=PutResizeImage))
    VARIANT_BOOL ResizeImage;
    __declspec(property(get=GetMoveImage,put=PutMoveImage))
    VARIANT_BOOL MoveImage;
    __declspec(property(get=GetChangeDetail,put=PutChangeDetail))
    VARIANT_BOOL ChangeDetail;
    __declspec(property(get=GetChangePaperOrientation,put=PutChangePaperOrientation))
    VARIANT_BOOL ChangePaperOrientation;
    __declspec(property(get=GetChangeMargins,put=PutChangeMargins))
    VARIANT_BOOL ChangeMargins;
    __declspec(property(get=GetDragImage,put=PutDragImage))
    VARIANT_BOOL DragImage;
    __declspec(property(get=GetPrintPanel,put=PutPrintPanel))
    VARIANT_BOOL PrintPanel;
    __declspec(property(get=GetAsBitmap,put=PutAsBitmap))
    VARIANT_BOOL AsBitmap;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetChangePrinter ( );
    void PutChangePrinter (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetSetupPrinter ( );
    void PutSetupPrinter (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetResizeImage ( );
    void PutResizeImage (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetMoveImage ( );
    void PutMoveImage (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetChangeDetail ( );
    void PutChangeDetail (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetChangePaperOrientation ( );
    void PutChangePaperOrientation (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetChangeMargins ( );
    void PutChangeMargins (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetDragImage ( );
    void PutDragImage (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetPrintPanel ( );
    void PutPrintPanel (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetAsBitmap ( );
    void PutAsBitmap (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ChangePrinter (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ChangePrinter (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_SetupPrinter (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_SetupPrinter (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ResizeImage (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ResizeImage (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_MoveImage (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_MoveImage (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ChangeDetail (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ChangeDetail (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ChangePaperOrientation (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ChangePaperOrientation (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ChangeMargins (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ChangeMargins (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_DragImage (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_DragImage (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_PrintPanel (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_PrintPanel (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_AsBitmap (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AsBitmap (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("b6c10538-fb89-11d4-93c9-006008a7eed4"))
ITeeOpenGL : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAmbientLight,put=PutAmbientLight))
    long AmbientLight;
    __declspec(property(get=GetLightPosition))
    ITeePoint3DPtr LightPosition;
    __declspec(property(get=GetActive,put=PutActive))
    VARIANT_BOOL Active;
    __declspec(property(get=GetLightColor,put=PutLightColor))
    OLE_COLOR LightColor;
    __declspec(property(get=GetFontOutlines,put=PutFontOutlines))
    VARIANT_BOOL FontOutlines;
    __declspec(property(get=GetShadeQuality,put=PutShadeQuality))
    VARIANT_BOOL ShadeQuality;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetActive ( );
    void PutActive (
        VARIANT_BOOL Value );
    long GetAmbientLight ( );
    void PutAmbientLight (
        long Value );
    ITeePoint3DPtr GetLightPosition ( );
    OLE_COLOR GetLightColor ( );
    void PutLightColor (
        OLE_COLOR Value );
    VARIANT_BOOL GetFontOutlines ( );
    void PutFontOutlines (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetShadeQuality ( );
    void PutShadeQuality (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Active (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_AmbientLight (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_AmbientLight (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_LightPosition (
        /*[out,retval]*/ struct ITeePoint3D * * Value ) = 0;
      virtual HRESULT __stdcall get_LightColor (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_LightColor (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_FontOutlines (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_FontOutlines (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ShadeQuality (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ShadeQuality (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("b6c10490-fb89-11d4-93c9-006008a7eed4"))
IAspect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRotation,put=PutRotation))
    long Rotation;
    __declspec(property(get=GetElevation,put=PutElevation))
    long Elevation;
    __declspec(property(get=GetZoomText,put=PutZoomText))
    VARIANT_BOOL ZoomText;
    __declspec(property(get=GetZoom,put=PutZoom))
    long Zoom;
    __declspec(property(get=GetOpenGL))
    ITeeOpenGLPtr OpenGL;
    __declspec(property(get=GetHorizOffset,put=PutHorizOffset))
    long HorizOffset;
    __declspec(property(get=GetVertOffset,put=PutVertOffset))
    long VertOffset;
    __declspec(property(get=GetTilt,put=PutTilt))
    long Tilt;
    __declspec(property(get=GetChart3DPercent,put=PutChart3DPercent))
    long Chart3DPercent;
    __declspec(property(get=GetOrthogonal,put=PutOrthogonal))
    VARIANT_BOOL Orthogonal;
    __declspec(property(get=GetPerspective,put=PutPerspective))
    long Perspective;
    __declspec(property(get=GetOrthoAngle,put=PutOrthoAngle))
    long OrthoAngle;
    __declspec(property(get=GetApplyZOrder,put=PutApplyZOrder))
    VARIANT_BOOL ApplyZOrder;
    __declspec(property(get=GetWidth3D))
    long Width3D;
    __declspec(property(get=GetHeight3D))
    long Height3D;
    __declspec(property(get=GetView3D,put=PutView3D))
    VARIANT_BOOL View3D;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetApplyZOrder ( );
    void PutApplyZOrder (
        VARIANT_BOOL ApplyZOrder );
    long GetChart3DPercent ( );
    void PutChart3DPercent (
        long Chart3DPercent );
    long GetHeight3D ( );
    VARIANT_BOOL GetView3D ( );
    void PutView3D (
        VARIANT_BOOL View3D );
    long GetWidth3D ( );
    long GetRotation ( );
    void PutRotation (
        long RotationX );
    long GetElevation ( );
    void PutElevation (
        long RotationY );
    long GetZoom ( );
    void PutZoom (
        long Zoom );
    VARIANT_BOOL GetZoomText ( );
    void PutZoomText (
        VARIANT_BOOL Value );
    long GetHorizOffset ( );
    void PutHorizOffset (
        long Value );
    long GetVertOffset ( );
    void PutVertOffset (
        long Value );
    long GetTilt ( );
    void PutTilt (
        long Value );
    VARIANT_BOOL GetOrthogonal ( );
    void PutOrthogonal (
        VARIANT_BOOL Value );
    long GetPerspective ( );
    void PutPerspective (
        long Value );
    ITeeOpenGLPtr GetOpenGL ( );
    long GetOrthoAngle ( );
    void PutOrthoAngle (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ApplyZOrder (
        /*[out,retval]*/ VARIANT_BOOL * ApplyZOrder ) = 0;
      virtual HRESULT __stdcall put_ApplyZOrder (
        /*[in]*/ VARIANT_BOOL ApplyZOrder ) = 0;
      virtual HRESULT __stdcall get_Chart3DPercent (
        /*[out,retval]*/ long * Chart3DPercent ) = 0;
      virtual HRESULT __stdcall put_Chart3DPercent (
        /*[in]*/ long Chart3DPercent ) = 0;
      virtual HRESULT __stdcall get_Height3D (
        /*[out,retval]*/ long * Height3D ) = 0;
      virtual HRESULT __stdcall get_View3D (
        /*[out,retval]*/ VARIANT_BOOL * View3D ) = 0;
      virtual HRESULT __stdcall put_View3D (
        /*[in]*/ VARIANT_BOOL View3D ) = 0;
      virtual HRESULT __stdcall get_Width3D (
        /*[out,retval]*/ long * Width3D ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ long * RotationX ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ long RotationX ) = 0;
      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ long * RotationY ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ long RotationY ) = 0;
      virtual HRESULT __stdcall get_Zoom (
        /*[out,retval]*/ long * Zoom ) = 0;
      virtual HRESULT __stdcall put_Zoom (
        /*[in]*/ long Zoom ) = 0;
      virtual HRESULT __stdcall get_ZoomText (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ZoomText (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_HorizOffset (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_HorizOffset (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_VertOffset (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_VertOffset (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Tilt (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Tilt (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Orthogonal (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Orthogonal (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Perspective (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Perspective (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_OpenGL (
        /*[out,retval]*/ struct ITeeOpenGL * * Value ) = 0;
      virtual HRESULT __stdcall get_OrthoAngle (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_OrthoAngle (
        /*[in]*/ long Value ) = 0;
};

enum __declspec(uuid("3b2b9816-fbbf-11d4-93ca-006008a7eed4"))
EStreamType
{
    stJpeg = 0,
    stTeeTemplate = 1
};

struct __declspec(uuid("62dd8655-f041-11d4-93b1-006008a7eed4"))
ICustomToolSeries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSeries,put=PutSeries))
    _variant_t Series;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetSeries ( );
    void PutSeries (
        const _variant_t & Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Series (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall put_Series (
        /*[in]*/ VARIANT Value ) = 0;
};

enum __declspec(uuid("054d2794-0b03-4879-80d6-e6708be79b14"))
ECursorToolStyle
{
    cssHorizontal = 0,
    cssVertical = 1,
    cssBoth = 2
};

struct __declspec(uuid("9ce4e780-4431-4504-948a-797d83c1e310"))
IDragMarksTool : ICustomToolSeries
{};

struct __declspec(uuid("11f8e071-f114-11d4-93b3-006008a7eed4"))
ICustomToolAxis : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAxis,put=PutAxis))
    _variant_t Axis;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetAxis ( );
    void PutAxis (
        const _variant_t & Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Axis (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall put_Axis (
        /*[in]*/ VARIANT Value ) = 0;
};

struct __declspec(uuid("97763cec-4d57-4612-a799-05c6e19ac789"))
IRotateTool : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetActive,put=PutActive))
    VARIANT_BOOL Active;
    __declspec(property(get=GetButton,put=PutButton))
    enum EMouseButton Button;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetActive ( );
    void PutActive (
        VARIANT_BOOL Value );
    enum EMouseButton GetButton ( );
    void PutButton (
        enum EMouseButton Value );
    _bstr_t Description ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Active (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Button (
        /*[out,retval]*/ enum EMouseButton * Value ) = 0;
      virtual HRESULT __stdcall put_Button (
        /*[in]*/ enum EMouseButton Value ) = 0;
      virtual HRESULT __stdcall raw_Description (
        /*[out,retval]*/ BSTR * Value ) = 0;
};

enum __declspec(uuid("499a9ab7-0c46-4b9c-bfe7-ec3347471066"))
EAxisArrowToolPosition
{
    aaStart = 0,
    aaEnd = 1,
    aaBoth = 2
};

enum __declspec(uuid("7a4e5b6e-adfc-4795-8f12-94b006ce7e48"))
ENearestToolStyle
{
    hsNone = 0,
    hsCircle = 1,
    hsRectangle = 2,
    hsDiamond = 3
};

enum __declspec(uuid("5a8b401f-3ad3-417d-8dd0-e06ceaec8b57"))
EChartObjectShapeStyle
{
    fosRectangle = 0,
    fosRoundRectangle = 1
};

enum __declspec(uuid("9edf27f6-10f1-42d1-84aa-71ff136d2dba"))
EToolClass
{
    tcCursor = 0,
    tcDragMarks = 1,
    tcAxisArrow = 2,
    tcDrawLine = 3,
    tcNearest = 4,
    tcColorband = 5,
    tcColorLine = 6,
    tcRotate = 7,
    tcMarksTip = 8,
    tcChartImage = 9,
    tcAnnotate = 10,
    tcPageNumber = 11
};

enum __declspec(uuid("4e43f7d6-8f5b-469c-9465-bf79693084b1"))
ELegendSymbolPosition
{
    spLeft = 0,
    spRight = 1
};

enum __declspec(uuid("a2465c64-83e3-4664-a015-f275b1eff1f8"))
ELegendSymbolSize
{
    lcsPercent = 0,
    lcsPixels = 1
};

struct __declspec(uuid("cc476b13-71ac-463f-85e4-0aa8dd8b8bde"))
ILegendSymbol : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetContinuous,put=PutContinuous))
    VARIANT_BOOL Continuous;
    __declspec(property(get=GetPosition,put=PutPosition))
    enum ELegendSymbolPosition Position;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetWidthUnits,put=PutWidthUnits))
    enum ELegendSymbolSize WidthUnits;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetContinuous ( );
    void PutContinuous (
        VARIANT_BOOL Value );
    enum ELegendSymbolPosition GetPosition ( );
    void PutPosition (
        enum ELegendSymbolPosition Value );
    long GetWidth ( );
    void PutWidth (
        long Value );
    enum ELegendSymbolSize GetWidthUnits ( );
    void PutWidthUnits (
        enum ELegendSymbolSize Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Continuous (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Continuous (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ enum ELegendSymbolPosition * Value ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ enum ELegendSymbolPosition Value ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_WidthUnits (
        /*[out,retval]*/ enum ELegendSymbolSize * Value ) = 0;
      virtual HRESULT __stdcall put_WidthUnits (
        /*[in]*/ enum ELegendSymbolSize Value ) = 0;
};

struct __declspec(uuid("5101d067-ad02-426b-832e-a898af6e4f5e"))
ITeeShadow : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHorizSize,put=PutHorizSize))
    long HorizSize;
    __declspec(property(get=GetVertSize,put=PutVertSize))
    long VertSize;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;

    //
    // Wrapper methods for error-handling
    //

    long GetHorizSize ( );
    void PutHorizSize (
        long Value );
    long GetVertSize ( );
    void PutVertSize (
        long Value );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_HorizSize (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_HorizSize (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_VertSize (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_VertSize (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR Value ) = 0;
};

struct __declspec(uuid("3b2b9819-fbbf-11d4-93ca-006008a7eed4"))
ITeeFont : IChartFont
{
    //
    // Property data
    //

    __declspec(property(get=GetInterCharSize,put=PutInterCharSize))
    long InterCharSize;
    __declspec(property(get=GetShadow))
    ITeeShadowPtr Shadow;

    //
    // Wrapper methods for error-handling
    //

    long GetInterCharSize ( );
    void PutInterCharSize (
        long Value );
    ITeeShadowPtr GetShadow ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InterCharSize (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_InterCharSize (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ struct ITeeShadow * * Value ) = 0;
};

struct __declspec(uuid("b6c10494-fb89-11d4-93c9-006008a7eed4"))
IAxisTitle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAngle,put=PutAngle))
    long Angle;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetFont))
    ITeeFontPtr Font;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;

    //
    // Wrapper methods for error-handling
    //

    long GetAngle ( );
    void PutAngle (
        long Angle );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t Caption );
    ITeeFontPtr GetFont ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ long * Angle ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ long Angle ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * Caption ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR Caption ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct ITeeFont * * Font ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

enum __declspec(uuid("94763168-1618-48c8-8857-8743060507af"))
ETeeZoomDirection
{
    tzdHorizontal = 0,
    tzdVertical = 1,
    tzdBoth = 2
};

struct __declspec(uuid("26f54550-bcb7-4cae-b817-0d681fef07f7"))
ITeePreviewPanelEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT OnChangeMargins (
        VARIANT_BOOL DisableProportional,
        long Left,
        long Top,
        long Right,
        long Bottom );
};

struct __declspec(uuid("1fdb3feb-a12b-4a8f-9ba7-cc342949d9af"))
TeePreviewPanel;
    // [ default ] interface ITeePreviewPanel
    // [ default, source ] dispinterface ITeePreviewPanelEvents

enum __declspec(uuid("a01c725e-37f8-467d-961a-d7ac120381d9"))
ETeePreviewPanelOrientation
{
    ppoDefault = 0,
    ppoPortrait = 1,
    ppoLandscape = 2
};

struct __declspec(uuid("74687f85-2744-11d5-9411-006008a7eed4"))
IChartGridEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT OnClick ( );
};

struct __declspec(uuid("a92b03a8-d509-4d2f-a953-b26ed8498ab0"))
ChartGridNavigator;
    // [ default ] interface IChartGridNavigator

struct __declspec(uuid("c4bb55c5-9f2c-4b46-86f3-f3bb52a83b4e"))
ChartPageNavigator;
    // [ default ] interface IChartPageNavigator

struct __declspec(uuid("2c37b0ad-0ff7-4e18-bf8a-b43469a2c414"))
ChartEditorPanel;
    // [ default ] interface IChartEditorPanel

enum __declspec(uuid("bad4c5c8-91ba-4d00-b2cd-e10841951ca5"))
ERSIStyle
{
    rsiOpenClose = 0,
    rsiClose = 1
};

struct __declspec(uuid("b6c10510-fb89-11d4-93c9-006008a7eed4"))
IRSIFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStyle,put=PutStyle))
    enum ERSIStyle Style;

    //
    // Wrapper methods for error-handling
    //

    enum ERSIStyle GetStyle ( );
    void PutStyle (
        enum ERSIStyle Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum ERSIStyle * Value ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum ERSIStyle Value ) = 0;
};

enum __declspec(uuid("f3588ac4-8ebe-4ed8-9f98-a7411b88ddfd"))
ECustomSeriesStack
{
    cssNone = 0,
    cssOverlap = 1,
    cssStack = 2,
    cssStack100 = 3
};

enum __declspec(uuid("a17b07b0-4d75-413d-a621-5c10afed9f74"))
ETeeVertAlign
{
    vaTop = 0,
    vaCenter = 1,
    vaBottom = 2
};

enum __declspec(uuid("6b2467b8-1132-4543-862f-a54b1b55322b"))
EAxisLabelAlign
{
    alDefault = 0,
    alOpposite = 1
};

struct __declspec(uuid("b6c10493-fb89-11d4-93c9-006008a7eed4"))
IAxisLabels : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMultiline,put=PutMultiline))
    VARIANT_BOOL Multiline;
    __declspec(property(get=GetExponent,put=PutExponent))
    VARIANT_BOOL Exponent;
    __declspec(property(get=GetAlign,put=PutAlign))
    enum EAxisLabelAlign Align;
    __declspec(property(get=GetValueFormat,put=PutValueFormat))
    _bstr_t ValueFormat;
    __declspec(property(get=GetDateTimeFormat,put=PutDateTimeFormat))
    _bstr_t DateTimeFormat;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAngle,put=PutAngle))
    long Angle;
    __declspec(property(get=GetFont))
    ITeeFontPtr Font;
    __declspec(property(get=GetOnAxis,put=PutOnAxis))
    VARIANT_BOOL OnAxis;
    __declspec(property(get=GetSeparation,put=PutSeparation))
    long Separation;
    __declspec(property(get=GetSize,put=PutSize))
    long Size;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum EAxisLabelStyle Style;
    __declspec(property(get=GetRoundFirstLabel,put=PutRoundFirstLabel))
    VARIANT_BOOL RoundFirstLabel;

    //
    // Wrapper methods for error-handling
    //

    long GetAngle ( );
    void PutAngle (
        long Angle );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Visible );
    _bstr_t GetDateTimeFormat ( );
    void PutDateTimeFormat (
        _bstr_t DateTimeFormat );
    ITeeFontPtr GetFont ( );
    _bstr_t FormattedValue (
        double SomeValue );
    long GetPos ( );
    long Height (
        double SomeValue );
    long MaxWidth ( );
    VARIANT_BOOL GetOnAxis ( );
    void PutOnAxis (
        VARIANT_BOOL OnAxis );
    VARIANT_BOOL GetRoundFirstLabel ( );
    void PutRoundFirstLabel (
        VARIANT_BOOL RoundFirstLabel );
    long GetSeparation ( );
    void PutSeparation (
        long Separation );
    long GetSize ( );
    void PutSize (
        long Size );
    enum EAxisLabelStyle GetStyle ( );
    void PutStyle (
        enum EAxisLabelStyle Style );
    _bstr_t GetValueFormat ( );
    void PutValueFormat (
        _bstr_t ValueFormat );
    long Width (
        double SomeValue );
    VARIANT_BOOL GetMultiline ( );
    void PutMultiline (
        VARIANT_BOOL Value );
    HRESULT TeeSplitInLines (
        BSTR * St,
        _bstr_t Separator );
    VARIANT_BOOL GetExponent ( );
    void PutExponent (
        VARIANT_BOOL Value );
    enum EAxisLabelAlign GetAlign ( );
    void PutAlign (
        enum EAxisLabelAlign Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ long * Angle ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ long Angle ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall get_DateTimeFormat (
        /*[out,retval]*/ BSTR * DateTimeFormat ) = 0;
      virtual HRESULT __stdcall put_DateTimeFormat (
        /*[in]*/ BSTR DateTimeFormat ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct ITeeFont * * Font ) = 0;
      virtual HRESULT __stdcall raw_FormattedValue (
        /*[in]*/ double SomeValue,
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall raw_GetPos (
        /*[out,retval]*/ long * GetPos ) = 0;
      virtual HRESULT __stdcall raw_Height (
        /*[in]*/ double SomeValue,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_MaxWidth (
        /*[out,retval]*/ long * MaxWidth ) = 0;
      virtual HRESULT __stdcall get_OnAxis (
        /*[out,retval]*/ VARIANT_BOOL * OnAxis ) = 0;
      virtual HRESULT __stdcall put_OnAxis (
        /*[in]*/ VARIANT_BOOL OnAxis ) = 0;
      virtual HRESULT __stdcall get_RoundFirstLabel (
        /*[out,retval]*/ VARIANT_BOOL * RoundFirstLabel ) = 0;
      virtual HRESULT __stdcall put_RoundFirstLabel (
        /*[in]*/ VARIANT_BOOL RoundFirstLabel ) = 0;
      virtual HRESULT __stdcall get_Separation (
        /*[out,retval]*/ long * Separation ) = 0;
      virtual HRESULT __stdcall put_Separation (
        /*[in]*/ long Separation ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ long * Size ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ long Size ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum EAxisLabelStyle * Style ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum EAxisLabelStyle Style ) = 0;
      virtual HRESULT __stdcall get_ValueFormat (
        /*[out,retval]*/ BSTR * ValueFormat ) = 0;
      virtual HRESULT __stdcall put_ValueFormat (
        /*[in]*/ BSTR ValueFormat ) = 0;
      virtual HRESULT __stdcall raw_Width (
        /*[in]*/ double SomeValue,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Multiline (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Multiline (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_TeeSplitInLines (
        /*[in,out]*/ BSTR * St,
        /*[in]*/ BSTR Separator ) = 0;
      virtual HRESULT __stdcall get_Exponent (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Exponent (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Align (
        /*[out,retval]*/ enum EAxisLabelAlign * Value ) = 0;
      virtual HRESULT __stdcall put_Align (
        /*[in]*/ enum EAxisLabelAlign Value ) = 0;
};

struct __declspec(uuid("0b304b42-253f-4221-8c87-8ad1fca76c94"))
IContourLevel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetUpToValue,put=PutUpToValue))
    double UpToValue;

    //
    // Wrapper methods for error-handling
    //

    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR Value );
    double GetUpToValue ( );
    void PutUpToValue (
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_UpToValue (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_UpToValue (
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("f66470fb-1309-47ff-a790-26e2e38bebd0"))
IContourLevels : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItems))
    IContourLevelPtr Items[];

    //
    // Wrapper methods for error-handling
    //

    IContourLevelPtr GetItems (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Items (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IContourLevel * * Value ) = 0;
};

struct __declspec(uuid("fdb6ae9b-ae83-4cc3-ac6d-03cf0e133867"))
IPyramidSeries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSizePercent,put=PutSizePercent))
    long SizePercent;

    //
    // Wrapper methods for error-handling
    //

    long GetSizePercent ( );
    void PutSizePercent (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SizePercent (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_SizePercent (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("cf5dfd57-e60d-11d4-93a2-006008a7eed4"))
ITeePanelsList : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Delete (
        long Index );
    HRESULT Clear ( );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
};

#pragma pack(push, 4)

struct __declspec(uuid("105cd928-ed20-11d4-93ac-006008a7eed4"))
TeeRect
{
    long Left;
    long Top;
    long Right;
    long Bottom;
};

#pragma pack(pop)

struct __declspec(uuid("b6c10495-fb89-11d4-93c9-006008a7eed4"))
ITeeCustomShape : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetGradient))
    IGradientPtr Gradient;
    __declspec(property(get=GetShadowColor,put=PutShadowColor))
    OLE_COLOR ShadowColor;
    __declspec(property(get=GetShapeStyle,put=PutShapeStyle))
    enum EChartObjectShapeStyle ShapeStyle;
    __declspec(property(get=GetFont))
    ITeeFontPtr Font;
    __declspec(property(get=GetShapeBounds))
    struct TeeRect ShapeBounds;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetShadowSize,put=PutShadowSize))
    long ShadowSize;
    __declspec(property(get=GetTransparent,put=PutTransparent))
    VARIANT_BOOL Transparent;
    __declspec(property(get=GetBevel,put=PutBevel))
    enum EPanelBevel Bevel;
    __declspec(property(get=GetBevelWidth,put=PutBevelWidth))
    long BevelWidth;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    long Transparency;

    //
    // Wrapper methods for error-handling
    //

    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR Value );
    ITeeFontPtr GetFont ( );
    IGradientPtr GetGradient ( );
    long GetShadowSize ( );
    void PutShadowSize (
        long Value );
    OLE_COLOR GetShadowColor ( );
    void PutShadowColor (
        OLE_COLOR Value );
    VARIANT_BOOL GetTransparent ( );
    void PutTransparent (
        VARIANT_BOOL Value );
    enum EChartObjectShapeStyle GetShapeStyle ( );
    void PutShapeStyle (
        enum EChartObjectShapeStyle Value );
    long GetTransparency ( );
    void PutTransparency (
        long Value );
    struct TeeRect GetShapeBounds ( );
    enum EPanelBevel GetBevel ( );
    void PutBevel (
        enum EPanelBevel Value );
    long GetBevelWidth ( );
    void PutBevelWidth (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct ITeeFont * * Font ) = 0;
      virtual HRESULT __stdcall get_Gradient (
        /*[out,retval]*/ struct IGradient * * Value ) = 0;
      virtual HRESULT __stdcall get_ShadowSize (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ShadowSize (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_ShadowColor (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_ShadowColor (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_Transparent (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Transparent (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ShapeStyle (
        /*[out,retval]*/ enum EChartObjectShapeStyle * Value ) = 0;
      virtual HRESULT __stdcall put_ShapeStyle (
        /*[in]*/ enum EChartObjectShapeStyle Value ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_ShapeBounds (
        /*[out,retval]*/ struct TeeRect * Value ) = 0;
      virtual HRESULT __stdcall get_Bevel (
        /*[out,retval]*/ enum EPanelBevel * Value ) = 0;
      virtual HRESULT __stdcall put_Bevel (
        /*[in]*/ enum EPanelBevel Value ) = 0;
      virtual HRESULT __stdcall get_BevelWidth (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_BevelWidth (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("e517cb2c-1c48-11d5-9400-006008a7eed4"))
ITeeShapePosition : ITeeCustomShape
{
    //
    // Property data
    //

    __declspec(property(get=GetLeft,put=PutLeft))
    long Left;
    __declspec(property(get=GetTop,put=PutTop))
    long Top;
    __declspec(property(get=GetCustomPosition,put=PutCustomPosition))
    VARIANT_BOOL CustomPosition;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetCustomPosition ( );
    void PutCustomPosition (
        VARIANT_BOOL Value );
    long GetLeft ( );
    void PutLeft (
        long Value );
    long GetTop ( );
    void PutTop (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CustomPosition (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_CustomPosition (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ long Value ) = 0;
};

enum __declspec(uuid("105cd92a-ed20-11d4-93ac-006008a7eed4"))
EBezierStyle
{
    bsWindows = 0,
    bsBezier3 = 1,
    bsBezier4 = 2
};

enum __declspec(uuid("2a37a079-edee-11d4-93ad-006008a7eed4"))
EPaletteStyle
{
    psPale = 0,
    psStrong = 1
};

struct __declspec(uuid("235fb742-f8ed-11d4-93c8-006008a7eed4"))
IExportFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;

    //
    // Wrapper methods for error-handling
    //

    long GetWidth ( );
    void PutWidth (
        long Value );
    long GetHeight ( );
    void PutHeight (
        long Value );
    HRESULT SaveToFile (
        _bstr_t FileName );
    _variant_t SaveToStream ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_SaveToFile (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_SaveToStream (
        /*[out,retval]*/ VARIANT * Value ) = 0;
};

struct __declspec(uuid("a77491e3-f825-11d4-93c7-006008a7eed4"))
IJPEGExport : IExportFormat
{
    //
    // Property data
    //

    __declspec(property(get=GetGrayScale,put=PutGrayScale))
    VARIANT_BOOL GrayScale;
    __declspec(property(get=GetCompressionQuality,put=PutCompressionQuality))
    long CompressionQuality;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetGrayScale ( );
    void PutGrayScale (
        VARIANT_BOOL Value );
    long GetCompressionQuality ( );
    void PutCompressionQuality (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_GrayScale (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_GrayScale (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_CompressionQuality (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_CompressionQuality (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("235fb744-f8ed-11d4-93c8-006008a7eed4"))
IPNGExport : IExportFormat
{
    //
    // Property data
    //

    __declspec(property(get=GetCompressionLevel,put=PutCompressionLevel))
    long CompressionLevel;

    //
    // Wrapper methods for error-handling
    //

    long GetCompressionLevel ( );
    void PutCompressionLevel (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CompressionLevel (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_CompressionLevel (
        /*[in]*/ long Value ) = 0;
};

enum __declspec(uuid("235fb748-f8ed-11d4-93c8-006008a7eed4"))
EGIFCompression
{
    gcLZW = 0,
    gcRLE = 1
};

enum __declspec(uuid("235fb749-f8ed-11d4-93c8-006008a7eed4"))
EGIFDitherMode
{
    dmNearest = 0,
    dmFloydSteinberg = 1,
    dmStucki = 2,
    dmSierra = 3,
    dmJaJuNI = 4,
    dmSteveArche = 5,
    dmBurkes = 6
};

enum __declspec(uuid("235fb74a-f8ed-11d4-93c8-006008a7eed4"))
EGIFColorReduction
{
    rmNone = 0,
    rmWindows20 = 1,
    rmWindows256 = 2,
    rmWindowsGray = 3,
    rmMonochrome = 4,
    rmGrayScale = 5,
    rmNetscape = 6,
    rmQuantize = 7,
    rmQuantize256 = 8
};

struct __declspec(uuid("235fb746-f8ed-11d4-93c8-006008a7eed4"))
IGIFExport : IExportFormat
{
    //
    // Property data
    //

    __declspec(property(get=GetCompression,put=PutCompression))
    enum EGIFCompression Compression;
    __declspec(property(get=GetDitherMode,put=PutDitherMode))
    enum EGIFDitherMode DitherMode;
    __declspec(property(get=GetColorReduction,put=PutColorReduction))
    enum EGIFColorReduction ColorReduction;

    //
    // Wrapper methods for error-handling
    //

    enum EGIFCompression GetCompression ( );
    void PutCompression (
        enum EGIFCompression Value );
    enum EGIFDitherMode GetDitherMode ( );
    void PutDitherMode (
        enum EGIFDitherMode Value );
    enum EGIFColorReduction GetColorReduction ( );
    void PutColorReduction (
        enum EGIFColorReduction Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Compression (
        /*[out,retval]*/ enum EGIFCompression * Value ) = 0;
      virtual HRESULT __stdcall put_Compression (
        /*[in]*/ enum EGIFCompression Value ) = 0;
      virtual HRESULT __stdcall get_DitherMode (
        /*[out,retval]*/ enum EGIFDitherMode * Value ) = 0;
      virtual HRESULT __stdcall put_DitherMode (
        /*[in]*/ enum EGIFDitherMode Value ) = 0;
      virtual HRESULT __stdcall get_ColorReduction (
        /*[out,retval]*/ enum EGIFColorReduction * Value ) = 0;
      virtual HRESULT __stdcall put_ColorReduction (
        /*[in]*/ enum EGIFColorReduction Value ) = 0;
};

struct __declspec(uuid("235fb74b-f8ed-11d4-93c8-006008a7eed4"))
IPCXExport : IExportFormat
{};

struct __declspec(uuid("235fb74d-f8ed-11d4-93c8-006008a7eed4"))
IMetafileExport : IExportFormat
{
    //
    // Property data
    //

    __declspec(property(get=GetEnhanced,put=PutEnhanced))
    VARIANT_BOOL Enhanced;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnhanced ( );
    void PutEnhanced (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Enhanced (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Enhanced (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

enum __declspec(uuid("235fb751-f8ed-11d4-93c8-006008a7eed4"))
EPixelFormat
{
    pfDevice = 0,
    pf1bit = 1,
    pf4bit = 2,
    pf8bit = 3,
    pf15bit = 4,
    pf16bit = 5,
    pf24bit = 6,
    pf32bit = 7
};

struct __declspec(uuid("235fb74f-f8ed-11d4-93c8-006008a7eed4"))
IBMPExport : IExportFormat
{
    //
    // Property data
    //

    __declspec(property(get=GetColors,put=PutColors))
    enum EPixelFormat Colors;
    __declspec(property(get=GetMonochrome,put=PutMonochrome))
    VARIANT_BOOL Monochrome;

    //
    // Wrapper methods for error-handling
    //

    enum EPixelFormat GetColors ( );
    void PutColors (
        enum EPixelFormat Value );
    VARIANT_BOOL GetMonochrome ( );
    void PutMonochrome (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Colors (
        /*[out,retval]*/ enum EPixelFormat * Value ) = 0;
      virtual HRESULT __stdcall put_Colors (
        /*[in]*/ enum EPixelFormat Value ) = 0;
      virtual HRESULT __stdcall get_Monochrome (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Monochrome (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("235fb755-f8ed-11d4-93c8-006008a7eed4"))
IChartImageTool : ICustomToolSeries
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT ImageLoad (
        _bstr_t FileName );
    HRESULT ImageClear ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ImageLoad (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_ImageClear ( ) = 0;
};

enum __declspec(uuid("235fb757-f8ed-11d4-93c8-006008a7eed4"))
EMarkToolMouseAction
{
    mtmMove = 0,
    mtmClick = 1
};

struct __declspec(uuid("235fb753-f8ed-11d4-93c8-006008a7eed4"))
IMarksTipTool : ICustomToolSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetMouseAction,put=PutMouseAction))
    enum EMarkToolMouseAction MouseAction;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum EMarkStyle Style;
    __declspec(property(get=GetDelay,put=PutDelay))
    long Delay;

    //
    // Wrapper methods for error-handling
    //

    enum EMarkToolMouseAction GetMouseAction ( );
    void PutMouseAction (
        enum EMarkToolMouseAction Value );
    enum EMarkStyle GetStyle ( );
    void PutStyle (
        enum EMarkStyle Value );
    long GetDelay ( );
    void PutDelay (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MouseAction (
        /*[out,retval]*/ enum EMarkToolMouseAction * Value ) = 0;
      virtual HRESULT __stdcall put_MouseAction (
        /*[in]*/ enum EMarkToolMouseAction Value ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum EMarkStyle * Value ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum EMarkStyle Value ) = 0;
      virtual HRESULT __stdcall get_Delay (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Delay (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("6321aac0-d3f4-4dbd-8f84-27d98ec46046"))
IMomentumDivFunction : IDispatch
{};

struct __declspec(uuid("a3aa3639-e612-4d0a-ade7-57abdeb6ead6"))
IExpTrendFunction : IDispatch
{};

struct __declspec(uuid("d1a32481-6206-4cbf-8261-55141706e6ac"))
IExpMovAvgFunction : IDispatch
{};

struct __declspec(uuid("662c9054-0898-4f09-881e-5abb47978fb6"))
IRMSFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetComplete,put=PutComplete))
    VARIANT_BOOL Complete;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetComplete ( );
    void PutComplete (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Complete (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Complete (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("aa13e17b-57fc-4364-9bbe-ee2095821f16"))
IStochasticFunction : IDispatch
{};

struct __declspec(uuid("ac690acd-0730-11d5-93e3-006008a7eed4"))
INativeExport : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SaveToFile (
        _bstr_t FileName,
        VARIANT_BOOL IncludeData );
    _variant_t SaveToStream (
        VARIANT_BOOL IncludeData );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SaveToFile (
        /*[in]*/ BSTR FileName,
        /*[in]*/ VARIANT_BOOL IncludeData ) = 0;
      virtual HRESULT __stdcall raw_SaveToStream (
        /*[in]*/ VARIANT_BOOL IncludeData,
        /*[out,retval]*/ VARIANT * Value ) = 0;
};

struct __declspec(uuid("ac690acf-0730-11d5-93e3-006008a7eed4"))
IDataExport : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIncludeHeader,put=PutIncludeHeader))
    VARIANT_BOOL IncludeHeader;
    __declspec(property(get=GetIncludeLabels,put=PutIncludeLabels))
    VARIANT_BOOL IncludeLabels;
    __declspec(property(get=GetIncludeIndex,put=PutIncludeIndex))
    VARIANT_BOOL IncludeIndex;
    __declspec(property(get=GetSeries,put=PutSeries))
    _variant_t Series;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIncludeHeader ( );
    void PutIncludeHeader (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetIncludeLabels ( );
    void PutIncludeLabels (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetIncludeIndex ( );
    void PutIncludeIndex (
        VARIANT_BOOL Value );
    _variant_t GetSeries ( );
    void PutSeries (
        const _variant_t & Value );
    HRESULT SaveToFile (
        _bstr_t FileName );
    _variant_t SaveToStream ( );
    _bstr_t AsString ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IncludeHeader (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_IncludeHeader (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_IncludeLabels (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_IncludeLabels (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_IncludeIndex (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_IncludeIndex (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Series (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall put_Series (
        /*[in]*/ VARIANT Value ) = 0;
      virtual HRESULT __stdcall raw_SaveToFile (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_SaveToStream (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall raw_AsString (
        /*[out,retval]*/ BSTR * Value ) = 0;
};

struct __declspec(uuid("ac690ad1-0730-11d5-93e3-006008a7eed4"))
IXMLExport : IDataExport
{};

struct __declspec(uuid("ac690ad3-0730-11d5-93e3-006008a7eed4"))
IXLSExport : IDataExport
{};

struct __declspec(uuid("ac690ad5-0730-11d5-93e3-006008a7eed4"))
IHTMLExport : IDataExport
{};

struct __declspec(uuid("ac690ad7-0730-11d5-93e3-006008a7eed4"))
ITextExport : IDataExport
{
    //
    // Property data
    //

    __declspec(property(get=GetTextDelimiter,put=PutTextDelimiter))
    _bstr_t TextDelimiter;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetTextDelimiter ( );
    void PutTextDelimiter (
        _bstr_t Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TextDelimiter (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_TextDelimiter (
        /*[in]*/ BSTR Value ) = 0;
};

struct __declspec(uuid("b6c10496-fb89-11d4-93c9-006008a7eed4"))
IExport : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetasJPEG))
    IJPEGExportPtr asJPEG;
    __declspec(property(get=GetasPNG))
    IPNGExportPtr asPNG;
    __declspec(property(get=GetasGIF))
    IGIFExportPtr asGIF;
    __declspec(property(get=GetasBMP))
    IBMPExportPtr asBMP;
    __declspec(property(get=GetasPCX))
    IPCXExportPtr asPCX;
    __declspec(property(get=GetasMetafile))
    IMetafileExportPtr asMetafile;
    __declspec(property(get=GetasNative))
    INativeExportPtr asNative;
    __declspec(property(get=GetasXML))
    IXMLExportPtr asXML;
    __declspec(property(get=GetasXLS))
    IXLSExportPtr asXLS;
    __declspec(property(get=GetasHTML))
    IHTMLExportPtr asHTML;
    __declspec(property(get=GetasText))
    ITextExportPtr asText;

    //
    // Wrapper methods for error-handling
    //

    HRESULT CopyToClipboardBitmap ( );
    HRESULT CopyToClipboardMetafile (
        VARIANT_BOOL Enhanced );
    HRESULT SaveToBitmapFile (
        _bstr_t FileName );
    HRESULT SaveToFile (
        _bstr_t FileName );
    HRESULT SaveToJPEGFile (
        _bstr_t FileName,
        VARIANT_BOOL Gray,
        enum EJPEGPerformance Performance,
        long Quality,
        long Width,
        long Height );
    HRESULT SaveToMetafile (
        _bstr_t FileName );
    HRESULT SaveToMetafileEnh (
        _bstr_t FileName );
    HRESULT ShowExport ( );
    _bstr_t SaveChartDialog ( );
    HRESULT ConvertTeeFileToText (
        _bstr_t InputFile,
        _bstr_t OutputFile );
    _variant_t Stream (
        enum EStreamType StreamType );
    IJPEGExportPtr GetasJPEG ( );
    IPNGExportPtr GetasPNG ( );
    IGIFExportPtr GetasGIF ( );
    IBMPExportPtr GetasBMP ( );
    IPCXExportPtr GetasPCX ( );
    IMetafileExportPtr GetasMetafile ( );
    INativeExportPtr GetasNative ( );
    IXMLExportPtr GetasXML ( );
    IXLSExportPtr GetasXLS ( );
    IHTMLExportPtr GetasHTML ( );
    ITextExportPtr GetasText ( );
    HRESULT EmailFile (
        _bstr_t FileName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CopyToClipboardBitmap ( ) = 0;
      virtual HRESULT __stdcall raw_CopyToClipboardMetafile (
        /*[in]*/ VARIANT_BOOL Enhanced ) = 0;
      virtual HRESULT __stdcall raw_SaveToBitmapFile (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_SaveToFile (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_SaveToJPEGFile (
        /*[in]*/ BSTR FileName,
        /*[in]*/ VARIANT_BOOL Gray,
        /*[in]*/ enum EJPEGPerformance Performance,
        /*[in]*/ long Quality,
        /*[in]*/ long Width,
        /*[in]*/ long Height ) = 0;
      virtual HRESULT __stdcall raw_SaveToMetafile (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_SaveToMetafileEnh (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_ShowExport ( ) = 0;
      virtual HRESULT __stdcall raw_SaveChartDialog (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall raw_ConvertTeeFileToText (
        /*[in]*/ BSTR InputFile,
        /*[in]*/ BSTR OutputFile ) = 0;
      virtual HRESULT __stdcall raw_Stream (
        /*[in]*/ enum EStreamType StreamType,
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall get_asJPEG (
        /*[out,retval]*/ struct IJPEGExport * * Value ) = 0;
      virtual HRESULT __stdcall get_asPNG (
        /*[out,retval]*/ struct IPNGExport * * Value ) = 0;
      virtual HRESULT __stdcall get_asGIF (
        /*[out,retval]*/ struct IGIFExport * * Value ) = 0;
      virtual HRESULT __stdcall get_asBMP (
        /*[out,retval]*/ struct IBMPExport * * Value ) = 0;
      virtual HRESULT __stdcall get_asPCX (
        /*[out,retval]*/ struct IPCXExport * * Value ) = 0;
      virtual HRESULT __stdcall get_asMetafile (
        /*[out,retval]*/ struct IMetafileExport * * Value ) = 0;
      virtual HRESULT __stdcall get_asNative (
        /*[out,retval]*/ struct INativeExport * * Value ) = 0;
      virtual HRESULT __stdcall get_asXML (
        /*[out,retval]*/ struct IXMLExport * * Value ) = 0;
      virtual HRESULT __stdcall get_asXLS (
        /*[out,retval]*/ struct IXLSExport * * Value ) = 0;
      virtual HRESULT __stdcall get_asHTML (
        /*[out,retval]*/ struct IHTMLExport * * Value ) = 0;
      virtual HRESULT __stdcall get_asText (
        /*[out,retval]*/ struct ITextExport * * Value ) = 0;
      virtual HRESULT __stdcall raw_EmailFile (
        /*[in]*/ BSTR FileName ) = 0;
};

enum __declspec(uuid("b74b94d3-1923-11d5-93fc-006008a7eed4"))
ETeeCommanderControls
{
    tcbNormal = 0,
    tcbSeparator = 1,
    tcbRotate = 2,
    tcbMove = 3,
    tcbZoom = 4,
    tcbDepth = 5,
    tcbEdit = 6,
    tcbPrintPreview = 7,
    tcbCopy = 8,
    tcbSave = 9,
    tcbLabel = 10,
    tcb3D = 11
};

struct __declspec(uuid("e517cb25-1c48-11d5-9400-006008a7eed4"))
ICalendarCell : ITeeCustomShape
{
    //
    // Property data
    //

    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("e517cb27-1c48-11d5-9400-006008a7eed4"))
ICalendarCellUpper : ICalendarCell
{
    //
    // Property data
    //

    __declspec(property(get=GetFormat,put=PutFormat))
    _bstr_t Format;
    __declspec(property(get=GetUpperCase,put=PutUpperCase))
    VARIANT_BOOL UpperCase;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFormat ( );
    void PutFormat (
        _bstr_t Value );
    VARIANT_BOOL GetUpperCase ( );
    void PutUpperCase (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Format (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_UpperCase (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_UpperCase (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("01e6d0da-07ee-11d5-93e4-006008a7eed4"))
ICalendarSeries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDate,put=PutDate))
    double Date;
    __declspec(property(get=GetDays))
    ICalendarCellPtr Days;
    __declspec(property(get=GetMonths))
    ICalendarCellUpperPtr Months;
    __declspec(property(get=GetTrailing))
    ICalendarCellPtr Trailing;
    __declspec(property(get=GetSunday))
    ICalendarCellPtr Sunday;
    __declspec(property(get=GetToday))
    ICalendarCellPtr Today;
    __declspec(property(get=GetWeekdays))
    ICalendarCellUpperPtr Weekdays;
    __declspec(property(get=GetNextButtonVisible,put=PutNextButtonVisible))
    VARIANT_BOOL NextButtonVisible;
    __declspec(property(get=GetPreviousButtonVisible,put=PutPreviousButtonVisible))
    VARIANT_BOOL PreviousButtonVisible;

    //
    // Wrapper methods for error-handling
    //

    double GetDate ( );
    void PutDate (
        double Value );
    ICalendarCellPtr GetDays ( );
    ICalendarCellUpperPtr GetMonths ( );
    ICalendarCellPtr GetTrailing ( );
    ICalendarCellPtr GetSunday ( );
    ICalendarCellPtr GetToday ( );
    ICalendarCellUpperPtr GetWeekdays ( );
    HRESULT NextMonth ( );
    HRESULT PreviousMonth ( );
    struct TeeRect RectCell (
        long Column,
        long Row );
    long Rows ( );
    struct TeeRect SeriesRect ( );
    VARIANT_BOOL GetNextButtonVisible ( );
    void PutNextButtonVisible (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetPreviousButtonVisible ( );
    void PutPreviousButtonVisible (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Date (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Date (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_Days (
        /*[out,retval]*/ struct ICalendarCell * * Value ) = 0;
      virtual HRESULT __stdcall get_Months (
        /*[out,retval]*/ struct ICalendarCellUpper * * Value ) = 0;
      virtual HRESULT __stdcall get_Trailing (
        /*[out,retval]*/ struct ICalendarCell * * Value ) = 0;
      virtual HRESULT __stdcall get_Sunday (
        /*[out,retval]*/ struct ICalendarCell * * Value ) = 0;
      virtual HRESULT __stdcall get_Today (
        /*[out,retval]*/ struct ICalendarCell * * Value ) = 0;
      virtual HRESULT __stdcall get_Weekdays (
        /*[out,retval]*/ struct ICalendarCellUpper * * Value ) = 0;
      virtual HRESULT __stdcall raw_NextMonth ( ) = 0;
      virtual HRESULT __stdcall raw_PreviousMonth ( ) = 0;
      virtual HRESULT __stdcall raw_RectCell (
        /*[in]*/ long Column,
        /*[in]*/ long Row,
        /*[out,retval]*/ struct TeeRect * result ) = 0;
      virtual HRESULT __stdcall raw_Rows (
        /*[out,retval]*/ long * result ) = 0;
      virtual HRESULT __stdcall raw_SeriesRect (
        /*[out,retval]*/ struct TeeRect * result ) = 0;
      virtual HRESULT __stdcall get_NextButtonVisible (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_NextButtonVisible (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_PreviousButtonVisible (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_PreviousButtonVisible (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

enum __declspec(uuid("e517cb2b-1c48-11d5-9400-006008a7eed4"))
EAnnotationPosition
{
    ppLeftTop = 0,
    ppLeftBottom = 1,
    ppRightTop = 2,
    ppRightBottom = 3
};

struct __declspec(uuid("4061f8f2-1d1c-11d5-9401-006008a7eed4"))
SeriesTextSource;
    // [ default ] interface ISeriesTextSource

struct __declspec(uuid("4061f8f7-1d1c-11d5-9401-006008a7eed4"))
ISeriesTextField : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFieldIndex,put=PutFieldIndex))
    long FieldIndex;
    __declspec(property(get=GetFieldName,put=PutFieldName))
    _bstr_t FieldName;

    //
    // Wrapper methods for error-handling
    //

    long GetFieldIndex ( );
    void PutFieldIndex (
        long Value );
    _bstr_t GetFieldName ( );
    void PutFieldName (
        _bstr_t Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FieldIndex (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_FieldIndex (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_FieldName (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_FieldName (
        /*[in]*/ BSTR Value ) = 0;
};

struct __declspec(uuid("4061f8f5-1d1c-11d5-9401-006008a7eed4"))
ISeriesTextFields : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItems))
    ISeriesTextFieldPtr Items[];
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    ISeriesTextFieldPtr GetItems (
        long Index );
    HRESULT Clear ( );
    HRESULT Delete (
        long Index );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Items (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ISeriesTextField * * Value ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
};

struct __declspec(uuid("f069c83a-876f-4c9d-b540-d761428606db"))
ChartGrid;
    // [ default ] interface IChartGrid
    // [ default, source ] dispinterface IChartGridEvents

enum __declspec(uuid("e23e11a3-394d-11d5-943a-006008a7eed4"))
EDatasourceType
{
    dstAllRecords = 0,
    dstSingleRecord = 1
};

struct __declspec(uuid("a841a3e5-3ed7-11d5-943d-006008a7eed4"))
IValueLists : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetItems))
    IValueListPtr Items[];

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IValueListPtr GetItems (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Items (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IValueList * * Value ) = 0;
};

struct __declspec(uuid("5253cebf-921c-4b2a-80d8-c23be8908900"))
IChartGridRows : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHeights,put=PutHeights))
    long Heights[];
    __declspec(property(get=GetRow,put=PutRow))
    long Row;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    long GetRow ( );
    void PutRow (
        long Value );
    long GetCount ( );
    long GetHeights (
        long Index );
    void PutHeights (
        long Index,
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Row (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Row (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Heights (
        /*[in]*/ long Index,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Heights (
        /*[in]*/ long Index,
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("8bfbfaf7-2fab-4f28-9c7b-08a2d1f157ae"))
IChartGridCols : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCol,put=PutCol))
    long Col;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidths,put=PutWidths))
    long Widths[];

    //
    // Wrapper methods for error-handling
    //

    long GetCol ( );
    void PutCol (
        long Value );
    long GetCount ( );
    long GetWidths (
        long Index );
    void PutWidths (
        long Index,
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Col (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Col (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Widths (
        /*[in]*/ long Index,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Widths (
        /*[in]*/ long Index,
        /*[in]*/ long Value ) = 0;
};

enum __declspec(uuid("c1d7b309-34f6-467d-aa01-fb8443333f8b"))
EPenEndStyle
{
    esRound = 0,
    esSquare = 1,
    esFlat = 2
};

struct __declspec(uuid("b6c1048b-fb89-11d4-93c9-006008a7eed4"))
IPen : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum EChartPenStyle Style;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetEndStyle,put=PutEndStyle))
    enum EPenEndStyle EndStyle;

    //
    // Wrapper methods for error-handling
    //

    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR Color );
    long GetWidth ( );
    void PutWidth (
        long Width );
    enum EChartPenStyle GetStyle ( );
    void PutStyle (
        enum EChartPenStyle Style );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Visible );
    enum EPenEndStyle GetEndStyle ( );
    void PutEndStyle (
        enum EPenEndStyle Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * Color ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR Color ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long Width ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum EChartPenStyle * Style ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum EChartPenStyle Style ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall get_EndStyle (
        /*[out,retval]*/ enum EPenEndStyle * Value ) = 0;
      virtual HRESULT __stdcall put_EndStyle (
        /*[in]*/ enum EPenEndStyle Value ) = 0;
};

struct __declspec(uuid("b6c1048f-fb89-11d4-93c9-006008a7eed4"))
ICanvas : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBrush))
    IBrushPtr Brush;
    __declspec(property(get=GetPen))
    IPenPtr Pen;
    __declspec(property(get=GetFont))
    IChartFontPtr Font;
    __declspec(property(get=GetTop))
    long Top;
    __declspec(property(get=GetLeft))
    long Left;
    __declspec(property(get=GetWidth))
    long Width;
    __declspec(property(get=GetHeight))
    long Height;
    __declspec(property(get=GetBackMode,put=PutBackMode))
    enum ECanvasBackMode BackMode;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetSupportsFullRotation))
    VARIANT_BOOL SupportsFullRotation;
    __declspec(property(get=GetUseBuffer,put=PutUseBuffer))
    VARIANT_BOOL UseBuffer;
    __declspec(property(get=GetHandleDC))
    long HandleDC;
    __declspec(property(get=GetRotationCenter))
    ITeePoint3DPtr RotationCenter;
    __declspec(property(get=GetChartXCenter))
    long ChartXCenter;
    __declspec(property(get=GetChartYCenter))
    long ChartYCenter;
    __declspec(property(get=GetTextAlign,put=PutTextAlign))
    enum ECanvasTextAlign TextAlign;

    //
    // Wrapper methods for error-handling
    //

    IBrushPtr GetBrush ( );
    IPenPtr GetPen ( );
    HRESULT LineTo (
        long X,
        long Y );
    HRESULT MoveTo (
        long X,
        long Y );
    HRESULT Rectangle (
        long Left,
        long Top,
        long Right,
        long Bottom );
    IChartFontPtr GetFont ( );
    HRESULT Arc (
        long X1,
        long Y1,
        long X2,
        long Y2,
        long X3,
        long Y3,
        long X4,
        long Y4 );
    HRESULT Ellipse (
        long X1,
        long Y1,
        long X2,
        long Y2 );
    HRESULT TextOut (
        long X,
        long Y,
        _bstr_t Text );
    long TextHeight (
        _bstr_t SomeText );
    long TextWidth (
        _bstr_t SomeText );
    HRESULT ClipRectangle (
        long Left,
        long Top,
        long Right,
        long Bottom );
    HRESULT UnClipRectangle ( );
    HRESULT RotateLabel (
        long X,
        long Y,
        _bstr_t St,
        long RotDegree );
    VARIANT_BOOL IsScreenHighColor ( );
    long GetTop ( );
    long GetLeft ( );
    long GetWidth ( );
    long GetHeight ( );
    enum ECanvasBackMode GetBackMode ( );
    void PutBackMode (
        enum ECanvasBackMode Value );
    OLE_COLOR GetBackColor ( );
    void PutBackColor (
        OLE_COLOR Value );
    VARIANT_BOOL GetSupportsFullRotation ( );
    VARIANT_BOOL GetUseBuffer ( );
    void PutUseBuffer (
        VARIANT_BOOL Value );
    HRESULT Pie3D (
        long XCenter,
        long YCenter,
        long XRadius,
        long YRadius,
        long Z0,
        long Z1,
        double StartAngle,
        double EndAngle,
        VARIANT_BOOL DarkSides,
        VARIANT_BOOL DrawSides );
    HRESULT LineWithZ (
        long X0,
        long Y0,
        long X1,
        long Y1,
        long Z );
    HRESULT MoveTo3D (
        long X,
        long Y,
        long Z );
    HRESULT LineTo3D (
        long X,
        long Y,
        long Z );
    HRESULT Plane3D (
        long X0,
        long Y0,
        long X1,
        long Y1,
        long Z0,
        long Z1 );
    HRESULT ZLine3D (
        long X,
        long Y,
        long Z0,
        long Z1 );
    HRESULT RotateLabel3D (
        long X,
        long Y,
        long Z,
        _bstr_t St,
        long RotDegree );
    enum ECanvasTextAlign GetTextAlign ( );
    void PutTextAlign (
        enum ECanvasTextAlign Value );
    HRESULT VertLine3D (
        long X,
        long Top,
        long Bottom,
        long Z );
    HRESULT HorizLine3D (
        long Left,
        long Right,
        long Y,
        long Z );
    HRESULT Cylinder (
        VARIANT_BOOL Vertical,
        long Left,
        long Top,
        long Right,
        long Bottom,
        long Z0,
        long Z1,
        VARIANT_BOOL DarkCover );
    HRESULT Cube (
        long Left,
        long Right,
        long Top,
        long Bottom,
        long Z0,
        long Z1,
        VARIANT_BOOL DarkSides );
    HRESULT EllipseWithZ (
        long X1,
        long Y1,
        long X2,
        long Y2,
        long Z );
    HRESULT PlaneWithZ (
        long X1,
        long Y1,
        long X2,
        long Y2,
        long X3,
        long Y3,
        long X4,
        long Y4,
        long Z );
    HRESULT PlaneFour3D (
        long X1,
        long Y1,
        long X2,
        long Y2,
        long X3,
        long Y3,
        long X4,
        long Y4,
        long Z0,
        long Z1 );
    HRESULT RectangleWithZ (
        long Left,
        long Top,
        long Right,
        long Bottom,
        long Z );
    HRESULT RectangleZ (
        long Left,
        long Top,
        long Bottom,
        long Z0,
        long Z1 );
    HRESULT TextOut3D (
        long X,
        long Y,
        long Z,
        _bstr_t Text );
    HRESULT TriangleWithZ (
        long X1,
        long Y1,
        long X2,
        long Y2,
        long X3,
        long Y3,
        long Z );
    HRESULT Frame3D (
        long Left,
        long Top,
        long Right,
        long Bottom,
        OLE_COLOR TopColor,
        OLE_COLOR BottomColor,
        long Width );
    HRESULT EraseBackground (
        long Left,
        long Top,
        long Right,
        long Bottom );
    HRESULT GradientFill (
        long Left,
        long Top,
        long Right,
        long Bottom,
        OLE_COLOR StartColor,
        OLE_COLOR EndColor,
        enum EGradientDirection Direction );
    HRESULT Line (
        long X0,
        long Y0,
        long X1,
        long Y1 );
    HRESULT RectangleY (
        long Left,
        long Top,
        long Right,
        long Z0,
        long Z1 );
    HRESULT Pixels3D (
        long X,
        long Y,
        long Z,
        OLE_COLOR Value );
    long GetHandleDC ( );
    HRESULT Cone (
        VARIANT_BOOL Vertical,
        long Left,
        long Top,
        long Right,
        long Bottom,
        long Z0,
        long Z1,
        VARIANT_BOOL Dark3D,
        long ConePercent );
    HRESULT Sphere (
        long X,
        long Y,
        long Z,
        double Radius );
    HRESULT Arrow (
        VARIANT_BOOL Filled,
        long X0,
        long Y0,
        long X1,
        long Y1,
        long HeadWidth,
        long HeadHeight,
        long Z );
    HRESULT Draw (
        long X,
        long Y,
        struct IPicture * Image );
    ITeePoint3DPtr GetRotationCenter ( );
    long GetChartXCenter ( );
    long GetChartYCenter ( );
    HRESULT GrayScale (
        VARIANT_BOOL Inverted );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Brush ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Pen ) = 0;
      virtual HRESULT __stdcall raw_LineTo (
        /*[in]*/ long X,
        /*[in]*/ long Y ) = 0;
      virtual HRESULT __stdcall raw_MoveTo (
        /*[in]*/ long X,
        /*[in]*/ long Y ) = 0;
      virtual HRESULT __stdcall raw_Rectangle (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Right,
        /*[in]*/ long Bottom ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct IChartFont * * Font ) = 0;
      virtual HRESULT __stdcall raw_Arc (
        /*[in]*/ long X1,
        /*[in]*/ long Y1,
        /*[in]*/ long X2,
        /*[in]*/ long Y2,
        /*[in]*/ long X3,
        /*[in]*/ long Y3,
        /*[in]*/ long X4,
        /*[in]*/ long Y4 ) = 0;
      virtual HRESULT __stdcall raw_Ellipse (
        /*[in]*/ long X1,
        /*[in]*/ long Y1,
        /*[in]*/ long X2,
        /*[in]*/ long Y2 ) = 0;
      virtual HRESULT __stdcall raw_TextOut (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall raw_TextHeight (
        /*[in]*/ BSTR SomeText,
        /*[out,retval]*/ long * St ) = 0;
      virtual HRESULT __stdcall raw_TextWidth (
        /*[in]*/ BSTR SomeText,
        /*[out,retval]*/ long * St ) = 0;
      virtual HRESULT __stdcall raw_ClipRectangle (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Right,
        /*[in]*/ long Bottom ) = 0;
      virtual HRESULT __stdcall raw_UnClipRectangle ( ) = 0;
      virtual HRESULT __stdcall raw_RotateLabel (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[in]*/ BSTR St,
        /*[in]*/ long RotDegree ) = 0;
      virtual HRESULT __stdcall raw_IsScreenHighColor (
        /*[out,retval]*/ VARIANT_BOOL * IsScreenHighColor ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ long * Top ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ long * Left ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * Width ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * Height ) = 0;
      virtual HRESULT __stdcall get_BackMode (
        /*[out,retval]*/ enum ECanvasBackMode * Value ) = 0;
      virtual HRESULT __stdcall put_BackMode (
        /*[in]*/ enum ECanvasBackMode Value ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_SupportsFullRotation (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_UseBuffer (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_UseBuffer (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_Pie3D (
        /*[in]*/ long XCenter,
        /*[in]*/ long YCenter,
        /*[in]*/ long XRadius,
        /*[in]*/ long YRadius,
        /*[in]*/ long Z0,
        /*[in]*/ long Z1,
        /*[in]*/ double StartAngle,
        /*[in]*/ double EndAngle,
        /*[in]*/ VARIANT_BOOL DarkSides,
        /*[in]*/ VARIANT_BOOL DrawSides ) = 0;
      virtual HRESULT __stdcall raw_LineWithZ (
        /*[in]*/ long X0,
        /*[in]*/ long Y0,
        /*[in]*/ long X1,
        /*[in]*/ long Y1,
        /*[in]*/ long Z ) = 0;
      virtual HRESULT __stdcall raw_MoveTo3D (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[in]*/ long Z ) = 0;
      virtual HRESULT __stdcall raw_LineTo3D (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[in]*/ long Z ) = 0;
      virtual HRESULT __stdcall raw_Plane3D (
        /*[in]*/ long X0,
        /*[in]*/ long Y0,
        /*[in]*/ long X1,
        /*[in]*/ long Y1,
        /*[in]*/ long Z0,
        /*[in]*/ long Z1 ) = 0;
      virtual HRESULT __stdcall raw_ZLine3D (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[in]*/ long Z0,
        /*[in]*/ long Z1 ) = 0;
      virtual HRESULT __stdcall raw_RotateLabel3D (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[in]*/ long Z,
        /*[in]*/ BSTR St,
        /*[in]*/ long RotDegree ) = 0;
      virtual HRESULT __stdcall get_TextAlign (
        /*[out,retval]*/ enum ECanvasTextAlign * Value ) = 0;
      virtual HRESULT __stdcall put_TextAlign (
        /*[in]*/ enum ECanvasTextAlign Value ) = 0;
      virtual HRESULT __stdcall raw_VertLine3D (
        /*[in]*/ long X,
        /*[in]*/ long Top,
        /*[in]*/ long Bottom,
        /*[in]*/ long Z ) = 0;
      virtual HRESULT __stdcall raw_HorizLine3D (
        /*[in]*/ long Left,
        /*[in]*/ long Right,
        /*[in]*/ long Y,
        /*[in]*/ long Z ) = 0;
      virtual HRESULT __stdcall raw_Cylinder (
        /*[in]*/ VARIANT_BOOL Vertical,
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Right,
        /*[in]*/ long Bottom,
        /*[in]*/ long Z0,
        /*[in]*/ long Z1,
        /*[in]*/ VARIANT_BOOL DarkCover ) = 0;
      virtual HRESULT __stdcall raw_Cube (
        /*[in]*/ long Left,
        /*[in]*/ long Right,
        /*[in]*/ long Top,
        /*[in]*/ long Bottom,
        /*[in]*/ long Z0,
        /*[in]*/ long Z1,
        /*[in]*/ VARIANT_BOOL DarkSides ) = 0;
      virtual HRESULT __stdcall raw_EllipseWithZ (
        /*[in]*/ long X1,
        /*[in]*/ long Y1,
        /*[in]*/ long X2,
        /*[in]*/ long Y2,
        /*[in]*/ long Z ) = 0;
      virtual HRESULT __stdcall raw_PlaneWithZ (
        /*[in]*/ long X1,
        /*[in]*/ long Y1,
        /*[in]*/ long X2,
        /*[in]*/ long Y2,
        /*[in]*/ long X3,
        /*[in]*/ long Y3,
        /*[in]*/ long X4,
        /*[in]*/ long Y4,
        /*[in]*/ long Z ) = 0;
      virtual HRESULT __stdcall raw_PlaneFour3D (
        /*[in]*/ long X1,
        /*[in]*/ long Y1,
        /*[in]*/ long X2,
        /*[in]*/ long Y2,
        /*[in]*/ long X3,
        /*[in]*/ long Y3,
        /*[in]*/ long X4,
        /*[in]*/ long Y4,
        /*[in]*/ long Z0,
        /*[in]*/ long Z1 ) = 0;
      virtual HRESULT __stdcall raw_RectangleWithZ (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Right,
        /*[in]*/ long Bottom,
        /*[in]*/ long Z ) = 0;
      virtual HRESULT __stdcall raw_RectangleZ (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Bottom,
        /*[in]*/ long Z0,
        /*[in]*/ long Z1 ) = 0;
      virtual HRESULT __stdcall raw_TextOut3D (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[in]*/ long Z,
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall raw_TriangleWithZ (
        /*[in]*/ long X1,
        /*[in]*/ long Y1,
        /*[in]*/ long X2,
        /*[in]*/ long Y2,
        /*[in]*/ long X3,
        /*[in]*/ long Y3,
        /*[in]*/ long Z ) = 0;
      virtual HRESULT __stdcall raw_Frame3D (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Right,
        /*[in]*/ long Bottom,
        /*[in]*/ OLE_COLOR TopColor,
        /*[in]*/ OLE_COLOR BottomColor,
        /*[in]*/ long Width ) = 0;
      virtual HRESULT __stdcall raw_EraseBackground (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Right,
        /*[in]*/ long Bottom ) = 0;
      virtual HRESULT __stdcall raw_GradientFill (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Right,
        /*[in]*/ long Bottom,
        /*[in]*/ OLE_COLOR StartColor,
        /*[in]*/ OLE_COLOR EndColor,
        /*[in]*/ enum EGradientDirection Direction ) = 0;
      virtual HRESULT __stdcall raw_Line (
        /*[in]*/ long X0,
        /*[in]*/ long Y0,
        /*[in]*/ long X1,
        /*[in]*/ long Y1 ) = 0;
      virtual HRESULT __stdcall raw_RectangleY (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Right,
        /*[in]*/ long Z0,
        /*[in]*/ long Z1 ) = 0;
      virtual HRESULT __stdcall raw_Pixels3D (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[in]*/ long Z,
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_HandleDC (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_Cone (
        /*[in]*/ VARIANT_BOOL Vertical,
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Right,
        /*[in]*/ long Bottom,
        /*[in]*/ long Z0,
        /*[in]*/ long Z1,
        /*[in]*/ VARIANT_BOOL Dark3D,
        /*[in]*/ long ConePercent ) = 0;
      virtual HRESULT __stdcall raw_Sphere (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[in]*/ long Z,
        /*[in]*/ double Radius ) = 0;
      virtual HRESULT __stdcall raw_Arrow (
        /*[in]*/ VARIANT_BOOL Filled,
        /*[in]*/ long X0,
        /*[in]*/ long Y0,
        /*[in]*/ long X1,
        /*[in]*/ long Y1,
        /*[in]*/ long HeadWidth,
        /*[in]*/ long HeadHeight,
        /*[in]*/ long Z ) = 0;
      virtual HRESULT __stdcall raw_Draw (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[in]*/ struct IPicture * Image ) = 0;
      virtual HRESULT __stdcall get_RotationCenter (
        /*[out,retval]*/ struct ITeePoint3D * * Value ) = 0;
      virtual HRESULT __stdcall get_ChartXCenter (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_ChartYCenter (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_GrayScale (
        /*[in]*/ VARIANT_BOOL Inverted ) = 0;
};

struct __declspec(uuid("b6c104c6-fb89-11d4-93c9-006008a7eed4"))
IAxis : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAutomatic,put=PutAutomatic))
    VARIANT_BOOL Automatic;
    __declspec(property(get=GetAutomaticMaximum,put=PutAutomaticMaximum))
    VARIANT_BOOL AutomaticMaximum;
    __declspec(property(get=GetAutomaticMinimum,put=PutAutomaticMinimum))
    VARIANT_BOOL AutomaticMinimum;
    __declspec(property(get=GetAxisPen))
    IPenPtr AxisPen;
    __declspec(property(get=GetGridCentered,put=PutGridCentered))
    VARIANT_BOOL GridCentered;
    __declspec(property(get=GetPositionPercent,put=PutPositionPercent))
    double PositionPercent;
    __declspec(property(get=GetExactDateTime,put=PutExactDateTime))
    VARIANT_BOOL ExactDateTime;
    __declspec(property(get=GetGridPen))
    IPenPtr GridPen;
    __declspec(property(get=GetIncrement,put=PutIncrement))
    double Increment;
    __declspec(property(get=GetInverted,put=PutInverted))
    VARIANT_BOOL Inverted;
    __declspec(property(get=GetLabels))
    IAxisLabelsPtr Labels;
    __declspec(property(get=GetMinorTickLength,put=PutMinorTickLength))
    long MinorTickLength;
    __declspec(property(get=GetAxisType))
    enum EAxisType AxisType;
    __declspec(property(get=GetPosition))
    long Position;
    __declspec(property(get=GetStartPosition,put=PutStartPosition))
    double StartPosition;
    __declspec(property(get=GetEndPosition,put=PutEndPosition))
    double EndPosition;
    __declspec(property(get=GetLogarithmicBase,put=PutLogarithmicBase))
    long LogarithmicBase;
    __declspec(property(get=GetLogarithmic,put=PutLogarithmic))
    VARIANT_BOOL Logarithmic;
    __declspec(property(get=GetMaximum,put=PutMaximum))
    double Maximum;
    __declspec(property(get=GetMinimum,put=PutMinimum))
    double Minimum;
    __declspec(property(get=GetMinorTickCount,put=PutMinorTickCount))
    long MinorTickCount;
    __declspec(property(get=GetMinorTicks))
    IPenPtr MinorTicks;
    __declspec(property(get=GetMinorGrid))
    IPenPtr MinorGrid;
    __declspec(property(get=GetTickInnerLength,put=PutTickInnerLength))
    long TickInnerLength;
    __declspec(property(get=GetTickLength,put=PutTickLength))
    long TickLength;
    __declspec(property(get=GetTickOnLabelsOnly,put=PutTickOnLabelsOnly))
    VARIANT_BOOL TickOnLabelsOnly;
    __declspec(property(get=GetOtherside,put=PutOtherside))
    VARIANT_BOOL Otherside;
    __declspec(property(get=GetTicks))
    IPenPtr Ticks;
    __declspec(property(get=GetTicksInner))
    IPenPtr TicksInner;
    __declspec(property(get=GetTitle))
    IAxisTitlePtr Title;
    __declspec(property(get=GetTitleSize,put=PutTitleSize))
    long TitleSize;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAxisLink))
    long AxisLink;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAutomatic ( );
    void PutAutomatic (
        VARIANT_BOOL Automatic );
    VARIANT_BOOL GetAutomaticMaximum ( );
    void PutAutomaticMaximum (
        VARIANT_BOOL AutomaticMaximum );
    VARIANT_BOOL GetAutomaticMinimum ( );
    void PutAutomaticMinimum (
        VARIANT_BOOL AutomaticMinimum );
    IPenPtr GetAxisPen ( );
    enum EAxisType GetAxisType ( );
    VARIANT_BOOL GetExactDateTime ( );
    void PutExactDateTime (
        VARIANT_BOOL ExactDateTime );
    IPenPtr GetGridPen ( );
    double GetIncrement ( );
    void PutIncrement (
        double Increment );
    VARIANT_BOOL GetInverted ( );
    void PutInverted (
        VARIANT_BOOL Inverted );
    IAxisLabelsPtr GetLabels ( );
    VARIANT_BOOL GetLogarithmic ( );
    void PutLogarithmic (
        VARIANT_BOOL Logarithmic );
    double GetMaximum ( );
    void PutMaximum (
        double Maximum );
    double GetMinimum ( );
    void PutMinimum (
        double Minimum );
    long GetMinorTickCount ( );
    void PutMinorTickCount (
        long MinorTickCount );
    long GetMinorTickLength ( );
    void PutMinorTickLength (
        long MinorTickLength );
    IPenPtr GetMinorTicks ( );
    long GetPosition ( );
    long GetTickInnerLength ( );
    void PutTickInnerLength (
        long TickInnerLength );
    long GetTickLength ( );
    void PutTickLength (
        long TickLength );
    VARIANT_BOOL GetTickOnLabelsOnly ( );
    void PutTickOnLabelsOnly (
        VARIANT_BOOL TickOnLabelsOnly );
    IPenPtr GetTicks ( );
    IPenPtr GetTicksInner ( );
    IAxisTitlePtr GetTitle ( );
    long GetTitleSize ( );
    void PutTitleSize (
        long TitleSize );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Visible );
    HRESULT AdjustMaxMin ( );
    long CalcXPosValue (
        double SomeValue );
    long CalcYPosValue (
        double SomeValue );
    long CalcXSizeValue (
        double SomeValue );
    long CalcYSizeValue (
        double SomeValue );
    double CalcPosPoint (
        long SomeValue );
    VARIANT_BOOL Clicked (
        long XCoord,
        long YCoord );
    HRESULT CustomDraw (
        long APosLabels,
        long APosTitle,
        long APosAxis,
        VARIANT_BOOL GridVisible );
    VARIANT_BOOL IsDateTime ( );
    double MaxXValue ( );
    double MaxYValue ( );
    double MinXValue ( );
    double MinYValue ( );
    HRESULT Scroll (
        double Offset,
        VARIANT_BOOL CheckLimits );
    HRESULT SetMinMax (
        double AMin,
        double AMax );
    VARIANT_BOOL GetGridCentered ( );
    void PutGridCentered (
        VARIANT_BOOL Value );
    double GetPositionPercent ( );
    void PutPositionPercent (
        double Value );
    double GetStartPosition ( );
    void PutStartPosition (
        double Value );
    double GetEndPosition ( );
    void PutEndPosition (
        double Value );
    long GetLogarithmicBase ( );
    void PutLogarithmicBase (
        long Value );
    HRESULT CustomDrawMinMax (
        long APosLabels,
        long APosTitle,
        long APosAxis,
        VARIANT_BOOL GridVisible,
        double AMinimum,
        double AMaximum,
        long AStartPosition,
        long AEndPosition );
    IPenPtr GetMinorGrid ( );
    VARIANT_BOOL GetOtherside ( );
    void PutOtherside (
        VARIANT_BOOL Value );
    long GetAxisLink ( );
    double MaxVisibleSeriesValue (
        VARIANT_BOOL AllSeries,
        long SeriesIndex );
    double MinVisibleSeriesValue (
        VARIANT_BOOL AllSeries,
        long SeriesIndex );
    double CalcIncrement ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Automatic (
        /*[out,retval]*/ VARIANT_BOOL * Automatic ) = 0;
      virtual HRESULT __stdcall put_Automatic (
        /*[in]*/ VARIANT_BOOL Automatic ) = 0;
      virtual HRESULT __stdcall get_AutomaticMaximum (
        /*[out,retval]*/ VARIANT_BOOL * AutomaticMaximum ) = 0;
      virtual HRESULT __stdcall put_AutomaticMaximum (
        /*[in]*/ VARIANT_BOOL AutomaticMaximum ) = 0;
      virtual HRESULT __stdcall get_AutomaticMinimum (
        /*[out,retval]*/ VARIANT_BOOL * AutomaticMinimum ) = 0;
      virtual HRESULT __stdcall put_AutomaticMinimum (
        /*[in]*/ VARIANT_BOOL AutomaticMinimum ) = 0;
      virtual HRESULT __stdcall get_AxisPen (
        /*[out,retval]*/ struct IPen * * AxisPen ) = 0;
      virtual HRESULT __stdcall get_AxisType (
        /*[out,retval]*/ enum EAxisType * AxisType ) = 0;
      virtual HRESULT __stdcall get_ExactDateTime (
        /*[out,retval]*/ VARIANT_BOOL * ExactDateTime ) = 0;
      virtual HRESULT __stdcall put_ExactDateTime (
        /*[in]*/ VARIANT_BOOL ExactDateTime ) = 0;
      virtual HRESULT __stdcall get_GridPen (
        /*[out,retval]*/ struct IPen * * GridPen ) = 0;
      virtual HRESULT __stdcall get_Increment (
        /*[out,retval]*/ double * Increment ) = 0;
      virtual HRESULT __stdcall put_Increment (
        /*[in]*/ double Increment ) = 0;
      virtual HRESULT __stdcall get_Inverted (
        /*[out,retval]*/ VARIANT_BOOL * Inverted ) = 0;
      virtual HRESULT __stdcall put_Inverted (
        /*[in]*/ VARIANT_BOOL Inverted ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAxisLabels * * Labels ) = 0;
      virtual HRESULT __stdcall get_Logarithmic (
        /*[out,retval]*/ VARIANT_BOOL * Logarithmic ) = 0;
      virtual HRESULT __stdcall put_Logarithmic (
        /*[in]*/ VARIANT_BOOL Logarithmic ) = 0;
      virtual HRESULT __stdcall get_Maximum (
        /*[out,retval]*/ double * Maximum ) = 0;
      virtual HRESULT __stdcall put_Maximum (
        /*[in]*/ double Maximum ) = 0;
      virtual HRESULT __stdcall get_Minimum (
        /*[out,retval]*/ double * Minimum ) = 0;
      virtual HRESULT __stdcall put_Minimum (
        /*[in]*/ double Minimum ) = 0;
      virtual HRESULT __stdcall get_MinorTickCount (
        /*[out,retval]*/ long * MinorTickCount ) = 0;
      virtual HRESULT __stdcall put_MinorTickCount (
        /*[in]*/ long MinorTickCount ) = 0;
      virtual HRESULT __stdcall get_MinorTickLength (
        /*[out,retval]*/ long * MinorTickLength ) = 0;
      virtual HRESULT __stdcall put_MinorTickLength (
        /*[in]*/ long MinorTickLength ) = 0;
      virtual HRESULT __stdcall get_MinorTicks (
        /*[out,retval]*/ struct IPen * * MinorTicks ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ long * Position ) = 0;
      virtual HRESULT __stdcall get_TickInnerLength (
        /*[out,retval]*/ long * TickInnerLength ) = 0;
      virtual HRESULT __stdcall put_TickInnerLength (
        /*[in]*/ long TickInnerLength ) = 0;
      virtual HRESULT __stdcall get_TickLength (
        /*[out,retval]*/ long * TickLength ) = 0;
      virtual HRESULT __stdcall put_TickLength (
        /*[in]*/ long TickLength ) = 0;
      virtual HRESULT __stdcall get_TickOnLabelsOnly (
        /*[out,retval]*/ VARIANT_BOOL * TickOnLabelsOnly ) = 0;
      virtual HRESULT __stdcall put_TickOnLabelsOnly (
        /*[in]*/ VARIANT_BOOL TickOnLabelsOnly ) = 0;
      virtual HRESULT __stdcall get_Ticks (
        /*[out,retval]*/ struct IPen * * Ticks ) = 0;
      virtual HRESULT __stdcall get_TicksInner (
        /*[out,retval]*/ struct IPen * * TicksInner ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ struct IAxisTitle * * Title ) = 0;
      virtual HRESULT __stdcall get_TitleSize (
        /*[out,retval]*/ long * TitleSize ) = 0;
      virtual HRESULT __stdcall put_TitleSize (
        /*[in]*/ long TitleSize ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall raw_AdjustMaxMin ( ) = 0;
      virtual HRESULT __stdcall raw_CalcXPosValue (
        /*[in]*/ double SomeValue,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_CalcYPosValue (
        /*[in]*/ double SomeValue,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_CalcXSizeValue (
        /*[in]*/ double SomeValue,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_CalcYSizeValue (
        /*[in]*/ double SomeValue,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_CalcPosPoint (
        /*[in]*/ long SomeValue,
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_Clicked (
        /*[in]*/ long XCoord,
        /*[in]*/ long YCoord,
        /*[out,retval]*/ VARIANT_BOOL * Y ) = 0;
      virtual HRESULT __stdcall raw_CustomDraw (
        /*[in]*/ long APosLabels,
        /*[in]*/ long APosTitle,
        /*[in]*/ long APosAxis,
        /*[in]*/ VARIANT_BOOL GridVisible ) = 0;
      virtual HRESULT __stdcall raw_IsDateTime (
        /*[out,retval]*/ VARIANT_BOOL * IsDateTime ) = 0;
      virtual HRESULT __stdcall raw_MaxXValue (
        /*[out,retval]*/ double * MaxXValue ) = 0;
      virtual HRESULT __stdcall raw_MaxYValue (
        /*[out,retval]*/ double * MaxYValue ) = 0;
      virtual HRESULT __stdcall raw_MinXValue (
        /*[out,retval]*/ double * MinXValue ) = 0;
      virtual HRESULT __stdcall raw_MinYValue (
        /*[out,retval]*/ double * MinYValue ) = 0;
      virtual HRESULT __stdcall raw_Scroll (
        /*[in]*/ double Offset,
        /*[in]*/ VARIANT_BOOL CheckLimits ) = 0;
      virtual HRESULT __stdcall raw_SetMinMax (
        /*[in]*/ double AMin,
        /*[in]*/ double AMax ) = 0;
      virtual HRESULT __stdcall get_GridCentered (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_GridCentered (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_PositionPercent (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_PositionPercent (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_StartPosition (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_StartPosition (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_EndPosition (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_EndPosition (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_LogarithmicBase (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_LogarithmicBase (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_CustomDrawMinMax (
        /*[in]*/ long APosLabels,
        /*[in]*/ long APosTitle,
        /*[in]*/ long APosAxis,
        /*[in]*/ VARIANT_BOOL GridVisible,
        /*[in]*/ double AMinimum,
        /*[in]*/ double AMaximum,
        long AStartPosition,
        long AEndPosition ) = 0;
      virtual HRESULT __stdcall get_MinorGrid (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_Otherside (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Otherside (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_AxisLink (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_MaxVisibleSeriesValue (
        /*[in]*/ VARIANT_BOOL AllSeries,
        /*[in]*/ long SeriesIndex,
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_MinVisibleSeriesValue (
        /*[in]*/ VARIANT_BOOL AllSeries,
        /*[in]*/ long SeriesIndex,
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_CalcIncrement (
        /*[out,retval]*/ double * Value ) = 0;
};

struct __declspec(uuid("b6c10491-fb89-11d4-93c9-006008a7eed4"))
IAxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLeft))
    IAxisPtr Left;
    __declspec(property(get=GetRight))
    IAxisPtr Right;
    __declspec(property(get=GetTop))
    IAxisPtr Top;
    __declspec(property(get=GetBottom))
    IAxisPtr Bottom;
    __declspec(property(get=GetDepth))
    IAxisPtr Depth;
    __declspec(property(get=GetDrawAxesBeforeSeries,put=PutDrawAxesBeforeSeries))
    VARIANT_BOOL DrawAxesBeforeSeries;
    __declspec(property(get=GetCustom))
    IAxisPtr Custom[];
    __declspec(property(get=GetCustomCount))
    long CustomCount;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;

    //
    // Wrapper methods for error-handling
    //

    IAxisPtr GetLeft ( );
    IAxisPtr GetRight ( );
    IAxisPtr GetTop ( );
    IAxisPtr GetBottom ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Visible );
    IAxisPtr GetDepth ( );
    VARIANT_BOOL GetDrawAxesBeforeSeries ( );
    void PutDrawAxesBeforeSeries (
        VARIANT_BOOL Value );
    long AddCustom (
        VARIANT_BOOL IsHorizontal );
    IAxisPtr GetCustom (
        long CustomAxisIndex );
    long GetCustomCount ( );
    HRESULT RemoveCustom (
        long CustomAxisIndex );
    HRESULT RemoveAllCustom ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ struct IAxis * * Left ) = 0;
      virtual HRESULT __stdcall get_Right (
        /*[out,retval]*/ struct IAxis * * Right ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ struct IAxis * * Top ) = 0;
      virtual HRESULT __stdcall get_Bottom (
        /*[out,retval]*/ struct IAxis * * Bottom ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall get_Depth (
        /*[out,retval]*/ struct IAxis * * Value ) = 0;
      virtual HRESULT __stdcall get_DrawAxesBeforeSeries (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_DrawAxesBeforeSeries (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_AddCustom (
        /*[in]*/ VARIANT_BOOL IsHorizontal,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Custom (
        /*[in]*/ long CustomAxisIndex,
        /*[out,retval]*/ struct IAxis * * Value ) = 0;
      virtual HRESULT __stdcall get_CustomCount (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_RemoveCustom (
        /*[in]*/ long CustomAxisIndex ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllCustom ( ) = 0;
};

struct __declspec(uuid("b6c104a4-fb89-11d4-93c9-006008a7eed4"))
IZoom : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetZoomed))
    VARIANT_BOOL Zoomed;
    __declspec(property(get=GetPen))
    IPenPtr Pen;
    __declspec(property(get=GetEnable,put=PutEnable))
    VARIANT_BOOL Enable;
    __declspec(property(get=GetMinimumPixels,put=PutMinimumPixels))
    long MinimumPixels;
    __declspec(property(get=GetAnimated,put=PutAnimated))
    VARIANT_BOOL Animated;
    __declspec(property(get=GetAnimatedSteps,put=PutAnimatedSteps))
    long AnimatedSteps;
    __declspec(property(get=GetMouseButton,put=PutMouseButton))
    enum EMouseButton MouseButton;
    __declspec(property(get=GetDirection,put=PutDirection))
    enum ETeeZoomDirection Direction;
    __declspec(property(get=GetBrush))
    IBrushPtr Brush;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnable ( );
    void PutEnable (
        VARIANT_BOOL Enable );
    VARIANT_BOOL GetAnimated ( );
    void PutAnimated (
        VARIANT_BOOL Animated );
    long GetAnimatedSteps ( );
    void PutAnimatedSteps (
        long AnimatedSteps );
    HRESULT Undo ( );
    HRESULT ZoomRect (
        long Left,
        long Top,
        long Right,
        long Bottom );
    VARIANT_BOOL GetZoomed ( );
    IPenPtr GetPen ( );
    long GetMinimumPixels ( );
    void PutMinimumPixels (
        long Value );
    enum EMouseButton GetMouseButton ( );
    void PutMouseButton (
        enum EMouseButton Value );
    enum ETeeZoomDirection GetDirection ( );
    void PutDirection (
        enum ETeeZoomDirection Value );
    IBrushPtr GetBrush ( );
    HRESULT ZoomPercent (
        double PercentZoom );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Enable (
        /*[out,retval]*/ VARIANT_BOOL * Enable ) = 0;
      virtual HRESULT __stdcall put_Enable (
        /*[in]*/ VARIANT_BOOL Enable ) = 0;
      virtual HRESULT __stdcall get_Animated (
        /*[out,retval]*/ VARIANT_BOOL * Animated ) = 0;
      virtual HRESULT __stdcall put_Animated (
        /*[in]*/ VARIANT_BOOL Animated ) = 0;
      virtual HRESULT __stdcall get_AnimatedSteps (
        /*[out,retval]*/ long * AnimatedSteps ) = 0;
      virtual HRESULT __stdcall put_AnimatedSteps (
        /*[in]*/ long AnimatedSteps ) = 0;
      virtual HRESULT __stdcall raw_Undo ( ) = 0;
      virtual HRESULT __stdcall raw_ZoomRect (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Right,
        /*[in]*/ long Bottom ) = 0;
      virtual HRESULT __stdcall get_Zoomed (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_MinimumPixels (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_MinimumPixels (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_MouseButton (
        /*[out,retval]*/ enum EMouseButton * Value ) = 0;
      virtual HRESULT __stdcall put_MouseButton (
        /*[in]*/ enum EMouseButton Value ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ enum ETeeZoomDirection * Value ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ enum ETeeZoomDirection Value ) = 0;
      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Value ) = 0;
      virtual HRESULT __stdcall raw_ZoomPercent (
        /*[in]*/ double PercentZoom ) = 0;
};

struct __declspec(uuid("b6c104a6-fb89-11d4-93c9-006008a7eed4"))
IWall : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBrush))
    IBrushPtr Brush;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetPen))
    IPenPtr Pen;
    __declspec(property(get=GetSize,put=PutSize))
    long Size;
    __declspec(property(get=GetTransparent,put=PutTransparent))
    VARIANT_BOOL Transparent;
    __declspec(property(get=GetGradient))
    IGradientPtr Gradient;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    long Transparency;
    __declspec(property(get=GetDark3D,put=PutDark3D))
    VARIANT_BOOL Dark3D;

    //
    // Wrapper methods for error-handling
    //

    IBrushPtr GetBrush ( );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR Color );
    IPenPtr GetPen ( );
    long GetSize ( );
    void PutSize (
        long Size );
    VARIANT_BOOL GetTransparent ( );
    void PutTransparent (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetDark3D ( );
    void PutDark3D (
        VARIANT_BOOL Value );
    IGradientPtr GetGradient ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Value );
    long GetTransparency ( );
    void PutTransparency (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Brush ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * Color ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR Color ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Pen ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ long * Size ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ long Size ) = 0;
      virtual HRESULT __stdcall get_Transparent (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Transparent (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Dark3D (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Dark3D (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Gradient (
        /*[out,retval]*/ struct IGradient * * Value ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("b6c104a7-fb89-11d4-93c9-006008a7eed4"))
IWalls : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBottom))
    IWallPtr Bottom;
    __declspec(property(get=GetLeft))
    IWallPtr Left;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetBack))
    IWallPtr Back;
    __declspec(property(get=GetRight))
    IWallPtr Right;

    //
    // Wrapper methods for error-handling
    //

    IWallPtr GetBottom ( );
    IWallPtr GetLeft ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Visible );
    OLE_COLOR GetBackColor ( );
    void PutBackColor (
        OLE_COLOR BackColor );
    IWallPtr GetBack ( );
    IWallPtr GetRight ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Bottom (
        /*[out,retval]*/ struct IWall * * Bottom ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ struct IWall * * Left ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * BackColor ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR BackColor ) = 0;
      virtual HRESULT __stdcall get_Back (
        /*[out,retval]*/ struct IWall * * Value ) = 0;
      virtual HRESULT __stdcall get_Right (
        /*[out,retval]*/ struct IWall * * Value ) = 0;
};

struct __declspec(uuid("b6c104ae-fb89-11d4-93c9-006008a7eed4"))
IMarks : ITeeCustomShape
{
    //
    // Property data
    //

    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum EMarkStyle Style;
    __declspec(property(get=GetArrow))
    IPenPtr Arrow;
    __declspec(property(get=GetArrowLength,put=PutArrowLength))
    long ArrowLength;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetClip,put=PutClip))
    VARIANT_BOOL Clip;
    __declspec(property(get=GetAngle,put=PutAngle))
    long Angle;
    __declspec(property(get=GetFrame))
    IPenPtr Frame;
    __declspec(property(get=GetDrawEvery,put=PutDrawEvery))
    long DrawEvery;
    __declspec(property(get=GetPositions))
    ISeriesMarksPositionsPtr Positions;
    __declspec(property(get=GetMultiline,put=PutMultiline))
    VARIANT_BOOL Multiline;
    __declspec(property(get=GetZPosition,put=PutZPosition))
    long ZPosition;

    //
    // Wrapper methods for error-handling
    //

    IPenPtr GetArrow ( );
    long GetArrowLength ( );
    void PutArrowLength (
        long ArrowLength );
    OLE_COLOR GetBackColor ( );
    void PutBackColor (
        OLE_COLOR BackColor );
    VARIANT_BOOL GetClip ( );
    void PutClip (
        VARIANT_BOOL Clip );
    IPenPtr GetFrame ( );
    enum EMarkStyle GetStyle ( );
    void PutStyle (
        enum EMarkStyle Style );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Visible );
    ISeriesMarksPositionsPtr GetPositions ( );
    long Clicked (
        long X,
        long Y );
    long GetZPosition ( );
    void PutZPosition (
        long Value );
    long GetAngle ( );
    void PutAngle (
        long Value );
    long GetDrawEvery ( );
    void PutDrawEvery (
        long Value );
    VARIANT_BOOL GetMultiline ( );
    void PutMultiline (
        VARIANT_BOOL Value );
    HRESULT ResetPositions ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Arrow (
        /*[out,retval]*/ struct IPen * * Arrow ) = 0;
      virtual HRESULT __stdcall get_ArrowLength (
        /*[out,retval]*/ long * ArrowLength ) = 0;
      virtual HRESULT __stdcall put_ArrowLength (
        /*[in]*/ long ArrowLength ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * BackColor ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR BackColor ) = 0;
      virtual HRESULT __stdcall get_Clip (
        /*[out,retval]*/ VARIANT_BOOL * Clip ) = 0;
      virtual HRESULT __stdcall put_Clip (
        /*[in]*/ VARIANT_BOOL Clip ) = 0;
      virtual HRESULT __stdcall get_Frame (
        /*[out,retval]*/ struct IPen * * Frame ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum EMarkStyle * Style ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum EMarkStyle Style ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall get_Positions (
        /*[out,retval]*/ struct ISeriesMarksPositions * * Value ) = 0;
      virtual HRESULT __stdcall raw_Clicked (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_ZPosition (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ZPosition (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_DrawEvery (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_DrawEvery (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Multiline (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Multiline (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_ResetPositions ( ) = 0;
};

struct __declspec(uuid("b6c104bd-fb89-11d4-93c9-006008a7eed4"))
IPointer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBrush))
    IBrushPtr Brush;
    __declspec(property(get=GetDraw3D,put=PutDraw3D))
    VARIANT_BOOL Draw3D;
    __declspec(property(get=GetHorizontalSize,put=PutHorizontalSize))
    long HorizontalSize;
    __declspec(property(get=GetVerticalSize,put=PutVerticalSize))
    long VerticalSize;
    __declspec(property(get=GetInflateMargins,put=PutInflateMargins))
    VARIANT_BOOL InflateMargins;
    __declspec(property(get=GetPen))
    IPenPtr Pen;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum EPointerStyle Style;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetDark3D,put=PutDark3D))
    VARIANT_BOOL Dark3D;

    //
    // Wrapper methods for error-handling
    //

    IBrushPtr GetBrush ( );
    VARIANT_BOOL GetDraw3D ( );
    void PutDraw3D (
        VARIANT_BOOL Draw3D );
    long GetHorizontalSize ( );
    void PutHorizontalSize (
        long HorizontalSize );
    long GetVerticalSize ( );
    void PutVerticalSize (
        long VerticalSize );
    VARIANT_BOOL GetInflateMargins ( );
    void PutInflateMargins (
        VARIANT_BOOL InflateMargins );
    IPenPtr GetPen ( );
    enum EPointerStyle GetStyle ( );
    void PutStyle (
        enum EPointerStyle Style );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Visible );
    VARIANT_BOOL GetDark3D ( );
    void PutDark3D (
        VARIANT_BOOL Value );
    HRESULT DrawPointer (
        long DC,
        VARIANT_BOOL Is3D,
        long px,
        long py,
        long tmpHoriz,
        long tmpVert,
        OLE_COLOR AColor,
        enum EPointerStyle AStyle );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Brush ) = 0;
      virtual HRESULT __stdcall get_Draw3D (
        /*[out,retval]*/ VARIANT_BOOL * Draw3D ) = 0;
      virtual HRESULT __stdcall put_Draw3D (
        /*[in]*/ VARIANT_BOOL Draw3D ) = 0;
      virtual HRESULT __stdcall get_HorizontalSize (
        /*[out,retval]*/ long * HorizontalSize ) = 0;
      virtual HRESULT __stdcall put_HorizontalSize (
        /*[in]*/ long HorizontalSize ) = 0;
      virtual HRESULT __stdcall get_VerticalSize (
        /*[out,retval]*/ long * VerticalSize ) = 0;
      virtual HRESULT __stdcall put_VerticalSize (
        /*[in]*/ long VerticalSize ) = 0;
      virtual HRESULT __stdcall get_InflateMargins (
        /*[out,retval]*/ VARIANT_BOOL * InflateMargins ) = 0;
      virtual HRESULT __stdcall put_InflateMargins (
        /*[in]*/ VARIANT_BOOL InflateMargins ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Pen ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum EPointerStyle * Style ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum EPointerStyle Style ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall get_Dark3D (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Dark3D (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_DrawPointer (
        /*[in]*/ long DC,
        /*[in]*/ VARIANT_BOOL Is3D,
        /*[in]*/ long px,
        /*[in]*/ long py,
        /*[in]*/ long tmpHoriz,
        /*[in]*/ long tmpVert,
        /*[in]*/ OLE_COLOR AColor,
        /*[in]*/ enum EPointerStyle AStyle ) = 0;
};

struct __declspec(uuid("b6c104be-fb89-11d4-93c9-006008a7eed4"))
ICustomSeries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPointer))
    IPointerPtr Pointer;
    __declspec(property(get=GetStairs,put=PutStairs))
    VARIANT_BOOL Stairs;
    __declspec(property(get=GetInvertedStairs,put=PutInvertedStairs))
    VARIANT_BOOL InvertedStairs;
    __declspec(property(get=GetLinePen))
    IPenPtr LinePen;
    __declspec(property(get=GetLineBrush,put=PutLineBrush))
    enum EBrushStyle LineBrush;
    __declspec(property(get=GetClickableLine,put=PutClickableLine))
    VARIANT_BOOL ClickableLine;
    __declspec(property(get=GetOutline))
    IPenPtr Outline;
    __declspec(property(get=GetDark3D,put=PutDark3D))
    VARIANT_BOOL Dark3D;
    __declspec(property(get=GetBrush))
    IBrushPtr Brush;
    __declspec(property(get=GetLineHeight,put=PutLineHeight))
    long LineHeight;
    __declspec(property(get=GetColorEachLine,put=PutColorEachLine))
    VARIANT_BOOL ColorEachLine;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    long Transparency;

    //
    // Wrapper methods for error-handling
    //

    IPointerPtr GetPointer ( );
    VARIANT_BOOL GetStairs ( );
    void PutStairs (
        VARIANT_BOOL Stairs );
    VARIANT_BOOL GetInvertedStairs ( );
    void PutInvertedStairs (
        VARIANT_BOOL InvertedStairs );
    IPenPtr GetLinePen ( );
    enum EBrushStyle GetLineBrush ( );
    void PutLineBrush (
        enum EBrushStyle LineBrush );
    VARIANT_BOOL GetClickableLine ( );
    void PutClickableLine (
        VARIANT_BOOL ClickableLine );
    long GetLineHeight ( );
    void PutLineHeight (
        long Value );
    VARIANT_BOOL GetDark3D ( );
    void PutDark3D (
        VARIANT_BOOL Value );
    IBrushPtr GetBrush ( );
    VARIANT_BOOL GetColorEachLine ( );
    void PutColorEachLine (
        VARIANT_BOOL Value );
    IPenPtr GetOutline ( );
    long GetTransparency ( );
    void PutTransparency (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Pointer (
        /*[out,retval]*/ struct IPointer * * Pointer ) = 0;
      virtual HRESULT __stdcall get_Stairs (
        /*[out,retval]*/ VARIANT_BOOL * Stairs ) = 0;
      virtual HRESULT __stdcall put_Stairs (
        /*[in]*/ VARIANT_BOOL Stairs ) = 0;
      virtual HRESULT __stdcall get_InvertedStairs (
        /*[out,retval]*/ VARIANT_BOOL * InvertedStairs ) = 0;
      virtual HRESULT __stdcall put_InvertedStairs (
        /*[in]*/ VARIANT_BOOL InvertedStairs ) = 0;
      virtual HRESULT __stdcall get_LinePen (
        /*[out,retval]*/ struct IPen * * LinePen ) = 0;
      virtual HRESULT __stdcall get_LineBrush (
        /*[out,retval]*/ enum EBrushStyle * LineBrush ) = 0;
      virtual HRESULT __stdcall put_LineBrush (
        /*[in]*/ enum EBrushStyle LineBrush ) = 0;
      virtual HRESULT __stdcall get_ClickableLine (
        /*[out,retval]*/ VARIANT_BOOL * ClickableLine ) = 0;
      virtual HRESULT __stdcall put_ClickableLine (
        /*[in]*/ VARIANT_BOOL ClickableLine ) = 0;
      virtual HRESULT __stdcall get_LineHeight (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_LineHeight (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Dark3D (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Dark3D (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Value ) = 0;
      virtual HRESULT __stdcall get_ColorEachLine (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ColorEachLine (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Outline (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("b6c104bf-fb89-11d4-93c9-006008a7eed4"))
IAreaSeries : ICustomSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetUseYOrigin,put=PutUseYOrigin))
    VARIANT_BOOL UseYOrigin;
    __declspec(property(get=GetYOrigin,put=PutYOrigin))
    double YOrigin;
    __declspec(property(get=GetAreaBrush,put=PutAreaBrush))
    enum EBrushStyle AreaBrush;
    __declspec(property(get=GetAreaPen))
    IPenPtr AreaPen;
    __declspec(property(get=GetMultiArea,put=PutMultiArea))
    enum EMultiArea MultiArea;

    //
    // Wrapper methods for error-handling
    //

    enum EBrushStyle GetAreaBrush ( );
    void PutAreaBrush (
        enum EBrushStyle AreaBrush );
    IPenPtr GetAreaPen ( );
    enum EMultiArea GetMultiArea ( );
    void PutMultiArea (
        enum EMultiArea MultiArea );
    long GetOriginPos (
        long AValueIndex );
    VARIANT_BOOL GetUseYOrigin ( );
    void PutUseYOrigin (
        VARIANT_BOOL Value );
    double GetYOrigin ( );
    void PutYOrigin (
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AreaBrush (
        /*[out,retval]*/ enum EBrushStyle * AreaBrush ) = 0;
      virtual HRESULT __stdcall put_AreaBrush (
        /*[in]*/ enum EBrushStyle AreaBrush ) = 0;
      virtual HRESULT __stdcall get_AreaPen (
        /*[out,retval]*/ struct IPen * * AreaPen ) = 0;
      virtual HRESULT __stdcall get_MultiArea (
        /*[out,retval]*/ enum EMultiArea * MultiArea ) = 0;
      virtual HRESULT __stdcall put_MultiArea (
        /*[in]*/ enum EMultiArea MultiArea ) = 0;
      virtual HRESULT __stdcall raw_GetOriginPos (
        /*[in]*/ long AValueIndex,
        /*[out,retval]*/ long * ValueIndex ) = 0;
      virtual HRESULT __stdcall get_UseYOrigin (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_UseYOrigin (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_YOrigin (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_YOrigin (
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("b6c104c0-fb89-11d4-93c9-006008a7eed4"))
IPointSeries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPointer))
    IPointerPtr Pointer;
    __declspec(property(get=GetDark3D,put=PutDark3D))
    VARIANT_BOOL Dark3D;

    //
    // Wrapper methods for error-handling
    //

    IPointerPtr GetPointer ( );
    VARIANT_BOOL GetDark3D ( );
    void PutDark3D (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Pointer (
        /*[out,retval]*/ struct IPointer * * Pointer ) = 0;
      virtual HRESULT __stdcall get_Dark3D (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Dark3D (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("b6c104c1-fb89-11d4-93c9-006008a7eed4"))
ILineSeries : ICustomSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetStacked,put=PutStacked))
    enum ECustomSeriesStack Stacked;

    //
    // Wrapper methods for error-handling
    //

    enum ECustomSeriesStack GetStacked ( );
    void PutStacked (
        enum ECustomSeriesStack Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Stacked (
        /*[out,retval]*/ enum ECustomSeriesStack * Value ) = 0;
      virtual HRESULT __stdcall put_Stacked (
        /*[in]*/ enum ECustomSeriesStack Value ) = 0;
};

struct __declspec(uuid("b6c104c2-fb89-11d4-93c9-006008a7eed4"))
IFastLineSeries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLinePen))
    IPenPtr LinePen;
    __declspec(property(get=GetDrawAllPoints,put=PutDrawAllPoints))
    VARIANT_BOOL DrawAllPoints;

    //
    // Wrapper methods for error-handling
    //

    IPenPtr GetLinePen ( );
    long AddRealTime (
        double X,
        double Y,
        _bstr_t SomeLabel,
        OLE_COLOR SomeColor );
    VARIANT_BOOL GetDrawAllPoints ( );
    void PutDrawAllPoints (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LinePen (
        /*[out,retval]*/ struct IPen * * LinePen ) = 0;
      virtual HRESULT __stdcall raw_AddRealTime (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        BSTR SomeLabel,
        OLE_COLOR SomeColor,
        /*[out,retval]*/ long * AColor ) = 0;
      virtual HRESULT __stdcall get_DrawAllPoints (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_DrawAllPoints (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("b6c104c5-fb89-11d4-93c9-006008a7eed4"))
IBubbleSeries : IPointSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetRadiusValues))
    IValueListPtr RadiusValues;
    __declspec(property(get=GetSquared,put=PutSquared))
    VARIANT_BOOL Squared;

    //
    // Wrapper methods for error-handling
    //

    IValueListPtr GetRadiusValues ( );
    VARIANT_BOOL GetSquared ( );
    void PutSquared (
        VARIANT_BOOL Squared );
    long AddBubble (
        double AX,
        double AY,
        double ARadius,
        _bstr_t AXLabel,
        OLE_COLOR Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RadiusValues (
        /*[out,retval]*/ struct IValueList * * RadiusValues ) = 0;
      virtual HRESULT __stdcall get_Squared (
        /*[out,retval]*/ VARIANT_BOOL * Squared ) = 0;
      virtual HRESULT __stdcall put_Squared (
        /*[in]*/ VARIANT_BOOL Squared ) = 0;
      virtual HRESULT __stdcall raw_AddBubble (
        /*[in]*/ double AX,
        /*[in]*/ double AY,
        /*[in]*/ double ARadius,
        /*[in]*/ BSTR AXLabel,
        /*[in]*/ OLE_COLOR Value,
        /*[out,retval]*/ long * AColor ) = 0;
};

struct __declspec(uuid("b6c104c7-fb89-11d4-93c9-006008a7eed4"))
IGanttSeries : IPointSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetStartValues))
    IValueListPtr StartValues;
    __declspec(property(get=GetNextTask))
    IValueListPtr NextTask;
    __declspec(property(get=GetConnectingPen))
    IPenPtr ConnectingPen;
    __declspec(property(get=GetEndValues))
    IValueListPtr EndValues;

    //
    // Wrapper methods for error-handling
    //

    IPenPtr GetConnectingPen ( );
    IValueListPtr GetEndValues ( );
    IValueListPtr GetStartValues ( );
    IValueListPtr GetNextTask ( );
    long AddGantt (
        double AStart,
        double AEnd,
        double AY,
        _bstr_t SomeLabel );
    long AddGanttColor (
        double AStart,
        double AEnd,
        double AY,
        _bstr_t AXLabel,
        OLE_COLOR Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ConnectingPen (
        /*[out,retval]*/ struct IPen * * ConnectingPen ) = 0;
      virtual HRESULT __stdcall get_EndValues (
        /*[out,retval]*/ struct IValueList * * EndValues ) = 0;
      virtual HRESULT __stdcall get_StartValues (
        /*[out,retval]*/ struct IValueList * * StartValues ) = 0;
      virtual HRESULT __stdcall get_NextTask (
        /*[out,retval]*/ struct IValueList * * NextTask ) = 0;
      virtual HRESULT __stdcall raw_AddGantt (
        /*[in]*/ double AStart,
        /*[in]*/ double AEnd,
        /*[in]*/ double AY,
        /*[in]*/ BSTR SomeLabel,
        /*[out,retval]*/ long * AXLabel ) = 0;
      virtual HRESULT __stdcall raw_AddGanttColor (
        /*[in]*/ double AStart,
        /*[in]*/ double AEnd,
        /*[in]*/ double AY,
        /*[in]*/ BSTR AXLabel,
        /*[in]*/ OLE_COLOR Value,
        /*[out,retval]*/ long * AColor ) = 0;
};

struct __declspec(uuid("b6c104c8-fb89-11d4-93c9-006008a7eed4"))
IShapeSeries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAlignment,put=PutAlignment))
    enum ETextAlignment Alignment;
    __declspec(property(get=GetBrush))
    IBrushPtr Brush;
    __declspec(property(get=GetFont))
    IChartFontPtr Font;
    __declspec(property(get=GetPen))
    IPenPtr Pen;
    __declspec(property(get=GetRoundRectangle,put=PutRoundRectangle))
    VARIANT_BOOL RoundRectangle;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum EShapeStyle Style;
    __declspec(property(get=GetText))
    IStringsPtr Text;
    __declspec(property(get=GetTransparent,put=PutTransparent))
    VARIANT_BOOL Transparent;
    __declspec(property(get=GetX0,put=PutX0))
    double X0;
    __declspec(property(get=GetX1,put=PutX1))
    double X1;
    __declspec(property(get=GetXYStyle,put=PutXYStyle))
    enum EShapeXYStyle XYStyle;
    __declspec(property(get=GetY0,put=PutY0))
    double Y0;
    __declspec(property(get=GetY1,put=PutY1))
    double Y1;
    __declspec(property(get=GetVertAlign,put=PutVertAlign))
    enum ETeeVertAlign VertAlign;
    __declspec(property(get=GetGradient))
    IGradientPtr Gradient;

    //
    // Wrapper methods for error-handling
    //

    enum ETextAlignment GetAlignment ( );
    void PutAlignment (
        enum ETextAlignment Alignment );
    IBrushPtr GetBrush ( );
    IChartFontPtr GetFont ( );
    IPenPtr GetPen ( );
    VARIANT_BOOL GetRoundRectangle ( );
    void PutRoundRectangle (
        VARIANT_BOOL RoundRectangle );
    enum EShapeStyle GetStyle ( );
    void PutStyle (
        enum EShapeStyle Style );
    IStringsPtr GetText ( );
    VARIANT_BOOL GetTransparent ( );
    void PutTransparent (
        VARIANT_BOOL Transparent );
    double GetX0 ( );
    void PutX0 (
        double X0 );
    double GetX1 ( );
    void PutX1 (
        double X1 );
    enum EShapeXYStyle GetXYStyle ( );
    void PutXYStyle (
        enum EShapeXYStyle XYStyle );
    double GetY0 ( );
    void PutY0 (
        double Y0 );
    double GetY1 ( );
    void PutY1 (
        double Y1 );
    HRESULT ShapeImageLoad (
        _bstr_t FileName );
    HRESULT ShapeImageClear ( );
    enum ETeeVertAlign GetVertAlign ( );
    void PutVertAlign (
        enum ETeeVertAlign Value );
    IGradientPtr GetGradient ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ enum ETextAlignment * Alignment ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ enum ETextAlignment Alignment ) = 0;
      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Brush ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct IChartFont * * Font ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Pen ) = 0;
      virtual HRESULT __stdcall get_RoundRectangle (
        /*[out,retval]*/ VARIANT_BOOL * RoundRectangle ) = 0;
      virtual HRESULT __stdcall put_RoundRectangle (
        /*[in]*/ VARIANT_BOOL RoundRectangle ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum EShapeStyle * Style ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum EShapeStyle Style ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ struct IStrings * * Text ) = 0;
      virtual HRESULT __stdcall get_Transparent (
        /*[out,retval]*/ VARIANT_BOOL * Transparent ) = 0;
      virtual HRESULT __stdcall put_Transparent (
        /*[in]*/ VARIANT_BOOL Transparent ) = 0;
      virtual HRESULT __stdcall get_X0 (
        /*[out,retval]*/ double * X0 ) = 0;
      virtual HRESULT __stdcall put_X0 (
        /*[in]*/ double X0 ) = 0;
      virtual HRESULT __stdcall get_X1 (
        /*[out,retval]*/ double * X1 ) = 0;
      virtual HRESULT __stdcall put_X1 (
        /*[in]*/ double X1 ) = 0;
      virtual HRESULT __stdcall get_XYStyle (
        /*[out,retval]*/ enum EShapeXYStyle * XYStyle ) = 0;
      virtual HRESULT __stdcall put_XYStyle (
        /*[in]*/ enum EShapeXYStyle XYStyle ) = 0;
      virtual HRESULT __stdcall get_Y0 (
        /*[out,retval]*/ double * Y0 ) = 0;
      virtual HRESULT __stdcall put_Y0 (
        /*[in]*/ double Y0 ) = 0;
      virtual HRESULT __stdcall get_Y1 (
        /*[out,retval]*/ double * Y1 ) = 0;
      virtual HRESULT __stdcall put_Y1 (
        /*[in]*/ double Y1 ) = 0;
      virtual HRESULT __stdcall raw_ShapeImageLoad (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_ShapeImageClear ( ) = 0;
      virtual HRESULT __stdcall get_VertAlign (
        /*[out,retval]*/ enum ETeeVertAlign * Value ) = 0;
      virtual HRESULT __stdcall put_VertAlign (
        /*[in]*/ enum ETeeVertAlign Value ) = 0;
      virtual HRESULT __stdcall get_Gradient (
        /*[out,retval]*/ struct IGradient * * Value ) = 0;
};

struct __declspec(uuid("b6c104c9-fb89-11d4-93c9-006008a7eed4"))
IArrowSeries : IPointSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetEndXValues))
    IValueListPtr EndXValues;
    __declspec(property(get=GetEndYValues))
    IValueListPtr EndYValues;
    __declspec(property(get=GetStartXValues))
    IValueListPtr StartXValues;
    __declspec(property(get=GetStartYValues))
    IValueListPtr StartYValues;
    __declspec(property(get=GetArrowHeight,put=PutArrowHeight))
    long ArrowHeight;
    __declspec(property(get=GetArrowWidth,put=PutArrowWidth))
    long ArrowWidth;

    //
    // Wrapper methods for error-handling
    //

    long GetArrowHeight ( );
    void PutArrowHeight (
        long ArrowHeight );
    long GetArrowWidth ( );
    void PutArrowWidth (
        long ArrowWidth );
    IValueListPtr GetEndXValues ( );
    IValueListPtr GetEndYValues ( );
    IValueListPtr GetStartXValues ( );
    IValueListPtr GetStartYValues ( );
    long AddArrow (
        double X0,
        double Y0,
        double X1,
        double Y1,
        _bstr_t ALabel,
        OLE_COLOR Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ArrowHeight (
        /*[out,retval]*/ long * ArrowHeight ) = 0;
      virtual HRESULT __stdcall put_ArrowHeight (
        /*[in]*/ long ArrowHeight ) = 0;
      virtual HRESULT __stdcall get_ArrowWidth (
        /*[out,retval]*/ long * ArrowWidth ) = 0;
      virtual HRESULT __stdcall put_ArrowWidth (
        /*[in]*/ long ArrowWidth ) = 0;
      virtual HRESULT __stdcall get_EndXValues (
        /*[out,retval]*/ struct IValueList * * EndXValues ) = 0;
      virtual HRESULT __stdcall get_EndYValues (
        /*[out,retval]*/ struct IValueList * * EndYValues ) = 0;
      virtual HRESULT __stdcall get_StartXValues (
        /*[out,retval]*/ struct IValueList * * StartXValues ) = 0;
      virtual HRESULT __stdcall get_StartYValues (
        /*[out,retval]*/ struct IValueList * * StartYValues ) = 0;
      virtual HRESULT __stdcall raw_AddArrow (
        /*[in]*/ double X0,
        /*[in]*/ double Y0,
        /*[in]*/ double X1,
        /*[in]*/ double Y1,
        /*[in]*/ BSTR ALabel,
        /*[in]*/ OLE_COLOR Value,
        /*[out,retval]*/ long * AColor ) = 0;
};

struct __declspec(uuid("b6c104ca-fb89-11d4-93c9-006008a7eed4"))
ICustomBarSeries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAutoBarSize,put=PutAutoBarSize))
    VARIANT_BOOL AutoBarSize;
    __declspec(property(get=GetStackGroup,put=PutStackGroup))
    long StackGroup;
    __declspec(property(get=GetGradient))
    IGradientPtr Gradient;
    __declspec(property(get=GetConePercent,put=PutConePercent))
    long ConePercent;
    __declspec(property(get=GetMultiBar,put=PutMultiBar))
    enum EMultiBar MultiBar;
    __declspec(property(get=GetAutoMarkPosition,put=PutAutoMarkPosition))
    VARIANT_BOOL AutoMarkPosition;
    __declspec(property(get=GetBarBrush))
    IBrushPtr BarBrush;
    __declspec(property(get=GetBarPen))
    IPenPtr BarPen;
    __declspec(property(get=GetBarStyle,put=PutBarStyle))
    enum EBarStyle BarStyle;
    __declspec(property(get=GetBarWidthPercent,put=PutBarWidthPercent))
    long BarWidthPercent;
    __declspec(property(get=GetDark3D,put=PutDark3D))
    VARIANT_BOOL Dark3D;
    __declspec(property(get=GetOffsetPercent,put=PutOffsetPercent))
    long OffsetPercent;
    __declspec(property(get=GetSideMargins,put=PutSideMargins))
    VARIANT_BOOL SideMargins;
    __declspec(property(get=GetUseOrigin,put=PutUseOrigin))
    VARIANT_BOOL UseOrigin;
    __declspec(property(get=GetOrigin,put=PutOrigin))
    double Origin;

    //
    // Wrapper methods for error-handling
    //

    enum EMultiBar GetMultiBar ( );
    void PutMultiBar (
        enum EMultiBar MultiBar );
    VARIANT_BOOL GetAutoMarkPosition ( );
    void PutAutoMarkPosition (
        VARIANT_BOOL AutoMarkPosition );
    IBrushPtr GetBarBrush ( );
    IPenPtr GetBarPen ( );
    enum EBarStyle GetBarStyle ( );
    void PutBarStyle (
        enum EBarStyle BarStyle );
    long GetBarWidthPercent ( );
    void PutBarWidthPercent (
        long BarWidthPercent );
    VARIANT_BOOL GetDark3D ( );
    void PutDark3D (
        VARIANT_BOOL Dark3D );
    long GetOffsetPercent ( );
    void PutOffsetPercent (
        long OffsetPercent );
    VARIANT_BOOL GetSideMargins ( );
    void PutSideMargins (
        VARIANT_BOOL SideMargins );
    VARIANT_BOOL GetUseOrigin ( );
    void PutUseOrigin (
        VARIANT_BOOL UseOrigin );
    double GetOrigin ( );
    void PutOrigin (
        double Origin );
    long GetOriginPos (
        long SomeValueIndex );
    VARIANT_BOOL GetAutoBarSize ( );
    void PutAutoBarSize (
        VARIANT_BOOL Value );
    HRESULT BarImageLoad (
        _bstr_t FileName );
    HRESULT BarImageClear ( );
    IGradientPtr GetGradient ( );
    long GetStackGroup ( );
    void PutStackGroup (
        long Value );
    long GetConePercent ( );
    void PutConePercent (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MultiBar (
        /*[out,retval]*/ enum EMultiBar * MultiBar ) = 0;
      virtual HRESULT __stdcall put_MultiBar (
        /*[in]*/ enum EMultiBar MultiBar ) = 0;
      virtual HRESULT __stdcall get_AutoMarkPosition (
        /*[out,retval]*/ VARIANT_BOOL * AutoMarkPosition ) = 0;
      virtual HRESULT __stdcall put_AutoMarkPosition (
        /*[in]*/ VARIANT_BOOL AutoMarkPosition ) = 0;
      virtual HRESULT __stdcall get_BarBrush (
        /*[out,retval]*/ struct IBrush * * BarBrush ) = 0;
      virtual HRESULT __stdcall get_BarPen (
        /*[out,retval]*/ struct IPen * * BarPen ) = 0;
      virtual HRESULT __stdcall get_BarStyle (
        /*[out,retval]*/ enum EBarStyle * BarStyle ) = 0;
      virtual HRESULT __stdcall put_BarStyle (
        /*[in]*/ enum EBarStyle BarStyle ) = 0;
      virtual HRESULT __stdcall get_BarWidthPercent (
        /*[out,retval]*/ long * BarWidthPercent ) = 0;
      virtual HRESULT __stdcall put_BarWidthPercent (
        /*[in]*/ long BarWidthPercent ) = 0;
      virtual HRESULT __stdcall get_Dark3D (
        /*[out,retval]*/ VARIANT_BOOL * Dark3D ) = 0;
      virtual HRESULT __stdcall put_Dark3D (
        /*[in]*/ VARIANT_BOOL Dark3D ) = 0;
      virtual HRESULT __stdcall get_OffsetPercent (
        /*[out,retval]*/ long * OffsetPercent ) = 0;
      virtual HRESULT __stdcall put_OffsetPercent (
        /*[in]*/ long OffsetPercent ) = 0;
      virtual HRESULT __stdcall get_SideMargins (
        /*[out,retval]*/ VARIANT_BOOL * SideMargins ) = 0;
      virtual HRESULT __stdcall put_SideMargins (
        /*[in]*/ VARIANT_BOOL SideMargins ) = 0;
      virtual HRESULT __stdcall get_UseOrigin (
        /*[out,retval]*/ VARIANT_BOOL * UseOrigin ) = 0;
      virtual HRESULT __stdcall put_UseOrigin (
        /*[in]*/ VARIANT_BOOL UseOrigin ) = 0;
      virtual HRESULT __stdcall get_Origin (
        /*[out,retval]*/ double * Origin ) = 0;
      virtual HRESULT __stdcall put_Origin (
        /*[in]*/ double Origin ) = 0;
      virtual HRESULT __stdcall raw_GetOriginPos (
        /*[in]*/ long SomeValueIndex,
        /*[out,retval]*/ long * ValueIndex ) = 0;
      virtual HRESULT __stdcall get_AutoBarSize (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AutoBarSize (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_BarImageLoad (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_BarImageClear ( ) = 0;
      virtual HRESULT __stdcall get_Gradient (
        /*[out,retval]*/ struct IGradient * * Value ) = 0;
      virtual HRESULT __stdcall get_StackGroup (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_StackGroup (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_ConePercent (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ConePercent (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("b6c104cb-fb89-11d4-93c9-006008a7eed4"))
IBarSeries : ICustomBarSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetBarWidth,put=PutBarWidth))
    long BarWidth;

    //
    // Wrapper methods for error-handling
    //

    long GetBarWidth ( );
    void PutBarWidth (
        long BarWidth );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BarWidth (
        /*[out,retval]*/ long * BarWidth ) = 0;
      virtual HRESULT __stdcall put_BarWidth (
        /*[in]*/ long BarWidth ) = 0;
};

struct __declspec(uuid("b6c104db-fb89-11d4-93c9-006008a7eed4"))
IHorizBarSeries : ICustomBarSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetBarHeight,put=PutBarHeight))
    long BarHeight;

    //
    // Wrapper methods for error-handling
    //

    long GetBarHeight ( );
    void PutBarHeight (
        long BarHeight );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BarHeight (
        /*[out,retval]*/ long * BarHeight ) = 0;
      virtual HRESULT __stdcall put_BarHeight (
        /*[in]*/ long BarHeight ) = 0;
};

struct __declspec(uuid("b6c104dc-fb89-11d4-93c9-006008a7eed4"))
ICandleSeries : IPointSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetHighValues))
    IValueListPtr HighValues;
    __declspec(property(get=GetLowValues))
    IValueListPtr LowValues;
    __declspec(property(get=GetOpenValues))
    IValueListPtr OpenValues;
    __declspec(property(get=GetCandleStyle,put=PutCandleStyle))
    enum ECandleStyle CandleStyle;
    __declspec(property(get=GetCandleWidth,put=PutCandleWidth))
    long CandleWidth;
    __declspec(property(get=GetDownCloseColor,put=PutDownCloseColor))
    OLE_COLOR DownCloseColor;
    __declspec(property(get=GetShowCloseTick,put=PutShowCloseTick))
    VARIANT_BOOL ShowCloseTick;
    __declspec(property(get=GetShowOpenTick,put=PutShowOpenTick))
    VARIANT_BOOL ShowOpenTick;
    __declspec(property(get=GetUpCloseColor,put=PutUpCloseColor))
    OLE_COLOR UpCloseColor;
    __declspec(property(get=GetCloseValues))
    IValueListPtr CloseValues;
    __declspec(property(get=GetDateValues))
    IValueListPtr DateValues;

    //
    // Wrapper methods for error-handling
    //

    enum ECandleStyle GetCandleStyle ( );
    void PutCandleStyle (
        enum ECandleStyle CandleStyle );
    long GetCandleWidth ( );
    void PutCandleWidth (
        long CandleWidth );
    IValueListPtr GetCloseValues ( );
    IValueListPtr GetDateValues ( );
    OLE_COLOR GetDownCloseColor ( );
    void PutDownCloseColor (
        OLE_COLOR Value );
    IValueListPtr GetHighValues ( );
    IValueListPtr GetLowValues ( );
    IValueListPtr GetOpenValues ( );
    VARIANT_BOOL GetShowCloseTick ( );
    void PutShowCloseTick (
        VARIANT_BOOL ShowCloseTick );
    VARIANT_BOOL GetShowOpenTick ( );
    void PutShowOpenTick (
        VARIANT_BOOL ShowOpenTick );
    OLE_COLOR GetUpCloseColor ( );
    void PutUpCloseColor (
        OLE_COLOR Value );
    long AddCandle (
        double DateValue,
        double OpenValue,
        double HighValue,
        double LowValue,
        double CloseValue );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CandleStyle (
        /*[out,retval]*/ enum ECandleStyle * CandleStyle ) = 0;
      virtual HRESULT __stdcall put_CandleStyle (
        /*[in]*/ enum ECandleStyle CandleStyle ) = 0;
      virtual HRESULT __stdcall get_CandleWidth (
        /*[out,retval]*/ long * CandleWidth ) = 0;
      virtual HRESULT __stdcall put_CandleWidth (
        /*[in]*/ long CandleWidth ) = 0;
      virtual HRESULT __stdcall get_CloseValues (
        /*[out,retval]*/ struct IValueList * * CloseValues ) = 0;
      virtual HRESULT __stdcall get_DateValues (
        /*[out,retval]*/ struct IValueList * * DateValues ) = 0;
      virtual HRESULT __stdcall get_DownCloseColor (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_DownCloseColor (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_HighValues (
        /*[out,retval]*/ struct IValueList * * HighValues ) = 0;
      virtual HRESULT __stdcall get_LowValues (
        /*[out,retval]*/ struct IValueList * * LowValues ) = 0;
      virtual HRESULT __stdcall get_OpenValues (
        /*[out,retval]*/ struct IValueList * * OpenValues ) = 0;
      virtual HRESULT __stdcall get_ShowCloseTick (
        /*[out,retval]*/ VARIANT_BOOL * ShowCloseTick ) = 0;
      virtual HRESULT __stdcall put_ShowCloseTick (
        /*[in]*/ VARIANT_BOOL ShowCloseTick ) = 0;
      virtual HRESULT __stdcall get_ShowOpenTick (
        /*[out,retval]*/ VARIANT_BOOL * ShowOpenTick ) = 0;
      virtual HRESULT __stdcall put_ShowOpenTick (
        /*[in]*/ VARIANT_BOOL ShowOpenTick ) = 0;
      virtual HRESULT __stdcall get_UpCloseColor (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_UpCloseColor (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall raw_AddCandle (
        /*[in]*/ double DateValue,
        /*[in]*/ double OpenValue,
        /*[in]*/ double HighValue,
        /*[in]*/ double LowValue,
        /*[in]*/ double CloseValue,
        /*[out,retval]*/ long * AClose ) = 0;
};

struct __declspec(uuid("b6c104de-fb89-11d4-93c9-006008a7eed4"))
ICustom3DSeries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBrush))
    IBrushPtr Brush;
    __declspec(property(get=GetZValue,put=PutZValue))
    double ZValue[];
    __declspec(property(get=GetPen))
    IPenPtr Pen;
    __declspec(property(get=GetTimesZOrder,put=PutTimesZOrder))
    long TimesZOrder;
    __declspec(property(get=GetZValues))
    IValueListPtr ZValues;

    //
    // Wrapper methods for error-handling
    //

    long AddXYZ (
        double AX,
        double AY,
        double AZ,
        _bstr_t AXLabel,
        OLE_COLOR Value );
    double MaxZValue ( );
    double MinZValue ( );
    long GetTimesZOrder ( );
    void PutTimesZOrder (
        long TimesZOrder );
    IValueListPtr GetZValues ( );
    double GetZValue (
        long Index );
    void PutZValue (
        long Index,
        double Value );
    IBrushPtr GetBrush ( );
    IPenPtr GetPen ( );
    HRESULT AddArrayXYZ (
        const _variant_t & XArray,
        const _variant_t & YArray,
        const _variant_t & ZArray );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddXYZ (
        /*[in]*/ double AX,
        /*[in]*/ double AY,
        /*[in]*/ double AZ,
        /*[in]*/ BSTR AXLabel,
        /*[in]*/ OLE_COLOR Value,
        /*[out,retval]*/ long * AColor ) = 0;
      virtual HRESULT __stdcall raw_MaxZValue (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_MinZValue (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall get_TimesZOrder (
        /*[out,retval]*/ long * TimesZOrder ) = 0;
      virtual HRESULT __stdcall put_TimesZOrder (
        /*[in]*/ long TimesZOrder ) = 0;
      virtual HRESULT __stdcall get_ZValues (
        /*[out,retval]*/ struct IValueList * * ZValues ) = 0;
      virtual HRESULT __stdcall get_ZValue (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_ZValue (
        /*[in]*/ long Index,
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Brush ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Pen ) = 0;
      virtual HRESULT __stdcall raw_AddArrayXYZ (
        /*[in]*/ VARIANT XArray,
        /*[in]*/ VARIANT YArray,
        /*[in]*/ VARIANT ZArray ) = 0;
};

struct __declspec(uuid("b6c104df-fb89-11d4-93c9-006008a7eed4"))
IErrorBarSeries : IBarSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetErrorPen))
    IPenPtr ErrorPen;
    __declspec(property(get=GetErrorValues))
    IValueListPtr ErrorValues;
    __declspec(property(get=GetErrorWidth,put=PutErrorWidth))
    long ErrorWidth;
    __declspec(property(get=GetErrorWidthUnits,put=PutErrorWidthUnits))
    enum EErrorWidthUnits ErrorWidthUnits;

    //
    // Wrapper methods for error-handling
    //

    IPenPtr GetErrorPen ( );
    IValueListPtr GetErrorValues ( );
    long GetErrorWidth ( );
    void PutErrorWidth (
        long ErrorWidth );
    enum EErrorWidthUnits GetErrorWidthUnits ( );
    void PutErrorWidthUnits (
        enum EErrorWidthUnits ErrorWidthUnits );
    long AddErrorBar (
        double AX,
        double AY,
        double AError,
        _bstr_t AXLabel,
        OLE_COLOR Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ErrorPen (
        /*[out,retval]*/ struct IPen * * ErrorPen ) = 0;
      virtual HRESULT __stdcall get_ErrorValues (
        /*[out,retval]*/ struct IValueList * * ErrorValues ) = 0;
      virtual HRESULT __stdcall get_ErrorWidth (
        /*[out,retval]*/ long * ErrorWidth ) = 0;
      virtual HRESULT __stdcall put_ErrorWidth (
        /*[in]*/ long ErrorWidth ) = 0;
      virtual HRESULT __stdcall get_ErrorWidthUnits (
        /*[out,retval]*/ enum EErrorWidthUnits * ErrorWidthUnits ) = 0;
      virtual HRESULT __stdcall put_ErrorWidthUnits (
        /*[in]*/ enum EErrorWidthUnits ErrorWidthUnits ) = 0;
      virtual HRESULT __stdcall raw_AddErrorBar (
        /*[in]*/ double AX,
        /*[in]*/ double AY,
        /*[in]*/ double AError,
        /*[in]*/ BSTR AXLabel,
        /*[in]*/ OLE_COLOR Value,
        /*[out,retval]*/ long * AColor ) = 0;
};

struct __declspec(uuid("b6c104e0-fb89-11d4-93c9-006008a7eed4"))
IVolumeSeries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUseYOrigin,put=PutUseYOrigin))
    VARIANT_BOOL UseYOrigin;
    __declspec(property(get=GetYOrigin,put=PutYOrigin))
    double YOrigin;
    __declspec(property(get=GetLinePen))
    IPenPtr LinePen;
    __declspec(property(get=GetVolumeValues))
    IValueListPtr VolumeValues;

    //
    // Wrapper methods for error-handling
    //

    IValueListPtr GetVolumeValues ( );
    IPenPtr GetLinePen ( );
    VARIANT_BOOL GetUseYOrigin ( );
    void PutUseYOrigin (
        VARIANT_BOOL Value );
    double GetYOrigin ( );
    void PutYOrigin (
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_VolumeValues (
        /*[out,retval]*/ struct IValueList * * VolumeValues ) = 0;
      virtual HRESULT __stdcall get_LinePen (
        /*[out,retval]*/ struct IPen * * LinePen ) = 0;
      virtual HRESULT __stdcall get_UseYOrigin (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_UseYOrigin (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_YOrigin (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_YOrigin (
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("b6c10502-fb89-11d4-93c9-006008a7eed4"))
ICustom3DPaletteSeries : ICustom3DSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetMidColor,put=PutMidColor))
    OLE_COLOR MidColor;
    __declspec(property(get=GetPaletteStyle,put=PutPaletteStyle))
    enum EPaletteStyle PaletteStyle;
    __declspec(property(get=GetEndColor,put=PutEndColor))
    OLE_COLOR EndColor;
    __declspec(property(get=GetPaletteSteps,put=PutPaletteSteps))
    long PaletteSteps;
    __declspec(property(get=GetStartColor,put=PutStartColor))
    OLE_COLOR StartColor;
    __declspec(property(get=GetUseColorRange,put=PutUseColorRange))
    VARIANT_BOOL UseColorRange;
    __declspec(property(get=GetUsePalette,put=PutUsePalette))
    VARIANT_BOOL UsePalette;

    //
    // Wrapper methods for error-handling
    //

    long AddPalette (
        double Value,
        OLE_COLOR Color );
    OLE_COLOR GetStartColor ( );
    void PutStartColor (
        OLE_COLOR Value );
    OLE_COLOR GetEndColor ( );
    void PutEndColor (
        OLE_COLOR Value );
    long GetPaletteSteps ( );
    void PutPaletteSteps (
        long Value );
    VARIANT_BOOL GetUsePalette ( );
    void PutUsePalette (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetUseColorRange ( );
    void PutUseColorRange (
        VARIANT_BOOL Value );
    HRESULT ClearPalette ( );
    HRESULT CreateDefaultPalette (
        long NumSteps );
    OLE_COLOR GetSurfacePaletteColor (
        double Y );
    OLE_COLOR GetMidColor ( );
    void PutMidColor (
        OLE_COLOR Value );
    HRESULT CreateRangePalette ( );
    enum EPaletteStyle GetPaletteStyle ( );
    void PutPaletteStyle (
        enum EPaletteStyle Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddPalette (
        /*[in]*/ double Value,
        /*[in]*/ OLE_COLOR Color,
        /*[out,retval]*/ long * Value1 ) = 0;
      virtual HRESULT __stdcall get_StartColor (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_StartColor (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_EndColor (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_EndColor (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_PaletteSteps (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_PaletteSteps (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_UsePalette (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_UsePalette (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_UseColorRange (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_UseColorRange (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_ClearPalette ( ) = 0;
      virtual HRESULT __stdcall raw_CreateDefaultPalette (
        /*[in]*/ long NumSteps ) = 0;
      virtual HRESULT __stdcall raw_GetSurfacePaletteColor (
        /*[in]*/ double Y,
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall get_MidColor (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_MidColor (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall raw_CreateRangePalette ( ) = 0;
      virtual HRESULT __stdcall get_PaletteStyle (
        /*[out,retval]*/ enum EPaletteStyle * Value ) = 0;
      virtual HRESULT __stdcall put_PaletteStyle (
        /*[in]*/ enum EPaletteStyle Value ) = 0;
};

struct __declspec(uuid("b6c10503-fb89-11d4-93c9-006008a7eed4"))
ICustom3DGridSeries : ICustom3DPaletteSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetNumXValues,put=PutNumXValues))
    long NumXValues;
    __declspec(property(get=GetNumZValues,put=PutNumZValues))
    long NumZValues;
    __declspec(property(get=GetIrregularGrid,put=PutIrregularGrid))
    VARIANT_BOOL IrregularGrid;

    //
    // Wrapper methods for error-handling
    //

    long GetNumXValues ( );
    void PutNumXValues (
        long Value );
    long GetNumZValues ( );
    void PutNumZValues (
        long Value );
    double GetXZValue (
        long X,
        long Z );
    VARIANT_BOOL GetIrregularGrid ( );
    void PutIrregularGrid (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumXValues (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_NumXValues (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_NumZValues (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_NumZValues (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_GetXZValue (
        /*[in]*/ long X,
        /*[in]*/ long Z,
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall get_IrregularGrid (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_IrregularGrid (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("b6c10504-fb89-11d4-93c9-006008a7eed4"))
IBezierSeries : ICustomSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetBezierStyle,put=PutBezierStyle))
    enum EBezierStyle BezierStyle;
    __declspec(property(get=GetNumBezierPoints,put=PutNumBezierPoints))
    long NumBezierPoints;

    //
    // Wrapper methods for error-handling
    //

    long GetNumBezierPoints ( );
    void PutNumBezierPoints (
        long Value );
    enum EBezierStyle GetBezierStyle ( );
    void PutBezierStyle (
        enum EBezierStyle Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumBezierPoints (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_NumBezierPoints (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_BezierStyle (
        /*[out,retval]*/ enum EBezierStyle * Value ) = 0;
      virtual HRESULT __stdcall put_BezierStyle (
        /*[in]*/ enum EBezierStyle Value ) = 0;
};

struct __declspec(uuid("b6c10506-fb89-11d4-93c9-006008a7eed4"))
IErrorSeries : IErrorBarSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetErrorStyle,put=PutErrorStyle))
    enum EErrorSeriesStyle ErrorStyle;

    //
    // Wrapper methods for error-handling
    //

    enum EErrorSeriesStyle GetErrorStyle ( );
    void PutErrorStyle (
        enum EErrorSeriesStyle Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ErrorStyle (
        /*[out,retval]*/ enum EErrorSeriesStyle * Value ) = 0;
      virtual HRESULT __stdcall put_ErrorStyle (
        /*[in]*/ enum EErrorSeriesStyle Value ) = 0;
};

struct __declspec(uuid("b6c10507-fb89-11d4-93c9-006008a7eed4"))
IPoint3DSeries : ICustom3DSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetLinePen))
    IPenPtr LinePen;
    __declspec(property(get=GetDepthSize,put=PutDepthSize))
    double DepthSize;
    __declspec(property(get=GetPointer))
    IPointerPtr Pointer;

    //
    // Wrapper methods for error-handling
    //

    double GetDepthSize ( );
    void PutDepthSize (
        double Value );
    IPointerPtr GetPointer ( );
    IPenPtr GetLinePen ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DepthSize (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_DepthSize (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_Pointer (
        /*[out,retval]*/ struct IPointer * * Value ) = 0;
      virtual HRESULT __stdcall get_LinePen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
};

struct __declspec(uuid("b6c10508-fb89-11d4-93c9-006008a7eed4"))
ISurfaceSeries : ICustom3DGridSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetSideBrush))
    IBrushPtr SideBrush;
    __declspec(property(get=GetDotFrame,put=PutDotFrame))
    VARIANT_BOOL DotFrame;
    __declspec(property(get=GetWireFrame,put=PutWireFrame))
    VARIANT_BOOL WireFrame;
    __declspec(property(get=GetSmoothPalette,put=PutSmoothPalette))
    VARIANT_BOOL SmoothPalette;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetDotFrame ( );
    void PutDotFrame (
        VARIANT_BOOL DotFrame );
    VARIANT_BOOL GetWireFrame ( );
    void PutWireFrame (
        VARIANT_BOOL Value );
    IBrushPtr GetSideBrush ( );
    VARIANT_BOOL GetSmoothPalette ( );
    void PutSmoothPalette (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DotFrame (
        /*[out,retval]*/ VARIANT_BOOL * DotFrame ) = 0;
      virtual HRESULT __stdcall put_DotFrame (
        /*[in]*/ VARIANT_BOOL DotFrame ) = 0;
      virtual HRESULT __stdcall get_WireFrame (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_WireFrame (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_SideBrush (
        /*[out,retval]*/ struct IBrush * * Value ) = 0;
      virtual HRESULT __stdcall get_SmoothPalette (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_SmoothPalette (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("b6c1053c-fb89-11d4-93c9-006008a7eed4"))
IBar3DSeries : IBarSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetOffsetValues))
    IValueListPtr OffsetValues;

    //
    // Wrapper methods for error-handling
    //

    long AddBar (
        double AX,
        double AY,
        double AOffset,
        _bstr_t ALabel,
        OLE_COLOR AColor );
    IValueListPtr GetOffsetValues ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddBar (
        /*[in]*/ double AX,
        /*[in]*/ double AY,
        /*[in]*/ double AOffset,
        /*[in]*/ BSTR ALabel,
        /*[in]*/ OLE_COLOR AColor,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_OffsetValues (
        /*[out,retval]*/ struct IValueList * * Value ) = 0;
};

struct __declspec(uuid("b6c1053b-fb89-11d4-93c9-006008a7eed4"))
IImageBarSeries : IBarSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetImageTiled,put=PutImageTiled))
    VARIANT_BOOL ImageTiled;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL LoadImage (
        _bstr_t FileName );
    HRESULT ClearImage ( );
    VARIANT_BOOL GetImageTiled ( );
    void PutImageTiled (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_LoadImage (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall raw_ClearImage ( ) = 0;
      virtual HRESULT __stdcall get_ImageTiled (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ImageTiled (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("2eb35e28-80cf-4f35-9b6b-427e2ac1bfa6"))
INearestTool : ICustomToolSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetBrush))
    IBrushPtr Brush;
    __declspec(property(get=GetDrawLine,put=PutDrawLine))
    VARIANT_BOOL DrawLine;
    __declspec(property(get=GetFullRepaint,put=PutFullRepaint))
    VARIANT_BOOL FullRepaint;
    __declspec(property(get=GetPen))
    IPenPtr Pen;
    __declspec(property(get=GetSize,put=PutSize))
    long Size;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum ENearestToolStyle Style;

    //
    // Wrapper methods for error-handling
    //

    IBrushPtr GetBrush ( );
    VARIANT_BOOL GetDrawLine ( );
    void PutDrawLine (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetFullRepaint ( );
    void PutFullRepaint (
        VARIANT_BOOL Value );
    IPenPtr GetPen ( );
    long GetSize ( );
    void PutSize (
        long Value );
    enum ENearestToolStyle GetStyle ( );
    void PutStyle (
        enum ENearestToolStyle Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Value ) = 0;
      virtual HRESULT __stdcall get_DrawLine (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_DrawLine (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_FullRepaint (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_FullRepaint (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum ENearestToolStyle * Value ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum ENearestToolStyle Value ) = 0;
};

struct __declspec(uuid("c9f8e464-0b4b-4427-8678-363cf8e1955d"))
IColorBandTool : ICustomToolAxis
{
    //
    // Property data
    //

    __declspec(property(get=GetDrawBehind,put=PutDrawBehind))
    VARIANT_BOOL DrawBehind;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetBrush))
    IBrushPtr Brush;
    __declspec(property(get=GetGradient))
    IGradientPtr Gradient;
    __declspec(property(get=GetPen))
    IPenPtr Pen;
    __declspec(property(get=GetEndValue,put=PutEndValue))
    double EndValue;
    __declspec(property(get=GetStartValue,put=PutStartValue))
    double StartValue;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    long Transparency;

    //
    // Wrapper methods for error-handling
    //

    IBrushPtr GetBrush ( );
    IPenPtr GetPen ( );
    double GetEndValue ( );
    void PutEndValue (
        double Value );
    double GetStartValue ( );
    void PutStartValue (
        double Value );
    VARIANT_BOOL GetDrawBehind ( );
    void PutDrawBehind (
        VARIANT_BOOL Value );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR Value );
    IGradientPtr GetGradient ( );
    long GetTransparency ( );
    void PutTransparency (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Value ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_EndValue (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_EndValue (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_StartValue (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_StartValue (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_DrawBehind (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_DrawBehind (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_Gradient (
        /*[out,retval]*/ struct IGradient * * Value ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("cde865c4-6b25-4604-8813-f0a65e51f1c8"))
IColorLineTool : ICustomToolAxis
{
    //
    // Property data
    //

    __declspec(property(get=GetAllowDrag,put=PutAllowDrag))
    VARIANT_BOOL AllowDrag;
    __declspec(property(get=GetPen))
    IPenPtr Pen;
    __declspec(property(get=GetValue,put=PutValue))
    double Value;
    __declspec(property(get=GetDragRepaint,put=PutDragRepaint))
    VARIANT_BOOL DragRepaint;
    __declspec(property(get=GetNoLimitDrag,put=PutNoLimitDrag))
    VARIANT_BOOL NoLimitDrag;

    //
    // Wrapper methods for error-handling
    //

    IPenPtr GetPen ( );
    double GetValue ( );
    void PutValue (
        double Value );
    VARIANT_BOOL GetAllowDrag ( );
    void PutAllowDrag (
        VARIANT_BOOL Value );
    VARIANT_BOOL Clicked (
        long X,
        long Y );
    VARIANT_BOOL GetDragRepaint ( );
    void PutDragRepaint (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetNoLimitDrag ( );
    void PutNoLimitDrag (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_AllowDrag (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AllowDrag (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_Clicked (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_DragRepaint (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_DragRepaint (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_NoLimitDrag (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_NoLimitDrag (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("c793db5d-e235-4248-87ad-e436822e64f2"))
IHorizLineSeries : ILineSeries
{};

struct __declspec(uuid("b4b8b973-32bf-40a8-8e07-efba557e13f8"))
IHighLowSeries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHighBrush))
    IBrushPtr HighBrush;
    __declspec(property(get=GetHighPen))
    IPenPtr HighPen;
    __declspec(property(get=GetHighValues))
    IValueListPtr HighValues;
    __declspec(property(get=GetLowBrush))
    IBrushPtr LowBrush;
    __declspec(property(get=GetLowPen))
    IPenPtr LowPen;
    __declspec(property(get=GetLowValues))
    IValueListPtr LowValues;
    __declspec(property(get=GetPen))
    IPenPtr Pen;

    //
    // Wrapper methods for error-handling
    //

    long AddHighLow (
        double AX,
        double AHigh,
        double ALow,
        _bstr_t AXLabel,
        OLE_COLOR AColor );
    IBrushPtr GetHighBrush ( );
    IPenPtr GetHighPen ( );
    IValueListPtr GetHighValues ( );
    IBrushPtr GetLowBrush ( );
    IPenPtr GetLowPen ( );
    IValueListPtr GetLowValues ( );
    IPenPtr GetPen ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddHighLow (
        /*[in]*/ double AX,
        /*[in]*/ double AHigh,
        /*[in]*/ double ALow,
        /*[in]*/ BSTR AXLabel,
        /*[in]*/ OLE_COLOR AColor,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_HighBrush (
        /*[out,retval]*/ struct IBrush * * Value ) = 0;
      virtual HRESULT __stdcall get_HighPen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_HighValues (
        /*[out,retval]*/ struct IValueList * * Value ) = 0;
      virtual HRESULT __stdcall get_LowBrush (
        /*[out,retval]*/ struct IBrush * * Value ) = 0;
      virtual HRESULT __stdcall get_LowPen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_LowValues (
        /*[out,retval]*/ struct IValueList * * Value ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
};

struct __declspec(uuid("3b2b9817-fbbf-11d4-93ca-006008a7eed4"))
ITitles : ITeeShapePosition
{
    //
    // Property data
    //

    __declspec(property(get=GetAdjustFrame,put=PutAdjustFrame))
    VARIANT_BOOL AdjustFrame;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    enum ETitleAlignment Alignment;
    __declspec(property(get=GetBrush))
    IBrushPtr Brush;
    __declspec(property(get=GetFrame))
    IPenPtr Frame;
    __declspec(property(get=GetText))
    IStringsPtr Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAdjustFrame ( );
    void PutAdjustFrame (
        VARIANT_BOOL AdjustFrame );
    enum ETitleAlignment GetAlignment ( );
    void PutAlignment (
        enum ETitleAlignment Alignment );
    IBrushPtr GetBrush ( );
    IPenPtr GetFrame ( );
    IStringsPtr GetText ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Visible );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AdjustFrame (
        /*[out,retval]*/ VARIANT_BOOL * AdjustFrame ) = 0;
      virtual HRESULT __stdcall put_AdjustFrame (
        /*[in]*/ VARIANT_BOOL AdjustFrame ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ enum ETitleAlignment * Alignment ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ enum ETitleAlignment Alignment ) = 0;
      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Brush ) = 0;
      virtual HRESULT __stdcall get_Frame (
        /*[out,retval]*/ struct IPen * * Frame ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ struct IStrings * * Text ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
};

struct __declspec(uuid("5b9827e5-3be4-4da3-9a6f-611bf900e4e1"))
ITriSurfaceSeries : ICustom3DPaletteSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    IPenPtr Border;
    __declspec(property(get=GetHideTriangles,put=PutHideTriangles))
    VARIANT_BOOL HideTriangles;
    __declspec(property(get=GetCacheTriangles,put=PutCacheTriangles))
    VARIANT_BOOL CacheTriangles;

    //
    // Wrapper methods for error-handling
    //

    IPenPtr GetBorder ( );
    VARIANT_BOOL GetHideTriangles ( );
    void PutHideTriangles (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetCacheTriangles ( );
    void PutCacheTriangles (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_HideTriangles (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_HideTriangles (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_CacheTriangles (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_CacheTriangles (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("9df3ed1f-13b7-4a7e-803e-d4bb0c7e5900"))
ICustomBoxSeries : IPointSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetExtrOut))
    IPointerPtr ExtrOut;
    __declspec(property(get=GetMedianPen))
    IPenPtr MedianPen;
    __declspec(property(get=GetMildOut))
    IPointerPtr MildOut;
    __declspec(property(get=GetPosition,put=PutPosition))
    double Position;
    __declspec(property(get=GetWhiskerLength,put=PutWhiskerLength))
    double WhiskerLength;
    __declspec(property(get=GetWhiskerPen))
    IPenPtr WhiskerPen;
    __declspec(property(get=GetBox))
    IPointerPtr Box;

    //
    // Wrapper methods for error-handling
    //

    IPointerPtr GetExtrOut ( );
    IPenPtr GetMedianPen ( );
    IPointerPtr GetMildOut ( );
    double GetPosition ( );
    void PutPosition (
        double Value );
    double GetWhiskerLength ( );
    void PutWhiskerLength (
        double Value );
    IPenPtr GetWhiskerPen ( );
    IPointerPtr GetBox ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ExtrOut (
        /*[out,retval]*/ struct IPointer * * Value ) = 0;
      virtual HRESULT __stdcall get_MedianPen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_MildOut (
        /*[out,retval]*/ struct IPointer * * Value ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_WhiskerLength (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_WhiskerLength (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_WhiskerPen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_Box (
        /*[out,retval]*/ struct IPointer * * Value ) = 0;
};

struct __declspec(uuid("cb0ce331-76cb-449c-9be7-fb69c03c3439"))
IHorizBoxPlotSeries : ICustomBoxSeries
{
    //
    // Wrapper methods for error-handling
    //

    double MaxYValue ( );
    double MinYValue ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_MaxYValue (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_MinYValue (
        /*[out,retval]*/ double * Value ) = 0;
};

struct __declspec(uuid("70c80bd0-d36a-46c9-a9d6-ae8687ca0ea5"))
IHistogramSeries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTransparency,put=PutTransparency))
    long Transparency;
    __declspec(property(get=GetBrush))
    IBrushPtr Brush;
    __declspec(property(get=GetLinePen))
    IPenPtr LinePen;
    __declspec(property(get=GetLinesPen))
    IPenPtr LinesPen;

    //
    // Wrapper methods for error-handling
    //

    IPenPtr GetLinesPen ( );
    long GetTransparency ( );
    void PutTransparency (
        long Value );
    IPenPtr GetLinePen ( );
    IBrushPtr GetBrush ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LinesPen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_LinePen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Value ) = 0;
};

struct __declspec(uuid("ba3a0e2d-cce7-4cf6-82d2-044b2a64ee59"))
IColorGridSeries : ICustom3DGridSeries
{
    //
    // Wrapper methods for error-handling
    //

    double MaxXValue ( );
    double MaxYValue ( );
    double MinYValue ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_MaxXValue (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_MaxYValue (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_MinYValue (
        /*[out,retval]*/ double * Value ) = 0;
};

struct __declspec(uuid("da944291-24c8-4956-bee4-3129a675a49c"))
IBarJoinSeries : IBarSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetJoinPen))
    IPenPtr JoinPen;

    //
    // Wrapper methods for error-handling
    //

    IPenPtr GetJoinPen ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_JoinPen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
};

struct __declspec(uuid("4cc67466-2a11-45c6-924e-15e8b9f6b780"))
IWaterfallSeries : ISurfaceSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetWaterfall,put=PutWaterfall))
    VARIANT_BOOL Waterfall;
    __declspec(property(get=GetWaterLines))
    IPenPtr WaterLines;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetWaterfall ( );
    void PutWaterfall (
        VARIANT_BOOL Value );
    IPenPtr GetWaterLines ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Waterfall (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Waterfall (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_WaterLines (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
};

struct __declspec(uuid("dfbf9393-46fd-11d2-aec3-00400141862d"))
IContourSeries : ICustom3DGridSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetLevels))
    IContourLevelsPtr Levels;
    __declspec(property(get=GetNumLevels,put=PutNumLevels))
    long NumLevels;
    __declspec(property(get=GetYPositionLevel,put=PutYPositionLevel))
    VARIANT_BOOL YPositionLevel;
    __declspec(property(get=GetYPosition,put=PutYPosition))
    double YPosition;
    __declspec(property(get=GetAutomaticLevels,put=PutAutomaticLevels))
    VARIANT_BOOL AutomaticLevels;

    //
    // Wrapper methods for error-handling
    //

    long GetNumLevels ( );
    void PutNumLevels (
        long Value );
    VARIANT_BOOL GetYPositionLevel ( );
    void PutYPositionLevel (
        VARIANT_BOOL Value );
    double GetYPosition ( );
    void PutYPosition (
        double Value );
    IContourLevelsPtr GetLevels ( );
    VARIANT_BOOL GetAutomaticLevels ( );
    void PutAutomaticLevels (
        VARIANT_BOOL Value );
    HRESULT CreateAutoLevels ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumLevels (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_NumLevels (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_YPositionLevel (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_YPositionLevel (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_YPosition (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_YPosition (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_Levels (
        /*[out,retval]*/ struct IContourLevels * * Value ) = 0;
      virtual HRESULT __stdcall get_AutomaticLevels (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AutomaticLevels (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_CreateAutoLevels ( ) = 0;
};

struct __declspec(uuid("2e375632-a81d-400a-9369-f609b6b914ac"))
IBoxPlotSeries : ICustomBoxSeries
{
    //
    // Wrapper methods for error-handling
    //

    double MaxXValue ( );
    double MinXValue ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_MaxXValue (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_MinXValue (
        /*[out,retval]*/ double * Value ) = 0;
};

struct __declspec(uuid("449c6526-c2f8-47ee-8386-32d20b488b8b"))
ICursorTool : ICustomToolSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetXVal,put=PutXVal))
    double XVal;
    __declspec(property(get=GetFollowMouse,put=PutFollowMouse))
    VARIANT_BOOL FollowMouse;
    __declspec(property(get=GetPen))
    IPenPtr Pen;
    __declspec(property(get=GetYVal,put=PutYVal))
    double YVal;
    __declspec(property(get=GetSnap,put=PutSnap))
    VARIANT_BOOL Snap;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum ECursorToolStyle Style;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetFollowMouse ( );
    void PutFollowMouse (
        VARIANT_BOOL Value );
    IPenPtr GetPen ( );
    VARIANT_BOOL GetSnap ( );
    void PutSnap (
        VARIANT_BOOL Value );
    enum ECursorToolStyle GetStyle ( );
    void PutStyle (
        enum ECursorToolStyle Value );
    double GetXVal ( );
    void PutXVal (
        double Value );
    double GetYVal ( );
    void PutYVal (
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FollowMouse (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_FollowMouse (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_Snap (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Snap (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum ECursorToolStyle * Value ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum ECursorToolStyle Value ) = 0;
      virtual HRESULT __stdcall get_XVal (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_XVal (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_YVal (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_YVal (
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("62dd8659-f041-11d4-93b1-006008a7eed4"))
IDrawLine : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEndPos))
    ITeePoint2DPtr EndPos;
    __declspec(property(get=GetStartPos))
    ITeePoint2DPtr StartPos;
    __declspec(property(get=GetPen))
    IPenPtr Pen;

    //
    // Wrapper methods for error-handling
    //

    ITeePoint2DPtr GetEndPos ( );
    ITeePoint2DPtr GetStartPos ( );
    IPenPtr GetPen ( );
    HRESULT DrawHandles ( );
    struct TeeRect EndHandle ( );
    struct TeeRect StartHandle ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EndPos (
        /*[out,retval]*/ struct ITeePoint2D * * Value ) = 0;
      virtual HRESULT __stdcall get_StartPos (
        /*[out,retval]*/ struct ITeePoint2D * * Value ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall raw_DrawHandles ( ) = 0;
      virtual HRESULT __stdcall raw_EndHandle (
        /*[out,retval]*/ struct TeeRect * Value ) = 0;
      virtual HRESULT __stdcall raw_StartHandle (
        /*[out,retval]*/ struct TeeRect * Value ) = 0;
};

struct __declspec(uuid("62dd8657-f041-11d4-93b1-006008a7eed4"))
IDrawLineList : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetControlDefault))
    _variant_t ControlDefault[];
    __declspec(property(get=GetItems))
    IDrawLinePtr Items[];
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    IDrawLinePtr GetItems (
        long Index );
    _variant_t GetControlDefault (
        long Index );
    HRESULT Clear ( );
    HRESULT Delete (
        long Index );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Items (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IDrawLine * * Value ) = 0;
      virtual HRESULT __stdcall get_ControlDefault (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
};

struct __declspec(uuid("5970102e-e487-4b12-88a8-a7930ef23e5d"))
IDrawLineTool : ICustomToolSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetFromPoint))
    ITeePoint2DPtr FromPoint;
    __declspec(property(get=GetToPoint))
    ITeePoint2DPtr ToPoint;
    __declspec(property(get=GetLines))
    IDrawLineListPtr Lines;
    __declspec(property(get=GetSelected,put=PutSelected))
    long Selected;
    __declspec(property(get=GetButton,put=PutButton))
    enum EMouseButton Button;
    __declspec(property(get=GetEnableDraw,put=PutEnableDraw))
    VARIANT_BOOL EnableDraw;
    __declspec(property(get=GetEnableSelect,put=PutEnableSelect))
    VARIANT_BOOL EnableSelect;
    __declspec(property(get=GetPen))
    IPenPtr Pen;

    //
    // Wrapper methods for error-handling
    //

    ITeePoint2DPtr GetFromPoint ( );
    ITeePoint2DPtr GetToPoint ( );
    ITeePoint2DPtr AxisPoint (
        double X,
        double Y );
    long Clicked (
        long X,
        long Y );
    HRESULT DeleteSelected ( );
    ITeePoint2DPtr ScreenPoint (
        long X,
        long Y );
    IDrawLineListPtr GetLines ( );
    long GetSelected ( );
    void PutSelected (
        long Index );
    enum EMouseButton GetButton ( );
    void PutButton (
        enum EMouseButton Value );
    VARIANT_BOOL GetEnableDraw ( );
    void PutEnableDraw (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetEnableSelect ( );
    void PutEnableSelect (
        VARIANT_BOOL Value );
    IPenPtr GetPen ( );
    long AddLine (
        double FromX,
        double FromY,
        double ToX,
        double ToY );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FromPoint (
        /*[out,retval]*/ struct ITeePoint2D * * Value ) = 0;
      virtual HRESULT __stdcall get_ToPoint (
        /*[out,retval]*/ struct ITeePoint2D * * Value ) = 0;
      virtual HRESULT __stdcall raw_AxisPoint (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[out,retval]*/ struct ITeePoint2D * * Value ) = 0;
      virtual HRESULT __stdcall raw_Clicked (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_DeleteSelected ( ) = 0;
      virtual HRESULT __stdcall raw_ScreenPoint (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[out,retval]*/ struct ITeePoint2D * * Value ) = 0;
      virtual HRESULT __stdcall get_Lines (
        /*[out,retval]*/ struct IDrawLineList * * Value ) = 0;
      virtual HRESULT __stdcall get_Selected (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall put_Selected (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall get_Button (
        /*[out,retval]*/ enum EMouseButton * Value ) = 0;
      virtual HRESULT __stdcall put_Button (
        /*[in]*/ enum EMouseButton Value ) = 0;
      virtual HRESULT __stdcall get_EnableDraw (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_EnableDraw (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_EnableSelect (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_EnableSelect (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall raw_AddLine (
        /*[in]*/ double FromX,
        /*[in]*/ double FromY,
        /*[in]*/ double ToX,
        /*[in]*/ double ToY,
        /*[out,retval]*/ long * retval ) = 0;
};

struct __declspec(uuid("c746269f-0a39-4ec5-b52f-7e489835035b"))
IAxisArrowTool : ICustomToolAxis
{
    //
    // Property data
    //

    __declspec(property(get=GetScrollInverted,put=PutScrollInverted))
    VARIANT_BOOL ScrollInverted;
    __declspec(property(get=GetPosition,put=PutPosition))
    enum EAxisArrowToolPosition Position;
    __declspec(property(get=GetBrush))
    IBrushPtr Brush;
    __declspec(property(get=GetLength,put=PutLength))
    long Length;
    __declspec(property(get=GetPen))
    IPenPtr Pen;
    __declspec(property(get=GetScrollPercent,put=PutScrollPercent))
    long ScrollPercent;

    //
    // Wrapper methods for error-handling
    //

    enum EAxisArrowToolPosition GetPosition ( );
    void PutPosition (
        enum EAxisArrowToolPosition Value );
    IBrushPtr GetBrush ( );
    long GetLength ( );
    void PutLength (
        long Value );
    IPenPtr GetPen ( );
    long GetScrollPercent ( );
    void PutScrollPercent (
        long Value );
    VARIANT_BOOL GetScrollInverted ( );
    void PutScrollInverted (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ enum EAxisArrowToolPosition * Value ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ enum EAxisArrowToolPosition Value ) = 0;
      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Value ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_ScrollPercent (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ScrollPercent (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_ScrollInverted (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ScrollInverted (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("ac690adb-0730-11d5-93e3-006008a7eed4"))
IMapPolygon : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBrush))
    IBrushPtr Brush;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetGradient))
    IGradientPtr Gradient;
    __declspec(property(get=GetParentBrush,put=PutParentBrush))
    VARIANT_BOOL ParentBrush;
    __declspec(property(get=GetParentPen,put=PutParentPen))
    VARIANT_BOOL ParentPen;
    __declspec(property(get=GetPen))
    IPenPtr Pen;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZ,put=PutZ))
    double Z;

    //
    // Wrapper methods for error-handling
    //

    IBrushPtr GetBrush ( );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR Value );
    IGradientPtr GetGradient ( );
    VARIANT_BOOL GetParentBrush ( );
    void PutParentBrush (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetParentPen ( );
    void PutParentPen (
        VARIANT_BOOL Value );
    IPenPtr GetPen ( );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t Value );
    double GetZ ( );
    void PutZ (
        double Value );
    long AddXY (
        double X,
        double Y );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Value ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_Gradient (
        /*[out,retval]*/ struct IGradient * * Value ) = 0;
      virtual HRESULT __stdcall get_ParentBrush (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ParentBrush (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ParentPen (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ParentPen (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Z (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_AddXY (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[out,retval]*/ long * Value ) = 0;
};

struct __declspec(uuid("ac690ad9-0730-11d5-93e3-006008a7eed4"))
IMapPolygonList : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPolygon))
    IMapPolygonPtr Polygon[];

    //
    // Wrapper methods for error-handling
    //

    long Add ( );
    IMapPolygonPtr GetPolygon (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall get_Polygon (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IMapPolygon * * Value1 ) = 0;
};

struct __declspec(uuid("33a0cf4e-ae1f-43db-a3cf-b7f9905085c8"))
IMapSeries : ICustom3DPaletteSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetShapes))
    IMapPolygonListPtr Shapes;

    //
    // Wrapper methods for error-handling
    //

    IMapPolygonListPtr GetShapes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Shapes (
        /*[out,retval]*/ struct IMapPolygonList * * Value ) = 0;
};

struct __declspec(uuid("01e6d0d8-07ee-11d5-93e4-006008a7eed4"))
IFunnelSeries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBrush))
    IBrushPtr Brush;
    __declspec(property(get=GetPen))
    IPenPtr Pen;
    __declspec(property(get=GetLinesPen))
    IPenPtr LinesPen;
    __declspec(property(get=GetAutoUpdate,put=PutAutoUpdate))
    VARIANT_BOOL AutoUpdate;
    __declspec(property(get=GetQuotesSorted,put=PutQuotesSorted))
    VARIANT_BOOL QuotesSorted;
    __declspec(property(get=GetDifferenceLimit,put=PutDifferenceLimit))
    double DifferenceLimit;
    __declspec(property(get=GetAboveColor,put=PutAboveColor))
    OLE_COLOR AboveColor;
    __declspec(property(get=GetWithinColor,put=PutWithinColor))
    OLE_COLOR WithinColor;
    __declspec(property(get=GetBelowColor,put=PutBelowColor))
    OLE_COLOR BelowColor;
    __declspec(property(get=GetOpportunityValues))
    IValueListPtr OpportunityValues;
    __declspec(property(get=GetQuoteValues))
    IValueListPtr QuoteValues;

    //
    // Wrapper methods for error-handling
    //

    long AddSegment (
        double AQuote,
        double AOpportunity,
        _bstr_t ALabel,
        OLE_COLOR AColor );
    HRESULT Recalc ( );
    IBrushPtr GetBrush ( );
    IPenPtr GetPen ( );
    IPenPtr GetLinesPen ( );
    VARIANT_BOOL GetAutoUpdate ( );
    void PutAutoUpdate (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetQuotesSorted ( );
    void PutQuotesSorted (
        VARIANT_BOOL Value );
    double GetDifferenceLimit ( );
    void PutDifferenceLimit (
        double Value );
    OLE_COLOR GetAboveColor ( );
    void PutAboveColor (
        OLE_COLOR Value );
    OLE_COLOR GetWithinColor ( );
    void PutWithinColor (
        OLE_COLOR Value );
    OLE_COLOR GetBelowColor ( );
    void PutBelowColor (
        OLE_COLOR Value );
    IValueListPtr GetOpportunityValues ( );
    IValueListPtr GetQuoteValues ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddSegment (
        /*[in]*/ double AQuote,
        /*[in]*/ double AOpportunity,
        /*[in]*/ BSTR ALabel,
        /*[in]*/ OLE_COLOR AColor,
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall raw_Recalc ( ) = 0;
      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Value ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_LinesPen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_AutoUpdate (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AutoUpdate (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_QuotesSorted (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_QuotesSorted (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_DifferenceLimit (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_DifferenceLimit (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_AboveColor (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_AboveColor (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_WithinColor (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_WithinColor (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_BelowColor (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_BelowColor (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_OpportunityValues (
        /*[out,retval]*/ struct IValueList * * Value ) = 0;
      virtual HRESULT __stdcall get_QuoteValues (
        /*[out,retval]*/ struct IValueList * * Value ) = 0;
};

struct __declspec(uuid("b6c104a8-fb89-11d4-93c9-006008a7eed4"))
ILegend : ITeeShapePosition
{
    //
    // Property data
    //

    __declspec(property(get=GetAlignment,put=PutAlignment))
    enum ELegendAlignment Alignment;
    __declspec(property(get=GetVertspacing,put=PutVertspacing))
    long Vertspacing;
    __declspec(property(get=GetColorWidth,put=PutColorWidth))
    long ColorWidth;
    __declspec(property(get=GetDividingLines))
    IPenPtr DividingLines;
    __declspec(property(get=GetFirstValue,put=PutFirstValue))
    long FirstValue;
    __declspec(property(get=GetVertical))
    VARIANT_BOOL Vertical;
    __declspec(property(get=GetFrame))
    IPenPtr Frame;
    __declspec(property(get=GetHorizMargin,put=PutHorizMargin))
    long HorizMargin;
    __declspec(property(get=GetInverted,put=PutInverted))
    VARIANT_BOOL Inverted;
    __declspec(property(get=GetLegendStyle,put=PutLegendStyle))
    enum ELegendStyle LegendStyle;
    __declspec(property(get=GetResizeChart,put=PutResizeChart))
    VARIANT_BOOL ResizeChart;
    __declspec(property(get=GetTextStyle,put=PutTextStyle))
    enum ELegendTextStyle TextStyle;
    __declspec(property(get=GetTopPos,put=PutTopPos))
    long TopPos;
    __declspec(property(get=GetVertMargin,put=PutVertMargin))
    long VertMargin;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetMaxNumRows,put=PutMaxNumRows))
    long MaxNumRows;
    __declspec(property(get=GetBrush))
    IBrushPtr Brush;
    __declspec(property(get=GetSeries,put=PutSeries))
    _variant_t Series;
    __declspec(property(get=GetFontSeriesColor,put=PutFontSeriesColor))
    VARIANT_BOOL FontSeriesColor;
    __declspec(property(get=GetCurrentPage,put=PutCurrentPage))
    VARIANT_BOOL CurrentPage;
    __declspec(property(get=GetSymbol))
    ILegendSymbolPtr Symbol;
    __declspec(property(get=GetCheckBoxes,put=PutCheckBoxes))
    VARIANT_BOOL CheckBoxes;
    __declspec(property(get=GetColumnWidthAuto,put=PutColumnWidthAuto))
    VARIANT_BOOL ColumnWidthAuto;
    __declspec(property(get=GetColumnWidths,put=PutColumnWidths))
    long ColumnWidths[];

    //
    // Wrapper methods for error-handling
    //

    enum ELegendAlignment GetAlignment ( );
    void PutAlignment (
        enum ELegendAlignment Alignment );
    long GetColorWidth ( );
    void PutColorWidth (
        long ColorWidth );
    IPenPtr GetDividingLines ( );
    long GetFirstValue ( );
    void PutFirstValue (
        long FirstValue );
    IPenPtr GetFrame ( );
    long GetHorizMargin ( );
    void PutHorizMargin (
        long HorizMargin );
    VARIANT_BOOL GetInverted ( );
    void PutInverted (
        VARIANT_BOOL Inverted );
    enum ELegendStyle GetLegendStyle ( );
    void PutLegendStyle (
        enum ELegendStyle LegendStyle );
    VARIANT_BOOL GetResizeChart ( );
    void PutResizeChart (
        VARIANT_BOOL ResizeChart );
    enum ELegendTextStyle GetTextStyle ( );
    void PutTextStyle (
        enum ELegendTextStyle TextStyle );
    long GetTopPos ( );
    void PutTopPos (
        long TopPos );
    long GetVertMargin ( );
    void PutVertMargin (
        long VertMargin );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Visible );
    _bstr_t Formatted (
        long SomeSeriesOrValueIndex );
    _bstr_t FormattedValue (
        long aSeries,
        long SomeValueIndex );
    long Clicked (
        long X,
        long Y );
    long GetMaxNumRows ( );
    void PutMaxNumRows (
        long Value );
    HRESULT BackImageLoad (
        _bstr_t FileName );
    HRESULT BackImageClear ( );
    IBrushPtr GetBrush ( );
    _variant_t GetSeries ( );
    void PutSeries (
        const _variant_t & Value );
    HRESULT DrawLegend ( );
    VARIANT_BOOL GetFontSeriesColor ( );
    void PutFontSeriesColor (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetCurrentPage ( );
    void PutCurrentPage (
        VARIANT_BOOL Value );
    ILegendSymbolPtr GetSymbol ( );
    VARIANT_BOOL GetCheckBoxes ( );
    void PutCheckBoxes (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetColumnWidthAuto ( );
    void PutColumnWidthAuto (
        VARIANT_BOOL Value );
    long GetColumnWidths (
        long Index );
    void PutColumnWidths (
        long Index,
        long Value );
    long GetVertspacing ( );
    void PutVertspacing (
        long Value );
    VARIANT_BOOL GetVertical ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ enum ELegendAlignment * Alignment ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ enum ELegendAlignment Alignment ) = 0;
      virtual HRESULT __stdcall get_ColorWidth (
        /*[out,retval]*/ long * ColorWidth ) = 0;
      virtual HRESULT __stdcall put_ColorWidth (
        /*[in]*/ long ColorWidth ) = 0;
      virtual HRESULT __stdcall get_DividingLines (
        /*[out,retval]*/ struct IPen * * DividingLines ) = 0;
      virtual HRESULT __stdcall get_FirstValue (
        /*[out,retval]*/ long * FirstValue ) = 0;
      virtual HRESULT __stdcall put_FirstValue (
        /*[in]*/ long FirstValue ) = 0;
      virtual HRESULT __stdcall get_Frame (
        /*[out,retval]*/ struct IPen * * Frame ) = 0;
      virtual HRESULT __stdcall get_HorizMargin (
        /*[out,retval]*/ long * HorizMargin ) = 0;
      virtual HRESULT __stdcall put_HorizMargin (
        /*[in]*/ long HorizMargin ) = 0;
      virtual HRESULT __stdcall get_Inverted (
        /*[out,retval]*/ VARIANT_BOOL * Inverted ) = 0;
      virtual HRESULT __stdcall put_Inverted (
        /*[in]*/ VARIANT_BOOL Inverted ) = 0;
      virtual HRESULT __stdcall get_LegendStyle (
        /*[out,retval]*/ enum ELegendStyle * LegendStyle ) = 0;
      virtual HRESULT __stdcall put_LegendStyle (
        /*[in]*/ enum ELegendStyle LegendStyle ) = 0;
      virtual HRESULT __stdcall get_ResizeChart (
        /*[out,retval]*/ VARIANT_BOOL * ResizeChart ) = 0;
      virtual HRESULT __stdcall put_ResizeChart (
        /*[in]*/ VARIANT_BOOL ResizeChart ) = 0;
      virtual HRESULT __stdcall get_TextStyle (
        /*[out,retval]*/ enum ELegendTextStyle * TextStyle ) = 0;
      virtual HRESULT __stdcall put_TextStyle (
        /*[in]*/ enum ELegendTextStyle TextStyle ) = 0;
      virtual HRESULT __stdcall get_TopPos (
        /*[out,retval]*/ long * TopPos ) = 0;
      virtual HRESULT __stdcall put_TopPos (
        /*[in]*/ long TopPos ) = 0;
      virtual HRESULT __stdcall get_VertMargin (
        /*[out,retval]*/ long * VertMargin ) = 0;
      virtual HRESULT __stdcall put_VertMargin (
        /*[in]*/ long VertMargin ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall raw_Formatted (
        /*[in]*/ long SomeSeriesOrValueIndex,
        /*[out,retval]*/ BSTR * SeriesOrValueIndex ) = 0;
      virtual HRESULT __stdcall raw_FormattedValue (
        /*[in]*/ long aSeries,
        /*[in]*/ long SomeValueIndex,
        /*[out,retval]*/ BSTR * ValueIndex ) = 0;
      virtual HRESULT __stdcall raw_Clicked (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_MaxNumRows (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_MaxNumRows (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall raw_BackImageLoad (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_BackImageClear ( ) = 0;
      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Value ) = 0;
      virtual HRESULT __stdcall get_Series (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall put_Series (
        /*[in]*/ VARIANT Value ) = 0;
      virtual HRESULT __stdcall raw_DrawLegend ( ) = 0;
      virtual HRESULT __stdcall get_FontSeriesColor (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_FontSeriesColor (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_CurrentPage (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_CurrentPage (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Symbol (
        /*[out,retval]*/ struct ILegendSymbol * * Value ) = 0;
      virtual HRESULT __stdcall get_CheckBoxes (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_CheckBoxes (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ColumnWidthAuto (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ColumnWidthAuto (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ColumnWidths (
        /*[in]*/ long Index,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ColumnWidths (
        /*[in]*/ long Index,
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Vertspacing (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Vertspacing (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Vertical (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
};

struct __declspec(uuid("22a5d9bb-b643-11d5-94f8-006008a7eed4"))
ITeeShapePanel : ITeeShapePosition
{
    //
    // Property data
    //

    __declspec(property(get=GetFrame))
    IPenPtr Frame;

    //
    // Wrapper methods for error-handling
    //

    IPenPtr GetFrame ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Frame (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
};

struct __declspec(uuid("e517cb29-1c48-11d5-9400-006008a7eed4"))
IAnnotationTool : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPosition,put=PutPosition))
    enum EAnnotationPosition Position;
    __declspec(property(get=GetShape))
    ITeeShapePanelPtr Shape;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;

    //
    // Wrapper methods for error-handling
    //

    enum EAnnotationPosition GetPosition ( );
    void PutPosition (
        enum EAnnotationPosition Value );
    ITeeShapePanelPtr GetShape ( );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ enum EAnnotationPosition * Value ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ enum EAnnotationPosition Value ) = 0;
      virtual HRESULT __stdcall get_Shape (
        /*[out,retval]*/ struct ITeeShapePanel * * Value ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR Value ) = 0;
};

struct __declspec(uuid("e517cb2e-1c48-11d5-9400-006008a7eed4"))
IPageNumTool : IAnnotationTool
{
    //
    // Property data
    //

    __declspec(property(get=GetFormat,put=PutFormat))
    _bstr_t Format;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFormat ( );
    void PutFormat (
        _bstr_t Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Format (
        /*[in]*/ BSTR Value ) = 0;
};

struct __declspec(uuid("67d7aa1c-12fa-4f34-8eb2-b3e8646e0e5f"))
ITools : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetasTeeCursor))
    ICursorToolPtr asTeeCursor;
    __declspec(property(get=GetasDragMarks))
    IDragMarksToolPtr asDragMarks;
    __declspec(property(get=GetasAxisArrow))
    IAxisArrowToolPtr asAxisArrow;
    __declspec(property(get=GetasDrawLine))
    IDrawLineToolPtr asDrawLine;
    __declspec(property(get=GetasNearest))
    INearestToolPtr asNearest;
    __declspec(property(get=GetasColorband))
    IColorBandToolPtr asColorband;
    __declspec(property(get=GetasColorLine))
    IColorLineToolPtr asColorLine;
    __declspec(property(get=GetasRotate))
    IRotateToolPtr asRotate;
    __declspec(property(get=GetasMarksTip))
    IMarksTipToolPtr asMarksTip;
    __declspec(property(get=GetasChartImage))
    IChartImageToolPtr asChartImage;
    __declspec(property(get=GetasAnnotation))
    IAnnotationToolPtr asAnnotation;
    __declspec(property(get=GetasPageNum))
    IPageNumToolPtr asPageNum;
    __declspec(property(get=GetActive,put=PutActive))
    VARIANT_BOOL Active;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetToolType))
    enum EToolClass ToolType;

    //
    // Wrapper methods for error-handling
    //

    ICursorToolPtr GetasTeeCursor ( );
    IDragMarksToolPtr GetasDragMarks ( );
    IAxisArrowToolPtr GetasAxisArrow ( );
    IDrawLineToolPtr GetasDrawLine ( );
    INearestToolPtr GetasNearest ( );
    IColorBandToolPtr GetasColorband ( );
    IColorLineToolPtr GetasColorLine ( );
    IRotateToolPtr GetasRotate ( );
    IMarksTipToolPtr GetasMarksTip ( );
    IChartImageToolPtr GetasChartImage ( );
    IAnnotationToolPtr GetasAnnotation ( );
    IPageNumToolPtr GetasPageNum ( );
    VARIANT_BOOL GetActive ( );
    void PutActive (
        VARIANT_BOOL Value );
    _bstr_t GetDescription ( );
    enum EToolClass GetToolType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_asTeeCursor (
        /*[out,retval]*/ struct ICursorTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asDragMarks (
        /*[out,retval]*/ struct IDragMarksTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asAxisArrow (
        /*[out,retval]*/ struct IAxisArrowTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asDrawLine (
        /*[out,retval]*/ struct IDrawLineTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asNearest (
        /*[out,retval]*/ struct INearestTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asColorband (
        /*[out,retval]*/ struct IColorBandTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asColorLine (
        /*[out,retval]*/ struct IColorLineTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asRotate (
        /*[out,retval]*/ struct IRotateTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asMarksTip (
        /*[out,retval]*/ struct IMarksTipTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asChartImage (
        /*[out,retval]*/ struct IChartImageTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asAnnotation (
        /*[out,retval]*/ struct IAnnotationTool * * Value ) = 0;
      virtual HRESULT __stdcall get_asPageNum (
        /*[out,retval]*/ struct IPageNumTool * * Value ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Active (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_ToolType (
        /*[out,retval]*/ enum EToolClass * Value ) = 0;
};

struct __declspec(uuid("750eb847-b333-4a73-8aee-9087f8b98d1e"))
IToolList : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetControlDefault))
    _variant_t ControlDefault[];
    __declspec(property(get=GetItems))
    IToolsPtr Items[];
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    long Add (
        enum EToolClass ToolClass );
    IToolsPtr GetItems (
        long Index );
    _variant_t GetControlDefault (
        long Index );
    HRESULT Clear ( );
    HRESULT Delete (
        long Index );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum EToolClass ToolClass,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Items (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ITools * * Value ) = 0;
      virtual HRESULT __stdcall get_ControlDefault (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Value ) = 0;
};

#pragma pack(push, 4)

struct __declspec(uuid("fa0dd785-212a-11d6-9597-006008a7eed4"))
TeePoint2D
{
    long X;
    long Y;
};

#pragma pack(pop)

struct __declspec(uuid("b6c104c3-fb89-11d4-93c9-006008a7eed4"))
ICircledSeries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetXRadius,put=PutXRadius))
    long XRadius;
    __declspec(property(get=GetYRadius,put=PutYRadius))
    long YRadius;
    __declspec(property(get=GetXCenter))
    long XCenter;
    __declspec(property(get=GetYCenter))
    long YCenter;
    __declspec(property(get=GetCircleWidth))
    long CircleWidth;
    __declspec(property(get=GetCircleHeight))
    long CircleHeight;
    __declspec(property(get=GetCircleBackColor,put=PutCircleBackColor))
    OLE_COLOR CircleBackColor;
    __declspec(property(get=GetCircled,put=PutCircled))
    VARIANT_BOOL Circled;
    __declspec(property(get=GetRotationAngle,put=PutRotationAngle))
    long RotationAngle;

    //
    // Wrapper methods for error-handling
    //

    long GetXRadius ( );
    void PutXRadius (
        long XRadius );
    long GetYRadius ( );
    void PutYRadius (
        long YRadius );
    long GetXCenter ( );
    long GetYCenter ( );
    long GetCircleWidth ( );
    long GetCircleHeight ( );
    OLE_COLOR GetCircleBackColor ( );
    void PutCircleBackColor (
        OLE_COLOR CircleBackColor );
    VARIANT_BOOL GetCircled ( );
    void PutCircled (
        VARIANT_BOOL Circled );
    long GetRotationAngle ( );
    void PutRotationAngle (
        long RotationAngle );
    struct TeePoint2D AngleToPoint (
        double Angle,
        double AXRadius,
        double AYRadius );
    double PointToAngle (
        long XCoord,
        long YCoord );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_XRadius (
        /*[out,retval]*/ long * XRadius ) = 0;
      virtual HRESULT __stdcall put_XRadius (
        /*[in]*/ long XRadius ) = 0;
      virtual HRESULT __stdcall get_YRadius (
        /*[out,retval]*/ long * YRadius ) = 0;
      virtual HRESULT __stdcall put_YRadius (
        /*[in]*/ long YRadius ) = 0;
      virtual HRESULT __stdcall get_XCenter (
        /*[out,retval]*/ long * XCenter ) = 0;
      virtual HRESULT __stdcall get_YCenter (
        /*[out,retval]*/ long * YCenter ) = 0;
      virtual HRESULT __stdcall get_CircleWidth (
        /*[out,retval]*/ long * CircleWidth ) = 0;
      virtual HRESULT __stdcall get_CircleHeight (
        /*[out,retval]*/ long * CircleHeight ) = 0;
      virtual HRESULT __stdcall get_CircleBackColor (
        /*[out,retval]*/ OLE_COLOR * CircleBackColor ) = 0;
      virtual HRESULT __stdcall put_CircleBackColor (
        /*[in]*/ OLE_COLOR CircleBackColor ) = 0;
      virtual HRESULT __stdcall get_Circled (
        /*[out,retval]*/ VARIANT_BOOL * Circled ) = 0;
      virtual HRESULT __stdcall put_Circled (
        /*[in]*/ VARIANT_BOOL Circled ) = 0;
      virtual HRESULT __stdcall get_RotationAngle (
        /*[out,retval]*/ long * RotationAngle ) = 0;
      virtual HRESULT __stdcall put_RotationAngle (
        /*[in]*/ long RotationAngle ) = 0;
      virtual HRESULT __stdcall raw_AngleToPoint (
        /*[in]*/ double Angle,
        /*[in]*/ double AXRadius,
        /*[in]*/ double AYRadius,
        /*[out,retval]*/ struct TeePoint2D * Value ) = 0;
      virtual HRESULT __stdcall raw_PointToAngle (
        /*[in]*/ long XCoord,
        /*[in]*/ long YCoord,
        /*[out,retval]*/ double * Y ) = 0;
};

struct __declspec(uuid("b6c104c4-fb89-11d4-93c9-006008a7eed4"))
IPieSeries : ICircledSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetShadow))
    ITeeShadowPtr Shadow;
    __declspec(property(get=GetAngleSize,put=PutAngleSize))
    long AngleSize;
    __declspec(property(get=GetUsePatterns,put=PutUsePatterns))
    VARIANT_BOOL UsePatterns;
    __declspec(property(get=GetPieValues))
    IValueListPtr PieValues;
    __declspec(property(get=GetDark3D,put=PutDark3D))
    VARIANT_BOOL Dark3D;
    __declspec(property(get=GetExplodeBiggest,put=PutExplodeBiggest))
    long ExplodeBiggest;
    __declspec(property(get=GetOtherSlice))
    IPieOtherSlicePtr OtherSlice;
    __declspec(property(get=GetExplodedSlice))
    IExplodedSlicesPtr ExplodedSlice;
    __declspec(property(get=GetPiePen))
    IPenPtr PiePen;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUsePatterns ( );
    void PutUsePatterns (
        VARIANT_BOOL UsePatterns );
    IValueListPtr GetPieValues ( );
    VARIANT_BOOL GetDark3D ( );
    void PutDark3D (
        VARIANT_BOOL Dark3D );
    long GetExplodeBiggest ( );
    void PutExplodeBiggest (
        long Value );
    IPieOtherSlicePtr GetOtherSlice ( );
    IExplodedSlicesPtr GetExplodedSlice ( );
    IPenPtr GetPiePen ( );
    ITeeShadowPtr GetShadow ( );
    long GetAngleSize ( );
    void PutAngleSize (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UsePatterns (
        /*[out,retval]*/ VARIANT_BOOL * UsePatterns ) = 0;
      virtual HRESULT __stdcall put_UsePatterns (
        /*[in]*/ VARIANT_BOOL UsePatterns ) = 0;
      virtual HRESULT __stdcall get_PieValues (
        /*[out,retval]*/ struct IValueList * * PieValues ) = 0;
      virtual HRESULT __stdcall get_Dark3D (
        /*[out,retval]*/ VARIANT_BOOL * Dark3D ) = 0;
      virtual HRESULT __stdcall put_Dark3D (
        /*[in]*/ VARIANT_BOOL Dark3D ) = 0;
      virtual HRESULT __stdcall get_ExplodeBiggest (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ExplodeBiggest (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_OtherSlice (
        /*[out,retval]*/ struct IPieOtherSlice * * Value ) = 0;
      virtual HRESULT __stdcall get_ExplodedSlice (
        /*[out,retval]*/ struct IExplodedSlices * * Value ) = 0;
      virtual HRESULT __stdcall get_PiePen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ struct ITeeShadow * * Value ) = 0;
      virtual HRESULT __stdcall get_AngleSize (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_AngleSize (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("b6c104dd-fb89-11d4-93c9-006008a7eed4"))
ICustomPolarSeries : ICircledSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetPen))
    IPenPtr Pen;
    __declspec(property(get=GetPointer))
    IPointerPtr Pointer;
    __declspec(property(get=GetRadiusIncrement,put=PutRadiusIncrement))
    double RadiusIncrement;
    __declspec(property(get=GetAngleValues))
    IValueListPtr AngleValues;
    __declspec(property(get=GetRadiusValues))
    IValueListPtr RadiusValues;
    __declspec(property(get=GetBrush))
    IBrushPtr Brush;
    __declspec(property(get=GetCirclePen))
    IPenPtr CirclePen;
    __declspec(property(get=GetCircleLabels))
    ICircleLabelsPtr CircleLabels;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    long Transparency;
    __declspec(property(get=GetClockWiseLabels,put=PutClockWiseLabels))
    VARIANT_BOOL ClockWiseLabels;
    __declspec(property(get=GetCircleLabelsInside,put=PutCircleLabelsInside))
    VARIANT_BOOL CircleLabelsInside;
    __declspec(property(get=GetAngleIncrement,put=PutAngleIncrement))
    double AngleIncrement;
    __declspec(property(get=GetCloseCircle,put=PutCloseCircle))
    VARIANT_BOOL CloseCircle;

    //
    // Wrapper methods for error-handling
    //

    double GetAngleIncrement ( );
    void PutAngleIncrement (
        double AngleIncrement );
    VARIANT_BOOL GetCloseCircle ( );
    void PutCloseCircle (
        VARIANT_BOOL CloseCircle );
    IPenPtr GetPen ( );
    IPointerPtr GetPointer ( );
    double GetRadiusIncrement ( );
    void PutRadiusIncrement (
        double RadiusIncrement );
    IValueListPtr GetAngleValues ( );
    IValueListPtr GetRadiusValues ( );
    HRESULT DrawRing (
        double Value,
        long Z );
    IPenPtr GetCirclePen ( );
    ICircleLabelsPtr GetCircleLabels ( );
    IBrushPtr GetBrush ( );
    HRESULT LoadBackImage (
        _bstr_t FileName );
    HRESULT ClearBackImage ( );
    VARIANT_BOOL GetClockWiseLabels ( );
    void PutClockWiseLabels (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetCircleLabelsInside ( );
    void PutCircleLabelsInside (
        VARIANT_BOOL Value );
    long GetTransparency ( );
    void PutTransparency (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AngleIncrement (
        /*[out,retval]*/ double * AngleIncrement ) = 0;
      virtual HRESULT __stdcall put_AngleIncrement (
        /*[in]*/ double AngleIncrement ) = 0;
      virtual HRESULT __stdcall get_CloseCircle (
        /*[out,retval]*/ VARIANT_BOOL * CloseCircle ) = 0;
      virtual HRESULT __stdcall put_CloseCircle (
        /*[in]*/ VARIANT_BOOL CloseCircle ) = 0;
      virtual HRESULT __stdcall get_Pen (
        /*[out,retval]*/ struct IPen * * Pen ) = 0;
      virtual HRESULT __stdcall get_Pointer (
        /*[out,retval]*/ struct IPointer * * Pointer ) = 0;
      virtual HRESULT __stdcall get_RadiusIncrement (
        /*[out,retval]*/ double * RadiusIncrement ) = 0;
      virtual HRESULT __stdcall put_RadiusIncrement (
        /*[in]*/ double RadiusIncrement ) = 0;
      virtual HRESULT __stdcall get_AngleValues (
        /*[out,retval]*/ struct IValueList * * AngleValues ) = 0;
      virtual HRESULT __stdcall get_RadiusValues (
        /*[out,retval]*/ struct IValueList * * RadiusValues ) = 0;
      virtual HRESULT __stdcall raw_DrawRing (
        /*[in]*/ double Value,
        /*[in]*/ long Z ) = 0;
      virtual HRESULT __stdcall get_CirclePen (
        /*[out,retval]*/ struct IPen * * CirclePen ) = 0;
      virtual HRESULT __stdcall get_CircleLabels (
        /*[out,retval]*/ struct ICircleLabels * * Value ) = 0;
      virtual HRESULT __stdcall get_Brush (
        /*[out,retval]*/ struct IBrush * * Value ) = 0;
      virtual HRESULT __stdcall raw_LoadBackImage (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_ClearBackImage ( ) = 0;
      virtual HRESULT __stdcall get_ClockWiseLabels (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ClockWiseLabels (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_CircleLabelsInside (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_CircleLabelsInside (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("b6c10505-fb89-11d4-93c9-006008a7eed4"))
IRadarSeries : ICustomPolarSeries
{};

struct __declspec(uuid("b6c1050b-fb89-11d4-93c9-006008a7eed4"))
IPolarSeries : ICustomPolarSeries
{
    //
    // Wrapper methods for error-handling
    //

    long AddPolar (
        double Angle,
        double Value,
        _bstr_t ALabel,
        OLE_COLOR Valu );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddPolar (
        /*[in]*/ double Angle,
        /*[in]*/ double Value,
        /*[in]*/ BSTR ALabel,
        /*[in]*/ OLE_COLOR Valu,
        /*[out,retval]*/ long * AColor ) = 0;
};

struct __declspec(uuid("b6c10539-fb89-11d4-93c9-006008a7eed4"))
IClockSeries : ICustomPolarSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetRomanNumbers,put=PutRomanNumbers))
    VARIANT_BOOL RomanNumbers;
    __declspec(property(get=GetPenHours))
    IPenPtr PenHours;
    __declspec(property(get=GetPenMinutes))
    IPenPtr PenMinutes;
    __declspec(property(get=GetPenSeconds))
    IPenPtr PenSeconds;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetRomanNumbers ( );
    void PutRomanNumbers (
        VARIANT_BOOL Value );
    IPenPtr GetPenHours ( );
    IPenPtr GetPenMinutes ( );
    IPenPtr GetPenSeconds ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RomanNumbers (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_RomanNumbers (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_PenHours (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_PenMinutes (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_PenSeconds (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
};

struct __declspec(uuid("b6c1053a-fb89-11d4-93c9-006008a7eed4"))
IWindRoseSeries : ICustomPolarSeries
{};

struct __declspec(uuid("41a5c203-7f36-4e11-840d-d41230760d8e"))
IDonutSeries : IPieSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetDonutPercent,put=PutDonutPercent))
    long DonutPercent;

    //
    // Wrapper methods for error-handling
    //

    long GetDonutPercent ( );
    void PutDonutPercent (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DonutPercent (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_DonutPercent (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("69a3c18d-728e-47b5-9144-7c58b59aa42d"))
ISmithSeries : ICircledSeries
{
    //
    // Property data
    //

    __declspec(property(get=GetCLabels,put=PutCLabels))
    VARIANT_BOOL CLabels;
    __declspec(property(get=GetCLabelsFont))
    ITeeFontPtr CLabelsFont;
    __declspec(property(get=GetResistenceValues))
    IValueListPtr ResistenceValues;
    __declspec(property(get=GetReactanceValues))
    IValueListPtr ReactanceValues;
    __declspec(property(get=GetPointer))
    IPointerPtr Pointer;
    __declspec(property(get=GetRCirclePen))
    IPenPtr RCirclePen;
    __declspec(property(get=GetRLabels,put=PutRLabels))
    VARIANT_BOOL RLabels;
    __declspec(property(get=GetRLabelsFont))
    ITeeFontPtr RLabelsFont;
    __declspec(property(get=GetCCirclePen))
    IPenPtr CCirclePen;
    __declspec(property(get=GetCirclePen))
    IPenPtr CirclePen;

    //
    // Wrapper methods for error-handling
    //

    IPenPtr GetCCirclePen ( );
    IPenPtr GetCirclePen ( );
    VARIANT_BOOL GetCLabels ( );
    void PutCLabels (
        VARIANT_BOOL Value );
    ITeeFontPtr GetCLabelsFont ( );
    IValueListPtr GetResistenceValues ( );
    IValueListPtr GetReactanceValues ( );
    IPointerPtr GetPointer ( );
    IPenPtr GetRCirclePen ( );
    VARIANT_BOOL GetRLabels ( );
    void PutRLabels (
        VARIANT_BOOL Value );
    ITeeFontPtr GetRLabelsFont ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CCirclePen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_CirclePen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_CLabels (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_CLabels (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_CLabelsFont (
        /*[out,retval]*/ struct ITeeFont * * Value ) = 0;
      virtual HRESULT __stdcall get_ResistenceValues (
        /*[out,retval]*/ struct IValueList * * Value ) = 0;
      virtual HRESULT __stdcall get_ReactanceValues (
        /*[out,retval]*/ struct IValueList * * Value ) = 0;
      virtual HRESULT __stdcall get_Pointer (
        /*[out,retval]*/ struct IPointer * * Value ) = 0;
      virtual HRESULT __stdcall get_RCirclePen (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall get_RLabels (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_RLabels (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_RLabelsFont (
        /*[out,retval]*/ struct ITeeFont * * Value ) = 0;
};

struct __declspec(uuid("b6c10485-fb89-11d4-93c9-006008a7eed4"))
ITChart : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAspect))
    IAspectPtr Aspect;
    __declspec(property(get=GetAxis))
    IAxesPtr Axis;
    __declspec(property(get=GetCanvas))
    ICanvasPtr Canvas;
    __declspec(property(get=GetClipPoints,put=PutClipPoints))
    VARIANT_BOOL ClipPoints;
    __declspec(property(get=GetCursor,put=PutCursor))
    short Cursor;
    __declspec(property(get=GetDragCursor,put=PutDragCursor))
    short DragCursor;
    __declspec(property(get=GetDragMode,put=PutDragMode))
    enum EDragMode DragMode;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetExport))
    IExportPtr Export;
    __declspec(property(get=GetFooter))
    ITitlesPtr Footer;
    __declspec(property(get=GetFrame))
    IPenPtr Frame;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetImport))
    IImportPtr Import;
    __declspec(property(get=GetLeft,put=PutLeft))
    long Left;
    __declspec(property(get=GetLegend))
    ILegendPtr Legend;
    __declspec(property(get=GetPage))
    IPagePtr Page;
    __declspec(property(get=GetPanel))
    IPanelPtr Panel;
    __declspec(property(get=GetPrinter))
    IPrinterPtr Printer;
    __declspec(property(get=GetScroll))
    IScrollPtr Scroll;
    __declspec(property(get=GetaSeries))
    ISeriesPtr aSeries[];
    __declspec(property(get=GetSeriesCount))
    long SeriesCount;
    __declspec(property(get=GetHeader))
    ITitlesPtr Header;
    __declspec(property(get=GetTop,put=PutTop))
    long Top;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetWalls))
    IWallsPtr Walls;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetZoom))
    IZoomPtr Zoom;
    __declspec(property(get=GetTimerEnabled,put=PutTimerEnabled))
    VARIANT_BOOL TimerEnabled;
    __declspec(property(get=GetTimerInterval,put=PutTimerInterval))
    long TimerInterval;
    __declspec(property(get=GetAutoRepaint,put=PutAutoRepaint))
    VARIANT_BOOL AutoRepaint;
    __declspec(property(get=GetEnvironment))
    IEnvironmentPtr Environment;
    __declspec(property(get=GetChartLink))
    long ChartLink;
    __declspec(property(get=GetMousePosition))
    ITeePoint2DPtr MousePosition;
    __declspec(property(get=GetTools))
    IToolListPtr Tools;
    __declspec(property(get=GetSubHeader))
    ITitlesPtr SubHeader;
    __declspec(property(get=GetSubFooter))
    ITitlesPtr SubFooter;

    //
    // Wrapper methods for error-handling
    //

    IAspectPtr GetAspect ( );
    IAxesPtr GetAxis ( );
    ICanvasPtr GetCanvas ( );
    VARIANT_BOOL GetClipPoints ( );
    void PutClipPoints (
        VARIANT_BOOL ClipPoints );
    short GetCursor ( );
    void PutCursor (
        short Cursor );
    short GetDragCursor ( );
    void PutDragCursor (
        short DragCursor );
    enum EDragMode GetDragMode ( );
    void PutDragMode (
        enum EDragMode DragMode );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL Enabled );
    IExportPtr GetExport ( );
    ITitlesPtr GetFooter ( );
    IPenPtr GetFrame ( );
    ITitlesPtr GetHeader ( );
    long GetHeight ( );
    void PutHeight (
        long Height );
    IImportPtr GetImport ( );
    long GetLeft ( );
    void PutLeft (
        long Left );
    ILegendPtr GetLegend ( );
    IPagePtr GetPage ( );
    IPanelPtr GetPanel ( );
    IPrinterPtr GetPrinter ( );
    IScrollPtr GetScroll ( );
    ISeriesPtr GetaSeries (
        long SeriesIndex );
    long GetSeriesCount ( );
    long GetTop ( );
    void PutTop (
        long Top );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Visible );
    IWallsPtr GetWalls ( );
    long GetWidth ( );
    void PutWidth (
        long Width );
    IZoomPtr GetZoom ( );
    HRESULT AboutBox ( );
    long AddSeries (
        enum ESeriesClass SeriesClass );
    HRESULT ChangeSeriesType (
        long SeriesIndex,
        enum ESeriesClass NewSeriesType );
    long CloneSeries (
        long SourceSeriesIndex );
    HRESULT Draw (
        long DC,
        long Left,
        long Top,
        long Right,
        long Bottom );
    HRESULT ExchangeSeries (
        long Series1,
        long Series2 );
    double GetDateTimeStep (
        enum EDateTimeStep DateTimeStep );
    OLE_COLOR GetFreeSeriesColor (
        VARIANT_BOOL CheckBackgroundColor );
    ISeriesPtr GetLabelsSeries (
        enum EAxisType DestAxis );
    VARIANT_BOOL IsFreeSeriesColor (
        OLE_COLOR AColor,
        VARIANT_BOOL CheckBackgroundColor );
    HRESULT RemoveAllSeries ( );
    HRESULT RemoveSeries (
        long SeriesIndex );
    HRESULT Repaint ( );
    _bstr_t SeriesTitleLegend (
        long ASeriesIndex );
    HRESULT ShowEditor (
        long SeriesIndex );
    HRESULT StopMouse ( );
    VARIANT_BOOL GetTimerEnabled ( );
    void PutTimerEnabled (
        VARIANT_BOOL TimerEnabled );
    long GetTimerInterval ( );
    void PutTimerInterval (
        long TimerInterval );
    VARIANT_BOOL GetAutoRepaint ( );
    void PutAutoRepaint (
        VARIANT_BOOL Value );
    HRESULT EditOneSeries (
        long SeriesIndex );
    IEnvironmentPtr GetEnvironment ( );
    long GetChartLink ( );
    ITeePoint2DPtr GetMousePosition ( );
    HRESULT ChartRect (
        long Left,
        long Top,
        long Right,
        long Bottom );
    IToolListPtr GetTools ( );
    ITitlesPtr GetSubHeader ( );
    ITitlesPtr GetSubFooter ( );
    HRESULT ClearChart ( );
    HRESULT RefreshData ( );
    ISeriesPtr Series (
        long SeriesIndex );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Aspect (
        /*[out,retval]*/ struct IAspect * * Aspect ) = 0;
      virtual HRESULT __stdcall get_Axis (
        /*[out,retval]*/ struct IAxes * * Axis ) = 0;
      virtual HRESULT __stdcall get_Canvas (
        /*[out,retval]*/ struct ICanvas * * Canvas ) = 0;
      virtual HRESULT __stdcall get_ClipPoints (
        /*[out,retval]*/ VARIANT_BOOL * ClipPoints ) = 0;
      virtual HRESULT __stdcall put_ClipPoints (
        /*[in]*/ VARIANT_BOOL ClipPoints ) = 0;
      virtual HRESULT __stdcall get_Cursor (
        /*[out,retval]*/ short * Cursor ) = 0;
      virtual HRESULT __stdcall put_Cursor (
        /*[in]*/ short Cursor ) = 0;
      virtual HRESULT __stdcall get_DragCursor (
        /*[out,retval]*/ short * DragCursor ) = 0;
      virtual HRESULT __stdcall put_DragCursor (
        /*[in]*/ short DragCursor ) = 0;
      virtual HRESULT __stdcall get_DragMode (
        /*[out,retval]*/ enum EDragMode * DragMode ) = 0;
      virtual HRESULT __stdcall put_DragMode (
        /*[in]*/ enum EDragMode DragMode ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * Enabled ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL Enabled ) = 0;
      virtual HRESULT __stdcall get_Export (
        /*[out,retval]*/ struct IExport * * Export ) = 0;
      virtual HRESULT __stdcall get_Footer (
        /*[out,retval]*/ struct ITitles * * Footer ) = 0;
      virtual HRESULT __stdcall get_Frame (
        /*[out,retval]*/ struct IPen * * Frame ) = 0;
      virtual HRESULT __stdcall get_Header (
        /*[out,retval]*/ struct ITitles * * Header ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ long Height ) = 0;
      virtual HRESULT __stdcall get_Import (
        /*[out,retval]*/ struct IImport * * Import ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ long * Left ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ long Left ) = 0;
      virtual HRESULT __stdcall get_Legend (
        /*[out,retval]*/ struct ILegend * * Legend ) = 0;
      virtual HRESULT __stdcall get_Page (
        /*[out,retval]*/ struct IPage * * Page ) = 0;
      virtual HRESULT __stdcall get_Panel (
        /*[out,retval]*/ struct IPanel * * Panel ) = 0;
      virtual HRESULT __stdcall get_Printer (
        /*[out,retval]*/ struct IPrinter * * Printer ) = 0;
      virtual HRESULT __stdcall get_Scroll (
        /*[out,retval]*/ struct IScroll * * Scroll ) = 0;
      virtual HRESULT __stdcall get_aSeries (
        /*[in]*/ long SeriesIndex,
        /*[out,retval]*/ struct ISeries * * Index ) = 0;
      virtual HRESULT __stdcall get_SeriesCount (
        /*[out,retval]*/ long * SeriesCount ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ long * Top ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ long Top ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall get_Walls (
        /*[out,retval]*/ struct IWalls * * Walls ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long Width ) = 0;
      virtual HRESULT __stdcall get_Zoom (
        /*[out,retval]*/ struct IZoom * * Zoom ) = 0;
      virtual HRESULT __stdcall raw_AboutBox ( ) = 0;
      virtual HRESULT __stdcall raw_AddSeries (
        /*[in]*/ enum ESeriesClass SeriesClass,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_ChangeSeriesType (
        /*[in]*/ long SeriesIndex,
        /*[in]*/ enum ESeriesClass NewSeriesType ) = 0;
      virtual HRESULT __stdcall raw_CloneSeries (
        /*[in]*/ long SourceSeriesIndex,
        /*[out,retval]*/ long * SeriesIndex ) = 0;
      virtual HRESULT __stdcall raw_Draw (
        /*[in]*/ long DC,
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Right,
        /*[in]*/ long Bottom ) = 0;
      virtual HRESULT __stdcall raw_ExchangeSeries (
        /*[in]*/ long Series1,
        /*[in]*/ long Series2 ) = 0;
      virtual HRESULT __stdcall raw_GetDateTimeStep (
        /*[in]*/ enum EDateTimeStep DateTimeStep,
        /*[out,retval]*/ double * Step ) = 0;
      virtual HRESULT __stdcall raw_GetFreeSeriesColor (
        /*[in]*/ VARIANT_BOOL CheckBackgroundColor,
        /*[out,retval]*/ OLE_COLOR * CheckBackground ) = 0;
      virtual HRESULT __stdcall raw_GetLabelsSeries (
        /*[in]*/ enum EAxisType DestAxis,
        /*[out,retval]*/ struct ISeries * * Axis ) = 0;
      virtual HRESULT __stdcall raw_IsFreeSeriesColor (
        /*[in]*/ OLE_COLOR AColor,
        /*[in]*/ VARIANT_BOOL CheckBackgroundColor,
        /*[out,retval]*/ VARIANT_BOOL * CheckBackground ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllSeries ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveSeries (
        /*[in]*/ long SeriesIndex ) = 0;
      virtual HRESULT __stdcall raw_Repaint ( ) = 0;
      virtual HRESULT __stdcall raw_SeriesTitleLegend (
        /*[in]*/ long ASeriesIndex,
        /*[out,retval]*/ BSTR * SeriesIndex ) = 0;
      virtual HRESULT __stdcall raw_ShowEditor (
        long SeriesIndex ) = 0;
      virtual HRESULT __stdcall raw_StopMouse ( ) = 0;
      virtual HRESULT __stdcall get_TimerEnabled (
        /*[out,retval]*/ VARIANT_BOOL * TimerEnabled ) = 0;
      virtual HRESULT __stdcall put_TimerEnabled (
        /*[in]*/ VARIANT_BOOL TimerEnabled ) = 0;
      virtual HRESULT __stdcall get_TimerInterval (
        /*[out,retval]*/ long * TimerInterval ) = 0;
      virtual HRESULT __stdcall put_TimerInterval (
        /*[in]*/ long TimerInterval ) = 0;
      virtual HRESULT __stdcall get_AutoRepaint (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AutoRepaint (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_EditOneSeries (
        /*[in]*/ long SeriesIndex ) = 0;
      virtual HRESULT __stdcall get_Environment (
        /*[out,retval]*/ struct IEnvironment * * Value ) = 0;
      virtual HRESULT __stdcall get_ChartLink (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_MousePosition (
        /*[out,retval]*/ struct ITeePoint2D * * Value ) = 0;
      virtual HRESULT __stdcall raw_ChartRect (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Right,
        /*[in]*/ long Bottom ) = 0;
      virtual HRESULT __stdcall get_Tools (
        /*[out,retval]*/ struct IToolList * * Value ) = 0;
      virtual HRESULT __stdcall get_SubHeader (
        /*[out,retval]*/ struct ITitles * * Value ) = 0;
      virtual HRESULT __stdcall get_SubFooter (
        /*[out,retval]*/ struct ITitles * * Value ) = 0;
      virtual HRESULT __stdcall raw_ClearChart ( ) = 0;
      virtual HRESULT __stdcall raw_RefreshData ( ) = 0;
      virtual HRESULT __stdcall raw_Series (
        /*[in]*/ long SeriesIndex,
        /*[out,retval]*/ struct ISeries * * Index ) = 0;
};

struct __declspec(uuid("b6c10513-fb89-11d4-93c9-006008a7eed4"))
ITeeLinked : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutChartLink))
    long ChartLink;
    __declspec(property(put=PutChart))
    ITChartPtr Chart;

    //
    // Wrapper methods for error-handling
    //

    void PutChart (
        struct ITChart * _arg1 );
    void PutChartLink (
        long _arg1 );
    HRESULT AboutBox ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Chart (
        /*[in]*/ struct ITChart * _arg1 ) = 0;
      virtual HRESULT __stdcall put_ChartLink (
        /*[in]*/ long _arg1 ) = 0;
      virtual HRESULT __stdcall raw_AboutBox ( ) = 0;
};

struct __declspec(uuid("b6c1052b-fb89-11d4-93c9-006008a7eed4"))
ITeeListBox : ITeeLinked
{
    //
    // Property data
    //

    __declspec(property(get=GetSelectedSeries,put=PutSelectedSeries))
    long SelectedSeries;
    __declspec(property(get=GetShowActive,put=PutShowActive))
    VARIANT_BOOL ShowActive;
    __declspec(property(get=GetShowColor,put=PutShowColor))
    VARIANT_BOOL ShowColor;
    __declspec(property(get=GetShowTitle,put=PutShowTitle))
    VARIANT_BOOL ShowTitle;
    __declspec(property(get=GetShowIcon,put=PutShowIcon))
    VARIANT_BOOL ShowIcon;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;

    //
    // Wrapper methods for error-handling
    //

    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR Value );
    HRESULT UpdateSeries ( );
    long GetSelectedSeries ( );
    void PutSelectedSeries (
        long Value );
    VARIANT_BOOL GetShowActive ( );
    void PutShowActive (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetShowColor ( );
    void PutShowColor (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetShowTitle ( );
    void PutShowTitle (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetShowIcon ( );
    void PutShowIcon (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall raw_UpdateSeries ( ) = 0;
      virtual HRESULT __stdcall get_SelectedSeries (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_SelectedSeries (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_ShowActive (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ShowActive (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ShowColor (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ShowColor (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ShowTitle (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ShowTitle (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ShowIcon (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ShowIcon (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("b6c1052e-fb89-11d4-93c9-006008a7eed4"))
ITeeEditor : ITeeLinked
{
    //
    // Property data
    //

    __declspec(property(get=GetEditorTitle,put=PutEditorTitle))
    _bstr_t EditorTitle;
    __declspec(property(get=GetDefaultPage,put=PutDefaultPage))
    enum ETeeEditorPage DefaultPage;
    __declspec(property(get=GetAutoRepaint,put=PutAutoRepaint))
    VARIANT_BOOL AutoRepaint;
    __declspec(property(get=GetShowPages))
    ITeeEditorShowPagesPtr ShowPages;
    __declspec(property(get=GetOptions))
    ITeeEditorOptionsPtr Options;
    __declspec(property(get=GetEditorLink))
    long EditorLink;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetEditorTitle ( );
    void PutEditorTitle (
        _bstr_t Value );
    enum ETeeEditorPage GetDefaultPage ( );
    void PutDefaultPage (
        enum ETeeEditorPage Value );
    HRESULT ShowEditor ( );
    VARIANT_BOOL GetAutoRepaint ( );
    void PutAutoRepaint (
        VARIANT_BOOL Value );
    ITeeEditorShowPagesPtr GetShowPages ( );
    long GetEditorLink ( );
    ITeeEditorOptionsPtr GetOptions ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EditorTitle (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_EditorTitle (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_DefaultPage (
        /*[out,retval]*/ enum ETeeEditorPage * Value ) = 0;
      virtual HRESULT __stdcall put_DefaultPage (
        /*[in]*/ enum ETeeEditorPage Value ) = 0;
      virtual HRESULT __stdcall raw_ShowEditor ( ) = 0;
      virtual HRESULT __stdcall get_AutoRepaint (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AutoRepaint (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ShowPages (
        /*[out,retval]*/ struct ITeeEditorShowPages * * Value ) = 0;
      virtual HRESULT __stdcall get_EditorLink (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Options (
        /*[out,retval]*/ struct ITeeEditorOptions * * Value ) = 0;
};

struct __declspec(uuid("b6c1052f-fb89-11d4-93c9-006008a7eed4"))
ITeePreviewer : ITeeLinked
{
    //
    // Property data
    //

    __declspec(property(get=GetPreviewTitle,put=PutPreviewTitle))
    _bstr_t PreviewTitle;
    __declspec(property(get=GetPaperColor,put=PutPaperColor))
    OLE_COLOR PaperColor;
    __declspec(property(get=GetPreviewerLink))
    long PreviewerLink;
    __declspec(property(get=GetMaximized,put=PutMaximized))
    VARIANT_BOOL Maximized;
    __declspec(property(get=GetOptions))
    ITeePreviewerOptionsPtr Options;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetPreviewTitle ( );
    void PutPreviewTitle (
        _bstr_t Value );
    HRESULT ShowPreview ( );
    OLE_COLOR GetPaperColor ( );
    void PutPaperColor (
        OLE_COLOR Value );
    long GetPreviewerLink ( );
    VARIANT_BOOL GetMaximized ( );
    void PutMaximized (
        VARIANT_BOOL Value );
    ITeePreviewerOptionsPtr GetOptions ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PreviewTitle (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_PreviewTitle (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall raw_ShowPreview ( ) = 0;
      virtual HRESULT __stdcall get_PaperColor (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_PaperColor (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_PreviewerLink (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Maximized (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Maximized (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Options (
        /*[out,retval]*/ struct ITeePreviewerOptions * * Value ) = 0;
};

struct __declspec(uuid("b6c1052a-fb89-11d4-93c9-006008a7eed4"))
ITeeCommander : ITeeLinked
{
    //
    // Property data
    //

    __declspec(property(get=GetLabelValues,put=PutLabelValues))
    VARIANT_BOOL LabelValues;
    __declspec(property(put=PutEditor))
    ITeeEditorPtr Editor;
    __declspec(property(put=PutPreviewer))
    ITeePreviewerPtr Previewer;
    __declspec(property(put=PutEditorLink))
    long EditorLink;
    __declspec(property(put=PutPreviewerLink))
    long PreviewerLink;
    __declspec(property(get=GetVertical,put=PutVertical))
    VARIANT_BOOL Vertical;
    __declspec(property(get=GetButtons,put=PutButtons))
    _variant_t Buttons;
    __declspec(property(get=GetControls,put=PutControls))
    _variant_t Controls;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetLabelValues ( );
    void PutLabelValues (
        VARIANT_BOOL Value );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR Value );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL Value );
    void PutEditor (
        struct ITeeEditor * _arg1 );
    void PutPreviewer (
        struct ITeePreviewer * _arg1 );
    void PutEditorLink (
        long _arg1 );
    void PutPreviewerLink (
        long _arg1 );
    VARIANT_BOOL GetVertical ( );
    void PutVertical (
        VARIANT_BOOL Value );
    _variant_t GetControls ( );
    void PutControls (
        const _variant_t & Value );
    _variant_t GetButtons ( );
    void PutButtons (
        const _variant_t & Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LabelValues (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_LabelValues (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall put_Editor (
        /*[in]*/ struct ITeeEditor * _arg1 ) = 0;
      virtual HRESULT __stdcall put_Previewer (
        /*[in]*/ struct ITeePreviewer * _arg1 ) = 0;
      virtual HRESULT __stdcall put_EditorLink (
        /*[in]*/ long _arg1 ) = 0;
      virtual HRESULT __stdcall put_PreviewerLink (
        /*[in]*/ long _arg1 ) = 0;
      virtual HRESULT __stdcall get_Vertical (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Vertical (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Controls (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall put_Controls (
        /*[in]*/ VARIANT Value ) = 0;
      virtual HRESULT __stdcall get_Buttons (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall put_Buttons (
        /*[in]*/ VARIANT Value ) = 0;
};

struct __declspec(uuid("252a62f5-0c94-48e0-90ad-7b64200e53c1"))
ITeePreviewPanel : ITeeLinked
{
    //
    // Property data
    //

    __declspec(property(get=GetAllowResize,put=PutAllowResize))
    VARIANT_BOOL AllowResize;
    __declspec(property(get=GetAllowMove,put=PutAllowMove))
    VARIANT_BOOL AllowMove;
    __declspec(property(get=GetAsBitmap,put=PutAsBitmap))
    VARIANT_BOOL AsBitmap;
    __declspec(property(get=GetDragImage,put=PutDragImage))
    VARIANT_BOOL DragImage;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum ETeePreviewPanelOrientation Orientation;
    __declspec(property(get=GetPaperColor,put=PutPaperColor))
    OLE_COLOR PaperColor;
    __declspec(property(get=GetShadowColor,put=PutShadowColor))
    OLE_COLOR ShadowColor;
    __declspec(property(get=GetShadowSize,put=PutShadowSize))
    long ShadowSize;
    __declspec(property(get=GetShowImage,put=PutShowImage))
    VARIANT_BOOL ShowImage;
    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title;
    __declspec(property(get=GetPanels))
    ITeePanelsListPtr Panels;
    __declspec(property(get=GetGradient))
    IGradientPtr Gradient;
    __declspec(property(get=GetMargins))
    IPenPtr Margins;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAllowResize ( );
    void PutAllowResize (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetAllowMove ( );
    void PutAllowMove (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetAsBitmap ( );
    void PutAsBitmap (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetDragImage ( );
    void PutDragImage (
        VARIANT_BOOL Value );
    enum ETeePreviewPanelOrientation GetOrientation ( );
    void PutOrientation (
        enum ETeePreviewPanelOrientation Value );
    OLE_COLOR GetPaperColor ( );
    void PutPaperColor (
        OLE_COLOR Value );
    OLE_COLOR GetShadowColor ( );
    void PutShadowColor (
        OLE_COLOR Value );
    long GetShadowSize ( );
    void PutShadowSize (
        long Value );
    VARIANT_BOOL GetShowImage ( );
    void PutShowImage (
        VARIANT_BOOL Value );
    _bstr_t GetTitle ( );
    void PutTitle (
        _bstr_t Value );
    HRESULT Repaint ( );
    ITeePanelsListPtr GetPanels ( );
    HRESULT AddChart (
        struct ITChart * Value );
    IGradientPtr GetGradient ( );
    IPenPtr GetMargins ( );
    HRESULT PrintPage ( );
    HRESULT AddChartLink (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AllowResize (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AllowResize (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_AllowMove (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AllowMove (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_AsBitmap (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AsBitmap (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_DragImage (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_DragImage (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum ETeePreviewPanelOrientation * Value ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ enum ETeePreviewPanelOrientation Value ) = 0;
      virtual HRESULT __stdcall get_PaperColor (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_PaperColor (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_ShadowColor (
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_ShadowColor (
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_ShadowSize (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_ShadowSize (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_ShowImage (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ShowImage (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_Title (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall raw_Repaint ( ) = 0;
      virtual HRESULT __stdcall get_Panels (
        /*[out,retval]*/ struct ITeePanelsList * * Value ) = 0;
      virtual HRESULT __stdcall raw_AddChart (
        /*[in]*/ struct ITChart * Value ) = 0;
      virtual HRESULT __stdcall get_Gradient (
        /*[out,retval]*/ struct IGradient * * Value ) = 0;
      virtual HRESULT __stdcall get_Margins (
        /*[out,retval]*/ struct IPen * * Value ) = 0;
      virtual HRESULT __stdcall raw_PrintPage ( ) = 0;
      virtual HRESULT __stdcall raw_AddChartLink (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("fd15f1c9-69d8-4fae-9a96-dd2e0b88ddd4"))
IChartGrid : ITeeLinked
{
    //
    // Property data
    //

    __declspec(property(get=GetCol,put=PutCol))
    long Col;
    __declspec(property(get=GetColCount))
    long ColCount;
    __declspec(property(get=GetColwidths,put=PutColwidths))
    long Colwidths[];
    __declspec(property(get=GetEditorMode,put=PutEditorMode))
    VARIANT_BOOL EditorMode;
    __declspec(property(get=GetGridHeight))
    long GridHeight;
    __declspec(property(get=GetGridWidth))
    long GridWidth;
    __declspec(property(get=GetLeftCol,put=PutLeftCol))
    long LeftCol;
    __declspec(property(get=GetGridLink))
    long GridLink;
    __declspec(property(get=GetShowLabels,put=PutShowLabels))
    VARIANT_BOOL ShowLabels;
    __declspec(property(get=GetShowColors,put=PutShowColors))
    VARIANT_BOOL ShowColors;
    __declspec(property(get=GetShowFields,put=PutShowFields))
    VARIANT_BOOL ShowFields;

    //
    // Wrapper methods for error-handling
    //

    long GetCol ( );
    void PutCol (
        long Value );
    long GetColCount ( );
    long GetColwidths (
        long Index );
    void PutColwidths (
        long Index,
        long Value );
    VARIANT_BOOL GetEditorMode ( );
    void PutEditorMode (
        VARIANT_BOOL Value );
    long GetGridHeight ( );
    long GetGridWidth ( );
    long GetLeftCol ( );
    void PutLeftCol (
        long Value );
    long GetGridLink ( );
    HRESULT RecalcDimensions ( );
    VARIANT_BOOL GetShowLabels ( );
    void PutShowLabels (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetShowColors ( );
    void PutShowColors (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetShowFields ( );
    void PutShowFields (
        VARIANT_BOOL Value );
    IChartGridColsPtr Cols ( );
    IChartGridRowsPtr Rows ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Col (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Col (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_ColCount (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_Colwidths (
        /*[in]*/ long Index,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Colwidths (
        /*[in]*/ long Index,
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_EditorMode (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_EditorMode (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_GridHeight (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_GridWidth (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_LeftCol (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_LeftCol (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_GridLink (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_RecalcDimensions ( ) = 0;
      virtual HRESULT __stdcall get_ShowLabels (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ShowLabels (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ShowColors (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ShowColors (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ShowFields (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ShowFields (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_Cols (
        /*[out,retval]*/ struct IChartGridCols * * Value ) = 0;
      virtual HRESULT __stdcall raw_Rows (
        /*[out,retval]*/ struct IChartGridRows * * Value ) = 0;
};

struct __declspec(uuid("9a52f188-2664-4615-b199-b9aa9ad22861"))
IChartGridNavigator : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutGridLink))
    long GridLink;
    __declspec(property(put=PutGrid))
    IChartGridPtr Grid;

    //
    // Wrapper methods for error-handling
    //

    void PutGrid (
        struct IChartGrid * _arg1 );
    void PutGridLink (
        long _arg1 );
    HRESULT EnableButtons ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Grid (
        /*[in]*/ struct IChartGrid * _arg1 ) = 0;
      virtual HRESULT __stdcall put_GridLink (
        /*[in]*/ long _arg1 ) = 0;
      virtual HRESULT __stdcall raw_EnableButtons ( ) = 0;
};

struct __declspec(uuid("32268bd8-c0d1-473d-a13c-65ab4a58397b"))
IChartPageNavigator : ITeeLinked
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT EnableButtons ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_EnableButtons ( ) = 0;
};

struct __declspec(uuid("8a48ba34-fa69-4168-a477-026f96344c49"))
IChartEditorPanel : ITeeLinked
{
    //
    // Property data
    //

    __declspec(property(get=GetBevelOuter,put=PutBevelOuter))
    enum EPanelBevel BevelOuter;

    //
    // Wrapper methods for error-handling
    //

    HRESULT SelectUnderMouse ( );
    enum EPanelBevel GetBevelOuter ( );
    void PutBevelOuter (
        enum EPanelBevel Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SelectUnderMouse ( ) = 0;
      virtual HRESULT __stdcall get_BevelOuter (
        /*[out,retval]*/ enum EPanelBevel * Value ) = 0;
      virtual HRESULT __stdcall put_BevelOuter (
        /*[in]*/ enum EPanelBevel Value ) = 0;
};

struct __declspec(uuid("4061f8f0-1d1c-11d5-9401-006008a7eed4"))
ISeriesTextSource : ITeeLinked
{
    //
    // Property data
    //

    __declspec(property(get=GetActive,put=PutActive))
    VARIANT_BOOL Active;
    __declspec(property(get=GetHeaderLines,put=PutHeaderLines))
    long HeaderLines;
    __declspec(property(get=GetFields))
    ISeriesTextFieldsPtr Fields;
    __declspec(property(get=GetFieldSeparator,put=PutFieldSeparator))
    _bstr_t FieldSeparator;
    __declspec(property(get=GetFileName,put=PutFileName))
    _bstr_t FileName;
    __declspec(property(get=GetSeries,put=PutSeries))
    _variant_t Series;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Close ( );
    HRESULT Load ( );
    HRESULT LoadAsStream (
        const _variant_t & AStream );
    HRESULT LoadFromFile (
        _bstr_t FileName );
    HRESULT LoadFromURL (
        _bstr_t URL );
    HRESULT Open ( );
    VARIANT_BOOL GetActive ( );
    void PutActive (
        VARIANT_BOOL Value );
    long GetHeaderLines ( );
    void PutHeaderLines (
        long Value );
    ISeriesTextFieldsPtr GetFields ( );
    _bstr_t GetFieldSeparator ( );
    void PutFieldSeparator (
        _bstr_t Value );
    _bstr_t GetFileName ( );
    void PutFileName (
        _bstr_t Value );
    _variant_t GetSeries ( );
    void PutSeries (
        const _variant_t & Value );
    ISeriesTextFieldPtr AddField (
        _bstr_t AName,
        long AIndex );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Close ( ) = 0;
      virtual HRESULT __stdcall raw_Load ( ) = 0;
      virtual HRESULT __stdcall raw_LoadAsStream (
        /*[in]*/ VARIANT AStream ) = 0;
      virtual HRESULT __stdcall raw_LoadFromFile (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_LoadFromURL (
        /*[in]*/ BSTR URL ) = 0;
      virtual HRESULT __stdcall raw_Open ( ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Active (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_HeaderLines (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_HeaderLines (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_Fields (
        /*[out,retval]*/ struct ISeriesTextFields * * Value ) = 0;
      virtual HRESULT __stdcall get_FieldSeparator (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_FieldSeparator (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_FileName (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_FileName (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_Series (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall put_Series (
        /*[in]*/ VARIANT Value ) = 0;
      virtual HRESULT __stdcall raw_AddField (
        /*[in]*/ BSTR AName,
        /*[in]*/ long AIndex,
        /*[out,retval]*/ struct ISeriesTextField * * result ) = 0;
};

struct __declspec(uuid("b6c104ac-fb89-11d4-93c9-006008a7eed4"))
ISeries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetActive,put=PutActive))
    VARIANT_BOOL Active;
    __declspec(property(get=GetasArea))
    IAreaSeriesPtr asArea;
    __declspec(property(get=GetasArrow))
    IArrowSeriesPtr asArrow;
    __declspec(property(get=GetasBar))
    IBarSeriesPtr asBar;
    __declspec(property(get=GetasBubble))
    IBubbleSeriesPtr asBubble;
    __declspec(property(get=GetasCandle))
    ICandleSeriesPtr asCandle;
    __declspec(property(get=GetasBezier))
    IBezierSeriesPtr asBezier;
    __declspec(property(get=GetasContour))
    IContourSeriesPtr asContour;
    __declspec(property(get=GetasErrorBar))
    IErrorBarSeriesPtr asErrorBar;
    __declspec(property(get=GetasFastLine))
    IFastLineSeriesPtr asFastLine;
    __declspec(property(get=GetasGantt))
    IGanttSeriesPtr asGantt;
    __declspec(property(get=GetasHorizBar))
    IHorizBarSeriesPtr asHorizBar;
    __declspec(property(get=GetasLine))
    ILineSeriesPtr asLine;
    __declspec(property(get=GetasPie))
    IPieSeriesPtr asPie;
    __declspec(property(get=GetasPoint))
    IPointSeriesPtr asPoint;
    __declspec(property(get=GetasPolar))
    IPolarSeriesPtr asPolar;
    __declspec(property(get=GetasShape))
    IShapeSeriesPtr asShape;
    __declspec(property(get=GetasSurface))
    ISurfaceSeriesPtr asSurface;
    __declspec(property(get=GetasVolume))
    IVolumeSeriesPtr asVolume;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetColorEachPoint,put=PutColorEachPoint))
    VARIANT_BOOL ColorEachPoint;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetCursor,put=PutCursor))
    short Cursor;
    __declspec(property(get=GetDataSource,put=PutDataSource))
    _variant_t DataSource;
    __declspec(property(get=GetFirstValueIndex))
    long FirstValueIndex;
    __declspec(property(get=GetFunctionType))
    ITeeFunctionPtr FunctionType;
    __declspec(property(get=GetHorizontalAxis,put=PutHorizontalAxis))
    enum EHorizontalAxis HorizontalAxis;
    __declspec(property(get=GetLabelsSource,put=PutLabelsSource))
    _bstr_t LabelsSource;
    __declspec(property(get=GetLastValueIndex))
    long LastValueIndex;
    __declspec(property(get=GetMarks))
    IMarksPtr Marks;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetHorizontalAxisCustom,put=PutHorizontalAxisCustom))
    long HorizontalAxisCustom;
    __declspec(property(get=GetPercentFormat,put=PutPercentFormat))
    _bstr_t PercentFormat;
    __declspec(property(get=GetPointColor,put=PutPointColor))
    OLE_COLOR PointColor[];
    __declspec(property(get=GetPointLabel,put=PutPointLabel))
    _bstr_t PointLabel[];
    __declspec(property(get=GetPointValue,put=PutPointValue))
    double PointValue[];
    __declspec(property(get=GetSeriesType))
    enum ESeriesClass SeriesType;
    __declspec(property(get=GetShowInLegend,put=PutShowInLegend))
    VARIANT_BOOL ShowInLegend;
    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title;
    __declspec(property(get=GetValueFormat,put=PutValueFormat))
    _bstr_t ValueFormat;
    __declspec(property(get=GetValueMarkText))
    _bstr_t ValueMarkText[];
    __declspec(property(get=GetVerticalAxis,put=PutVerticalAxis))
    enum EVerticalAxis VerticalAxis;
    __declspec(property(get=GetXValues))
    IValueListPtr XValues;
    __declspec(property(get=GetYValues))
    IValueListPtr YValues;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetasError))
    IErrorSeriesPtr asError;
    __declspec(property(get=GetasPoint3D))
    IPoint3DSeriesPtr asPoint3D;
    __declspec(property(get=GetasRadar))
    IRadarSeriesPtr asRadar;
    __declspec(property(get=GetVerticalAxisCustom,put=PutVerticalAxisCustom))
    long VerticalAxisCustom;
    __declspec(property(get=GetasClock))
    IClockSeriesPtr asClock;
    __declspec(property(get=GetasWindRose))
    IWindRoseSeriesPtr asWindRose;
    __declspec(property(get=GetasBar3D))
    IBar3DSeriesPtr asBar3D;
    __declspec(property(get=GetasImageBar))
    IImageBarSeriesPtr asImageBar;
    __declspec(property(get=GetMouseValues))
    ITeePoint2DPtr MouseValues;
    __declspec(property(get=GetDepth,put=PutDepth))
    long Depth;
    __declspec(property(get=GetasFunnel))
    IFunnelSeriesPtr asFunnel;
    __declspec(property(get=GetasDonut))
    IDonutSeriesPtr asDonut;
    __declspec(property(get=GetasTriSurface))
    ITriSurfaceSeriesPtr asTriSurface;
    __declspec(property(get=GetasBoxPlot))
    IBoxPlotSeriesPtr asBoxPlot;
    __declspec(property(get=GetasHorizBoxPlot))
    IHorizBoxPlotSeriesPtr asHorizBoxPlot;
    __declspec(property(get=GetasHistogram))
    IHistogramSeriesPtr asHistogram;
    __declspec(property(get=GetasColorGrid))
    IColorGridSeriesPtr asColorGrid;
    __declspec(property(get=GetasHorizLine))
    IHorizLineSeriesPtr asHorizLine;
    __declspec(property(get=GetasBarJoin))
    IBarJoinSeriesPtr asBarJoin;
    __declspec(property(get=GetasHighLow))
    IHighLowSeriesPtr asHighLow;
    __declspec(property(get=GetasWaterfall))
    IWaterfallSeriesPtr asWaterfall;
    __declspec(property(get=GetasSmith))
    ISmithSeriesPtr asSmith;
    __declspec(property(get=GetasPyramid))
    IPyramidSeriesPtr asPyramid;
    __declspec(property(get=GetasMap))
    IMapSeriesPtr asMap;
    __declspec(property(get=GetasCalendar))
    ICalendarSeriesPtr asCalendar;
    __declspec(property(get=GetSeriesLink))
    long SeriesLink;
    __declspec(property(get=GetDatasourceType,put=PutDatasourceType))
    enum EDatasourceType DatasourceType;
    __declspec(property(get=GetValueLists))
    IValueListsPtr ValueLists;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetActive ( );
    void PutActive (
        VARIANT_BOOL Active );
    IAreaSeriesPtr GetasArea ( );
    IArrowSeriesPtr GetasArrow ( );
    IBarSeriesPtr GetasBar ( );
    IBubbleSeriesPtr GetasBubble ( );
    ICandleSeriesPtr GetasCandle ( );
    IErrorBarSeriesPtr GetasErrorBar ( );
    IFastLineSeriesPtr GetasFastLine ( );
    IGanttSeriesPtr GetasGantt ( );
    IHorizBarSeriesPtr GetasHorizBar ( );
    ILineSeriesPtr GetasLine ( );
    IPieSeriesPtr GetasPie ( );
    IPointSeriesPtr GetasPoint ( );
    IPolarSeriesPtr GetasPolar ( );
    IShapeSeriesPtr GetasShape ( );
    ISurfaceSeriesPtr GetasSurface ( );
    IVolumeSeriesPtr GetasVolume ( );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR Color );
    VARIANT_BOOL GetColorEachPoint ( );
    void PutColorEachPoint (
        VARIANT_BOOL ColorEachPoint );
    long GetCount ( );
    short GetCursor ( );
    void PutCursor (
        short Cursor );
    _variant_t GetDataSource ( );
    void PutDataSource (
        const _variant_t & DataSource );
    long GetFirstValueIndex ( );
    ITeeFunctionPtr GetFunctionType ( );
    enum EHorizontalAxis GetHorizontalAxis ( );
    void PutHorizontalAxis (
        enum EHorizontalAxis HorizontalAxis );
    _bstr_t GetLabelsSource ( );
    void PutLabelsSource (
        _bstr_t LabelsSource );
    long GetLastValueIndex ( );
    IMarksPtr GetMarks ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    _bstr_t GetPercentFormat ( );
    void PutPercentFormat (
        _bstr_t PercentFormat );
    OLE_COLOR GetPointColor (
        long Index );
    void PutPointColor (
        long Index,
        OLE_COLOR Value );
    _bstr_t GetPointLabel (
        long Index );
    void PutPointLabel (
        long Index,
        _bstr_t Value );
    double GetPointValue (
        long Index );
    void PutPointValue (
        long Index,
        double Value );
    enum ESeriesClass GetSeriesType ( );
    VARIANT_BOOL GetShowInLegend ( );
    void PutShowInLegend (
        VARIANT_BOOL ShowInLegend );
    _bstr_t GetTitle ( );
    void PutTitle (
        _bstr_t Title );
    _bstr_t GetValueFormat ( );
    void PutValueFormat (
        _bstr_t ValueFormat );
    _bstr_t GetValueMarkText (
        long ValueIndex );
    enum EVerticalAxis GetVerticalAxis ( );
    void PutVerticalAxis (
        enum EVerticalAxis VerticalAxis );
    IValueListPtr GetXValues ( );
    IValueListPtr GetYValues ( );
    long GetZOrder ( );
    long Add (
        double AValue,
        _bstr_t ALabel,
        OLE_COLOR Value );
    long AddNull (
        _bstr_t SomeLabel );
    long AddXY (
        double AX,
        double AY,
        _bstr_t ALabel,
        OLE_COLOR Value );
    long CalcXPos (
        long SomeValueIndex );
    long CalcXPosValue (
        double SomeValue );
    long CalcXSizeValue (
        double SomeValue );
    long CalcYPos (
        long SomeValueIndex );
    long CalcYPosValue (
        double SomeValue );
    long CalcYSizeValue (
        double SomeValue );
    HRESULT CheckDataSource ( );
    HRESULT Clear ( );
    long Clicked (
        long XCoord,
        long YCoord );
    HRESULT Delete (
        long Index );
    HRESULT FillSampleValues (
        long NumValues );
    long GetMousePoint ( );
    VARIANT_BOOL IsNull (
        long ValueIndex );
    HRESULT RefreshSeries ( );
    HRESULT SetFunction (
        enum EFunctionType AFunction );
    HRESULT SwapValues (
        long a,
        long b );
    double XScreenToValue (
        long ScreenCoord );
    _bstr_t XValueToText (
        double SomeValue );
    double YScreenToValue (
        long ScreenCoord );
    _bstr_t YValueToText (
        double SomeValue );
    IBezierSeriesPtr GetasBezier ( );
    IContourSeriesPtr GetasContour ( );
    IErrorSeriesPtr GetasError ( );
    IPoint3DSeriesPtr GetasPoint3D ( );
    IRadarSeriesPtr GetasRadar ( );
    long AddNullXY (
        double X,
        double Y,
        _bstr_t ALabel );
    _bstr_t LegendString (
        long LegendIndex,
        enum ELegendTextStyle LegendTextStyle );
    OLE_COLOR LegendItemColor (
        long LegendIndex );
    long CountLegendItems ( );
    long LegendToValueIndex (
        long LegendIndex );
    long VisibleCount ( );
    HRESULT AssignValues (
        long SeriesIndex );
    long GetHorizontalAxisCustom ( );
    void PutHorizontalAxisCustom (
        long Value );
    long GetVerticalAxisCustom ( );
    void PutVerticalAxisCustom (
        long Value );
    IClockSeriesPtr GetasClock ( );
    IWindRoseSeriesPtr GetasWindRose ( );
    IBar3DSeriesPtr GetasBar3D ( );
    IImageBarSeriesPtr GetasImageBar ( );
    HRESULT DisconnectAxisCustom (
        VARIANT_BOOL IsHorizontal );
    ITeePoint2DPtr GetMouseValues ( );
    HRESULT AddArray (
        long ArraySize,
        const _variant_t & YArray,
        const _variant_t & XArray );
    long GetDepth ( );
    void PutDepth (
        long Value );
    IDonutSeriesPtr GetasDonut ( );
    ITriSurfaceSeriesPtr GetasTriSurface ( );
    IBoxPlotSeriesPtr GetasBoxPlot ( );
    IHorizBoxPlotSeriesPtr GetasHorizBoxPlot ( );
    IHistogramSeriesPtr GetasHistogram ( );
    IColorGridSeriesPtr GetasColorGrid ( );
    IHorizLineSeriesPtr GetasHorizLine ( );
    IBarJoinSeriesPtr GetasBarJoin ( );
    IHighLowSeriesPtr GetasHighLow ( );
    IWaterfallSeriesPtr GetasWaterfall ( );
    ISmithSeriesPtr GetasSmith ( );
    IPyramidSeriesPtr GetasPyramid ( );
    IMapSeriesPtr GetasMap ( );
    IFunnelSeriesPtr GetasFunnel ( );
    ICalendarSeriesPtr GetasCalendar ( );
    HRESULT FreeDatasource (
        VARIANT_BOOL SurePrompt );
    long GetSeriesLink ( );
    enum EDatasourceType GetDatasourceType ( );
    void PutDatasourceType (
        enum EDatasourceType Value );
    IValueListsPtr GetValueLists ( );
    VARIANT_BOOL IsNan (
        double Value );
    HRESULT DeleteRange (
        long Start,
        long Quantity );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ VARIANT_BOOL * Active ) = 0;
      virtual HRESULT __stdcall put_Active (
        /*[in]*/ VARIANT_BOOL Active ) = 0;
      virtual HRESULT __stdcall get_asArea (
        /*[out,retval]*/ struct IAreaSeries * * asArea ) = 0;
      virtual HRESULT __stdcall get_asArrow (
        /*[out,retval]*/ struct IArrowSeries * * asArrow ) = 0;
      virtual HRESULT __stdcall get_asBar (
        /*[out,retval]*/ struct IBarSeries * * asBar ) = 0;
      virtual HRESULT __stdcall get_asBubble (
        /*[out,retval]*/ struct IBubbleSeries * * asBubble ) = 0;
      virtual HRESULT __stdcall get_asCandle (
        /*[out,retval]*/ struct ICandleSeries * * asCandle ) = 0;
      virtual HRESULT __stdcall get_asErrorBar (
        /*[out,retval]*/ struct IErrorBarSeries * * asErrorBar ) = 0;
      virtual HRESULT __stdcall get_asFastLine (
        /*[out,retval]*/ struct IFastLineSeries * * asFastLine ) = 0;
      virtual HRESULT __stdcall get_asGantt (
        /*[out,retval]*/ struct IGanttSeries * * asGantt ) = 0;
      virtual HRESULT __stdcall get_asHorizBar (
        /*[out,retval]*/ struct IHorizBarSeries * * asHorizBar ) = 0;
      virtual HRESULT __stdcall get_asLine (
        /*[out,retval]*/ struct ILineSeries * * asLine ) = 0;
      virtual HRESULT __stdcall get_asPie (
        /*[out,retval]*/ struct IPieSeries * * asPie ) = 0;
      virtual HRESULT __stdcall get_asPoint (
        /*[out,retval]*/ struct IPointSeries * * asPoint ) = 0;
      virtual HRESULT __stdcall get_asPolar (
        /*[out,retval]*/ struct IPolarSeries * * asPolar ) = 0;
      virtual HRESULT __stdcall get_asShape (
        /*[out,retval]*/ struct IShapeSeries * * asShape ) = 0;
      virtual HRESULT __stdcall get_asSurface (
        /*[out,retval]*/ struct ISurfaceSeries * * asSurface ) = 0;
      virtual HRESULT __stdcall get_asVolume (
        /*[out,retval]*/ struct IVolumeSeries * * asVolume ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * Color ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR Color ) = 0;
      virtual HRESULT __stdcall get_ColorEachPoint (
        /*[out,retval]*/ VARIANT_BOOL * ColorEachPoint ) = 0;
      virtual HRESULT __stdcall put_ColorEachPoint (
        /*[in]*/ VARIANT_BOOL ColorEachPoint ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Cursor (
        /*[out,retval]*/ short * Cursor ) = 0;
      virtual HRESULT __stdcall put_Cursor (
        /*[in]*/ short Cursor ) = 0;
      virtual HRESULT __stdcall get_DataSource (
        /*[out,retval]*/ VARIANT * DataSource ) = 0;
      virtual HRESULT __stdcall put_DataSource (
        /*[in]*/ VARIANT DataSource ) = 0;
      virtual HRESULT __stdcall get_FirstValueIndex (
        /*[out,retval]*/ long * FirstValueIndex ) = 0;
      virtual HRESULT __stdcall get_FunctionType (
        /*[out,retval]*/ struct ITeeFunction * * FunctionType ) = 0;
      virtual HRESULT __stdcall get_HorizontalAxis (
        /*[out,retval]*/ enum EHorizontalAxis * HorizontalAxis ) = 0;
      virtual HRESULT __stdcall put_HorizontalAxis (
        /*[in]*/ enum EHorizontalAxis HorizontalAxis ) = 0;
      virtual HRESULT __stdcall get_LabelsSource (
        /*[out,retval]*/ BSTR * LabelsSource ) = 0;
      virtual HRESULT __stdcall put_LabelsSource (
        /*[in]*/ BSTR LabelsSource ) = 0;
      virtual HRESULT __stdcall get_LastValueIndex (
        /*[out,retval]*/ long * LastValueIndex ) = 0;
      virtual HRESULT __stdcall get_Marks (
        /*[out,retval]*/ struct IMarks * * Marks ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_PercentFormat (
        /*[out,retval]*/ BSTR * PercentFormat ) = 0;
      virtual HRESULT __stdcall put_PercentFormat (
        /*[in]*/ BSTR PercentFormat ) = 0;
      virtual HRESULT __stdcall get_PointColor (
        /*[in]*/ long Index,
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall put_PointColor (
        /*[in]*/ long Index,
        /*[in]*/ OLE_COLOR Value ) = 0;
      virtual HRESULT __stdcall get_PointLabel (
        /*[in]*/ long Index,
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_PointLabel (
        /*[in]*/ long Index,
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_PointValue (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_PointValue (
        /*[in]*/ long Index,
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_SeriesType (
        /*[out,retval]*/ enum ESeriesClass * SeriesType ) = 0;
      virtual HRESULT __stdcall get_ShowInLegend (
        /*[out,retval]*/ VARIANT_BOOL * ShowInLegend ) = 0;
      virtual HRESULT __stdcall put_ShowInLegend (
        /*[in]*/ VARIANT_BOOL ShowInLegend ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ BSTR * Title ) = 0;
      virtual HRESULT __stdcall put_Title (
        /*[in]*/ BSTR Title ) = 0;
      virtual HRESULT __stdcall get_ValueFormat (
        /*[out,retval]*/ BSTR * ValueFormat ) = 0;
      virtual HRESULT __stdcall put_ValueFormat (
        /*[in]*/ BSTR ValueFormat ) = 0;
      virtual HRESULT __stdcall get_ValueMarkText (
        /*[in]*/ long ValueIndex,
        /*[out,retval]*/ BSTR * Index ) = 0;
      virtual HRESULT __stdcall get_VerticalAxis (
        /*[out,retval]*/ enum EVerticalAxis * VerticalAxis ) = 0;
      virtual HRESULT __stdcall put_VerticalAxis (
        /*[in]*/ enum EVerticalAxis VerticalAxis ) = 0;
      virtual HRESULT __stdcall get_XValues (
        /*[out,retval]*/ struct IValueList * * XValues ) = 0;
      virtual HRESULT __stdcall get_YValues (
        /*[out,retval]*/ struct IValueList * * YValues ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * ZOrder ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double AValue,
        /*[in]*/ BSTR ALabel,
        /*[in]*/ OLE_COLOR Value,
        /*[out,retval]*/ long * AColor ) = 0;
      virtual HRESULT __stdcall raw_AddNull (
        /*[in]*/ BSTR SomeLabel,
        /*[out,retval]*/ long * ALabel ) = 0;
      virtual HRESULT __stdcall raw_AddXY (
        /*[in]*/ double AX,
        /*[in]*/ double AY,
        /*[in]*/ BSTR ALabel,
        /*[in]*/ OLE_COLOR Value,
        /*[out,retval]*/ long * AColor ) = 0;
      virtual HRESULT __stdcall raw_CalcXPos (
        /*[in]*/ long SomeValueIndex,
        /*[out,retval]*/ long * ValueIndex ) = 0;
      virtual HRESULT __stdcall raw_CalcXPosValue (
        /*[in]*/ double SomeValue,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_CalcXSizeValue (
        /*[in]*/ double SomeValue,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_CalcYPos (
        /*[in]*/ long SomeValueIndex,
        /*[out,retval]*/ long * ValueIndex ) = 0;
      virtual HRESULT __stdcall raw_CalcYPosValue (
        /*[in]*/ double SomeValue,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_CalcYSizeValue (
        /*[in]*/ double SomeValue,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_CheckDataSource ( ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_Clicked (
        /*[in]*/ long XCoord,
        /*[in]*/ long YCoord,
        /*[out,retval]*/ long * Y ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_FillSampleValues (
        /*[in]*/ long NumValues ) = 0;
      virtual HRESULT __stdcall raw_GetMousePoint (
        /*[out,retval]*/ long * GetMousePoint ) = 0;
      virtual HRESULT __stdcall raw_IsNull (
        /*[in]*/ long ValueIndex,
        /*[out,retval]*/ VARIANT_BOOL * Index ) = 0;
      virtual HRESULT __stdcall raw_RefreshSeries ( ) = 0;
      virtual HRESULT __stdcall raw_SetFunction (
        /*[in]*/ enum EFunctionType AFunction ) = 0;
      virtual HRESULT __stdcall raw_SwapValues (
        /*[in]*/ long a,
        /*[in]*/ long b ) = 0;
      virtual HRESULT __stdcall raw_XScreenToValue (
        /*[in]*/ long ScreenCoord,
        /*[out,retval]*/ double * ScreenPos ) = 0;
      virtual HRESULT __stdcall raw_XValueToText (
        /*[in]*/ double SomeValue,
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall raw_YScreenToValue (
        /*[in]*/ long ScreenCoord,
        /*[out,retval]*/ double * ScreenPos ) = 0;
      virtual HRESULT __stdcall raw_YValueToText (
        /*[in]*/ double SomeValue,
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_asBezier (
        /*[out,retval]*/ struct IBezierSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asContour (
        /*[out,retval]*/ struct IContourSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asError (
        /*[out,retval]*/ struct IErrorSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asPoint3D (
        /*[out,retval]*/ struct IPoint3DSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asRadar (
        /*[out,retval]*/ struct IRadarSeries * * Value ) = 0;
      virtual HRESULT __stdcall raw_AddNullXY (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ BSTR ALabel,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_LegendString (
        /*[in]*/ long LegendIndex,
        /*[in]*/ enum ELegendTextStyle LegendTextStyle,
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall raw_LegendItemColor (
        /*[in]*/ long LegendIndex,
        /*[out,retval]*/ OLE_COLOR * Value ) = 0;
      virtual HRESULT __stdcall raw_CountLegendItems (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_LegendToValueIndex (
        /*[in]*/ long LegendIndex,
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_VisibleCount (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall raw_AssignValues (
        /*[in]*/ long SeriesIndex ) = 0;
      virtual HRESULT __stdcall get_HorizontalAxisCustom (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_HorizontalAxisCustom (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_VerticalAxisCustom (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_VerticalAxisCustom (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_asClock (
        /*[out,retval]*/ struct IClockSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asWindRose (
        /*[out,retval]*/ struct IWindRoseSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asBar3D (
        /*[out,retval]*/ struct IBar3DSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asImageBar (
        /*[out,retval]*/ struct IImageBarSeries * * Value ) = 0;
      virtual HRESULT __stdcall raw_DisconnectAxisCustom (
        /*[in]*/ VARIANT_BOOL IsHorizontal ) = 0;
      virtual HRESULT __stdcall get_MouseValues (
        /*[out,retval]*/ struct ITeePoint2D * * Value ) = 0;
      virtual HRESULT __stdcall raw_AddArray (
        /*[in]*/ long ArraySize,
        /*[in]*/ VARIANT YArray,
        /*[in]*/ VARIANT XArray ) = 0;
      virtual HRESULT __stdcall get_Depth (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Depth (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_asDonut (
        /*[out,retval]*/ struct IDonutSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asTriSurface (
        /*[out,retval]*/ struct ITriSurfaceSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asBoxPlot (
        /*[out,retval]*/ struct IBoxPlotSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asHorizBoxPlot (
        /*[out,retval]*/ struct IHorizBoxPlotSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asHistogram (
        /*[out,retval]*/ struct IHistogramSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asColorGrid (
        /*[out,retval]*/ struct IColorGridSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asHorizLine (
        /*[out,retval]*/ struct IHorizLineSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asBarJoin (
        /*[out,retval]*/ struct IBarJoinSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asHighLow (
        /*[out,retval]*/ struct IHighLowSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asWaterfall (
        /*[out,retval]*/ struct IWaterfallSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asSmith (
        /*[out,retval]*/ struct ISmithSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asPyramid (
        /*[out,retval]*/ struct IPyramidSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asMap (
        /*[out,retval]*/ struct IMapSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asFunnel (
        /*[out,retval]*/ struct IFunnelSeries * * Value ) = 0;
      virtual HRESULT __stdcall get_asCalendar (
        /*[out,retval]*/ struct ICalendarSeries * * Value ) = 0;
      virtual HRESULT __stdcall raw_FreeDatasource (
        /*[in]*/ VARIANT_BOOL SurePrompt ) = 0;
      virtual HRESULT __stdcall get_SeriesLink (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_DatasourceType (
        /*[out,retval]*/ enum EDatasourceType * Value ) = 0;
      virtual HRESULT __stdcall put_DatasourceType (
        /*[in]*/ enum EDatasourceType Value ) = 0;
      virtual HRESULT __stdcall get_ValueLists (
        /*[out,retval]*/ struct IValueLists * * Value ) = 0;
      virtual HRESULT __stdcall raw_IsNan (
        /*[in]*/ double Value,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall raw_DeleteRange (
        /*[in]*/ long Start,
        /*[in]*/ long Quantity ) = 0;
};

struct __declspec(uuid("b86ae373-50dc-4ae9-8872-8e3f9fc21a4e"))
IMACDFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPeriod2,put=PutPeriod2))
    double Period2;
    __declspec(property(get=GetMACDExp))
    ISeriesPtr MACDExp;
    __declspec(property(get=GetHistogram))
    ISeriesPtr Histogram;
    __declspec(property(get=GetPeriod3,put=PutPeriod3))
    long Period3;

    //
    // Wrapper methods for error-handling
    //

    double GetPeriod2 ( );
    void PutPeriod2 (
        double Value );
    ISeriesPtr GetMACDExp ( );
    ISeriesPtr GetHistogram ( );
    long GetPeriod3 ( );
    void PutPeriod3 (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Period2 (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Period2 (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_MACDExp (
        /*[out,retval]*/ struct ISeries * * Value ) = 0;
      virtual HRESULT __stdcall get_Histogram (
        /*[out,retval]*/ struct ISeries * * Value ) = 0;
      virtual HRESULT __stdcall get_Period3 (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_Period3 (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("2dcbf4ff-bedf-4140-b726-70996bb2b6e6"))
IBollingerFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDeviation,put=PutDeviation))
    double Deviation;
    __declspec(property(get=GetExponential,put=PutExponential))
    VARIANT_BOOL Exponential;
    __declspec(property(get=GetLowBand))
    ISeriesPtr LowBand;

    //
    // Wrapper methods for error-handling
    //

    double GetDeviation ( );
    void PutDeviation (
        double Value );
    VARIANT_BOOL GetExponential ( );
    void PutExponential (
        VARIANT_BOOL Value );
    ISeriesPtr GetLowBand ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Deviation (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Deviation (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_Exponential (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Exponential (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_LowBand (
        /*[out,retval]*/ struct ISeries * * Value ) = 0;
};

struct __declspec(uuid("3752717c-15c0-4c15-9532-c9c371388028"))
IADXFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDMDown))
    ISeriesPtr DMDown;
    __declspec(property(get=GetDMUp))
    ISeriesPtr DMUp;

    //
    // Wrapper methods for error-handling
    //

    ISeriesPtr GetDMDown ( );
    ISeriesPtr GetDMUp ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DMDown (
        /*[out,retval]*/ struct ISeries * * Value ) = 0;
      virtual HRESULT __stdcall get_DMUp (
        /*[out,retval]*/ struct ISeries * * Value ) = 0;
};

struct __declspec(uuid("b6c104ad-fb89-11d4-93c9-006008a7eed4"))
ITeeFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPeriod,put=PutPeriod))
    double Period;
    __declspec(property(get=GetasCurveFit))
    ICurveFittingFunctionPtr asCurveFit;
    __declspec(property(get=GetasExpAvg))
    IExpAvgFunctionPtr asExpAvg;
    __declspec(property(get=GetasMovAvg))
    IMovingAvgFunctionPtr asMovAvg;
    __declspec(property(get=GetPeriodStyle,put=PutPeriodStyle))
    enum EFunctionPeriodStyle PeriodStyle;
    __declspec(property(get=GetPeriodAlign,put=PutPeriodAlign))
    enum EFunctionPeriodAlign PeriodAlign;
    __declspec(property(get=GetasStdDeviation))
    IStdDeviationFunctionPtr asStdDeviation;
    __declspec(property(get=GetasRSI))
    IRSIFunctionPtr asRSI;
    __declspec(property(get=GetasBollinger))
    IBollingerFunctionPtr asBollinger;
    __declspec(property(get=GetasADX))
    IADXFunctionPtr asADX;
    __declspec(property(get=GetasMACD))
    IMACDFunctionPtr asMACD;
    __declspec(property(get=GetasRMS))
    IRMSFunctionPtr asRMS;
    __declspec(property(get=GetasAverage))
    IAverageFunctionPtr asAverage;

    //
    // Wrapper methods for error-handling
    //

    double GetPeriod ( );
    void PutPeriod (
        double Period );
    ICurveFittingFunctionPtr GetasCurveFit ( );
    IExpAvgFunctionPtr GetasExpAvg ( );
    IMovingAvgFunctionPtr GetasMovAvg ( );
    enum EFunctionPeriodStyle GetPeriodStyle ( );
    void PutPeriodStyle (
        enum EFunctionPeriodStyle Value );
    enum EFunctionPeriodAlign GetPeriodAlign ( );
    void PutPeriodAlign (
        enum EFunctionPeriodAlign Value );
    IStdDeviationFunctionPtr GetasStdDeviation ( );
    HRESULT BeginUpdate ( );
    HRESULT EndUpdate ( );
    IRSIFunctionPtr GetasRSI ( );
    IBollingerFunctionPtr GetasBollinger ( );
    IADXFunctionPtr GetasADX ( );
    IMACDFunctionPtr GetasMACD ( );
    IRMSFunctionPtr GetasRMS ( );
    IAverageFunctionPtr GetasAverage ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Period (
        /*[out,retval]*/ double * Period ) = 0;
      virtual HRESULT __stdcall put_Period (
        /*[in]*/ double Period ) = 0;
      virtual HRESULT __stdcall get_asCurveFit (
        /*[out,retval]*/ struct ICurveFittingFunction * * asCurveFit ) = 0;
      virtual HRESULT __stdcall get_asExpAvg (
        /*[out,retval]*/ struct IExpAvgFunction * * asExpAvg ) = 0;
      virtual HRESULT __stdcall get_asMovAvg (
        /*[out,retval]*/ struct IMovingAvgFunction * * asMovAvg ) = 0;
      virtual HRESULT __stdcall get_PeriodStyle (
        /*[out,retval]*/ enum EFunctionPeriodStyle * Value ) = 0;
      virtual HRESULT __stdcall put_PeriodStyle (
        /*[in]*/ enum EFunctionPeriodStyle Value ) = 0;
      virtual HRESULT __stdcall get_PeriodAlign (
        /*[out,retval]*/ enum EFunctionPeriodAlign * Value ) = 0;
      virtual HRESULT __stdcall put_PeriodAlign (
        /*[in]*/ enum EFunctionPeriodAlign Value ) = 0;
      virtual HRESULT __stdcall get_asStdDeviation (
        /*[out,retval]*/ struct IStdDeviationFunction * * Value ) = 0;
      virtual HRESULT __stdcall raw_BeginUpdate ( ) = 0;
      virtual HRESULT __stdcall raw_EndUpdate ( ) = 0;
      virtual HRESULT __stdcall get_asRSI (
        /*[out,retval]*/ struct IRSIFunction * * Value ) = 0;
      virtual HRESULT __stdcall get_asBollinger (
        /*[out,retval]*/ struct IBollingerFunction * * Value ) = 0;
      virtual HRESULT __stdcall get_asADX (
        /*[out,retval]*/ struct IADXFunction * * Value ) = 0;
      virtual HRESULT __stdcall get_asMACD (
        /*[out,retval]*/ struct IMACDFunction * * Value ) = 0;
      virtual HRESULT __stdcall get_asRMS (
        /*[out,retval]*/ struct IRMSFunction * * Value ) = 0;
      virtual HRESULT __stdcall get_asAverage (
        /*[out,retval]*/ struct IAverageFunction * * Value ) = 0;
};

//
// Function implementation mapping
//

#pragma start_map_region("d:\work\batterymanage\batterymanage\debug\teechart5.tli")
__declspec(implementation_key(1)) HRESULT ITChartEvents::OnAfterDraw ( );
__declspec(implementation_key(2)) HRESULT ITChartEvents::OnBeforeDrawSeries ( );
__declspec(implementation_key(3)) HRESULT ITChartEvents::OnBeforeDrawAxes ( );
__declspec(implementation_key(4)) HRESULT ITChartEvents::OnClick ( );
__declspec(implementation_key(5)) HRESULT ITChartEvents::OnClickAxis ( long Axis, enum EMouseButton Button, enum EShiftState Shift, long X, long Y );
__declspec(implementation_key(6)) HRESULT ITChartEvents::OnClickBackground ( enum EMouseButton Button, enum EShiftState Shift, long X, long Y );
__declspec(implementation_key(7)) HRESULT ITChartEvents::OnClickLegend ( enum EMouseButton Button, enum EShiftState Shift, long X, long Y );
__declspec(implementation_key(8)) HRESULT ITChartEvents::OnClickSeries ( long SeriesIndex, long ValueIndex, enum EMouseButton Button, enum EShiftState Shift, long X, long Y );
__declspec(implementation_key(9)) HRESULT ITChartEvents::OnDblClick ( );
__declspec(implementation_key(10)) HRESULT ITChartEvents::OnDragDrop ( long X, long Y );
__declspec(implementation_key(11)) HRESULT ITChartEvents::OnDragOver ( long X, long Y, enum EDragState State, VARIANT_BOOL * Accept );
__declspec(implementation_key(12)) HRESULT ITChartEvents::OnEndDrag ( long X, long Y );
__declspec(implementation_key(13)) HRESULT ITChartEvents::OnEnter ( );
__declspec(implementation_key(14)) HRESULT ITChartEvents::OnExit ( );
__declspec(implementation_key(15)) HRESULT ITChartEvents::OnGetAxisLabel ( long Axis, long SeriesIndex, long ValueIndex, BSTR * LabelText );
__declspec(implementation_key(16)) HRESULT ITChartEvents::OnGetLegendRect ( long * Left, long * Top, long * Right, long * Bottom );
__declspec(implementation_key(17)) HRESULT ITChartEvents::OnGetNextAxisLabel ( long Axis, long LabelIndex, double * LabelValue, VARIANT_BOOL * MoreLabels );
__declspec(implementation_key(18)) HRESULT ITChartEvents::OnMouseDown ( enum EMouseButton Button, enum EShiftState Shift, long X, long Y );
__declspec(implementation_key(19)) HRESULT ITChartEvents::OnMouseMove ( enum EShiftState Shift, long X, long Y );
__declspec(implementation_key(20)) HRESULT ITChartEvents::OnMouseUp ( enum EMouseButton Button, enum EShiftState Shift, long X, long Y );
__declspec(implementation_key(21)) HRESULT ITChartEvents::OnPageChange ( );
__declspec(implementation_key(22)) HRESULT ITChartEvents::OnResize ( );
__declspec(implementation_key(23)) HRESULT ITChartEvents::OnScroll ( );
__declspec(implementation_key(24)) HRESULT ITChartEvents::OnStartDrag ( );
__declspec(implementation_key(25)) HRESULT ITChartEvents::OnUndoZoom ( );
__declspec(implementation_key(26)) HRESULT ITChartEvents::OnZoom ( );
__declspec(implementation_key(27)) HRESULT ITChartEvents::OnAllowScroll ( enum EAxisType Axis, double * AMin, double * AMax, VARIANT_BOOL * AllowScroll );
__declspec(implementation_key(28)) HRESULT ITChartEvents::OnGetLegendPos ( long ItemIndex, long * X, long * Y, long * XColor );
__declspec(implementation_key(29)) HRESULT ITChartEvents::OnGetLegendText ( long LegendStyle, long ValueIndex, BSTR * LegendText );
__declspec(implementation_key(30)) HRESULT ITChartEvents::OnDatabaseRecord ( long SeriesIndex, long Index, VARIANT_BOOL * StopRetrieve );
__declspec(implementation_key(31)) HRESULT ITChartEvents::OnTimer ( );
__declspec(implementation_key(32)) HRESULT ITChartEvents::OnGetSeriesMark ( long SeriesIndex, long ValueIndex, BSTR * MarkText );
__declspec(implementation_key(33)) HRESULT ITChartEvents::OnGetSeriesPointerStyle ( long SeriesIndex, long ValueIndex, enum EPointerStyle * AStyle );
__declspec(implementation_key(34)) HRESULT ITChartEvents::OnGetSeriesContourLevel ( long SeriesIndex, long LevelIndex, double * LevelValue, OLE_COLOR * LevelColor );
__declspec(implementation_key(35)) HRESULT ITChartEvents::OnBeforeDrawChart ( );
__declspec(implementation_key(36)) HRESULT ITChartEvents::OnSeriesBeforeDrawValues ( long SeriesIndex );
__declspec(implementation_key(37)) HRESULT ITChartEvents::OnSeriesAfterDrawValues ( long SeriesIndex );
__declspec(implementation_key(38)) HRESULT ITChartEvents::OnMarkTipToolGetText ( long Tool, BSTR * Text );
__declspec(implementation_key(39)) HRESULT ITChartEvents::OnCursorToolChange ( long Tool, long X, long Y, double XVal, double YVal, long Series, long ValueIndex );
__declspec(implementation_key(40)) HRESULT ITChartEvents::OnDrawLineToolLineDrag ( );
__declspec(implementation_key(41)) HRESULT ITChartEvents::OnDrawLineToolNewLine ( );
__declspec(implementation_key(42)) HRESULT ITChartEvents::OnDrawLineToolDraggedLine ( );
__declspec(implementation_key(43)) HRESULT ITChartEvents::OnDrawLineToolSelectLine ( );
__declspec(implementation_key(44)) HRESULT ITChartEvents::OnCalendarSeriesChange ( long Series, double Value );
__declspec(implementation_key(45)) HRESULT ITChartEvents::OnSeriesBeforeAdd ( long SeriesIndex, VARIANT_BOOL * MoreValues );
__declspec(implementation_key(46)) OLE_COLOR IBrush::GetColor ( );
__declspec(implementation_key(47)) void IBrush::PutColor ( OLE_COLOR Color );
__declspec(implementation_key(48)) enum EBrushStyle IBrush::GetStyle ( );
__declspec(implementation_key(49)) void IBrush::PutStyle ( enum EBrushStyle Style );
__declspec(implementation_key(50)) HRESULT IBrush::LoadImage ( _bstr_t FileName );
__declspec(implementation_key(51)) HRESULT IBrush::AssignImage ( long ImageHandle );
__declspec(implementation_key(52)) HRESULT IBrush::ClearImage ( );
__declspec(implementation_key(53)) _variant_t IStrings::GetControlDefault ( long Index );
__declspec(implementation_key(54)) void IStrings::PutControlDefault ( long Index, const _variant_t & Value );
__declspec(implementation_key(55)) long IStrings::Count ( );
__declspec(implementation_key(56)) _variant_t IStrings::GetItem ( long Index );
__declspec(implementation_key(57)) void IStrings::PutItem ( long Index, const _variant_t & Value );
__declspec(implementation_key(58)) HRESULT IStrings::Remove ( long Index );
__declspec(implementation_key(59)) HRESULT IStrings::Clear ( );
__declspec(implementation_key(60)) long IStrings::Add ( const _variant_t & AItem );
__declspec(implementation_key(61)) IUnknownPtr IStrings::_NewEnum ( );
__declspec(implementation_key(62)) HRESULT IImport::LoadFromFile ( _bstr_t FileName );
__declspec(implementation_key(63)) HRESULT IImport::LoadFromURL ( _bstr_t URL );
__declspec(implementation_key(64)) HRESULT IImport::LoadFromStream ( const _variant_t & AStream );
__declspec(implementation_key(65)) enum EChartScroll IScroll::GetEnable ( );
__declspec(implementation_key(66)) void IScroll::PutEnable ( enum EChartScroll Enable );
__declspec(implementation_key(67)) enum EMouseButton IScroll::GetMouseButton ( );
__declspec(implementation_key(68)) void IScroll::PutMouseButton ( enum EMouseButton Value );
__declspec(implementation_key(69)) long IPrinter::GetDetail ( );
__declspec(implementation_key(70)) void IPrinter::PutDetail ( long Value );
__declspec(implementation_key(71)) long IPrinter::GetMarginBottom ( );
__declspec(implementation_key(72)) void IPrinter::PutMarginBottom ( long Value );
__declspec(implementation_key(73)) long IPrinter::GetMarginLeft ( );
__declspec(implementation_key(74)) void IPrinter::PutMarginLeft ( long Value );
__declspec(implementation_key(75)) long IPrinter::GetMarginTop ( );
__declspec(implementation_key(76)) void IPrinter::PutMarginTop ( long Value );
__declspec(implementation_key(77)) long IPrinter::GetMarginRight ( );
__declspec(implementation_key(78)) void IPrinter::PutMarginRight ( long Value );
__declspec(implementation_key(79)) enum EPrinterOrientation IPrinter::GetOrientation ( );
__declspec(implementation_key(80)) void IPrinter::PutOrientation ( enum EPrinterOrientation Value );
__declspec(implementation_key(81)) HRESULT IPrinter::Print ( );
__declspec(implementation_key(82)) HRESULT IPrinter::PrintLandscape ( );
__declspec(implementation_key(83)) HRESULT IPrinter::PrintPortrait ( );
__declspec(implementation_key(84)) HRESULT IPrinter::ShowPreview ( );
__declspec(implementation_key(85)) HRESULT IPrinter::PrintPartial ( long Left, long Top, long Right, long Bottom );
__declspec(implementation_key(86)) HRESULT IPrinter::BeginDoc ( );
__declspec(implementation_key(87)) HRESULT IPrinter::EndDoc ( );
__declspec(implementation_key(88)) long IPrinter::GetPrinterIndex ( );
__declspec(implementation_key(89)) void IPrinter::PutPrinterIndex ( long Value );
__declspec(implementation_key(90)) long IPrinter::GetPrinterCount ( );
__declspec(implementation_key(91)) _bstr_t IPrinter::GetPrinterDescription ( long Index );
__declspec(implementation_key(92)) HRESULT IPrinter::PrintChart ( );
__declspec(implementation_key(93)) long IPrinter::GetPageHeight ( );
__declspec(implementation_key(94)) long IPrinter::GetPageWidth ( );
__declspec(implementation_key(95)) _bstr_t IPrinter::GetJobTitle ( );
__declspec(implementation_key(96)) void IPrinter::PutJobTitle ( _bstr_t Value );
__declspec(implementation_key(97)) VARIANT_BOOL IPrinter::GetPrintProportional ( );
__declspec(implementation_key(98)) void IPrinter::PutPrintProportional ( VARIANT_BOOL Value );
__declspec(implementation_key(99)) HRESULT IPrinter::PrintPartialHandle ( const _variant_t & DC, long Left, long Top, long Right, long Bottom );
__declspec(implementation_key(100)) HRESULT IPrinter::PrintPages ( long FromPage, long ToPage );
__declspec(implementation_key(101)) enum EGradientDirection IGradient::GetDirection ( );
__declspec(implementation_key(102)) void IGradient::PutDirection ( enum EGradientDirection Direction );
__declspec(implementation_key(103)) OLE_COLOR IGradient::GetStartColor ( );
__declspec(implementation_key(104)) void IGradient::PutStartColor ( OLE_COLOR StartColor );
__declspec(implementation_key(105)) OLE_COLOR IGradient::GetEndColor ( );
__declspec(implementation_key(106)) void IGradient::PutEndColor ( OLE_COLOR EndColor );
__declspec(implementation_key(107)) VARIANT_BOOL IGradient::GetVisible ( );
__declspec(implementation_key(108)) void IGradient::PutVisible ( VARIANT_BOOL Visible );
__declspec(implementation_key(109)) OLE_COLOR IGradient::GetMidColor ( );
__declspec(implementation_key(110)) void IGradient::PutMidColor ( OLE_COLOR Value );
__declspec(implementation_key(111)) HRESULT IPage::Next ( );
__declspec(implementation_key(112)) HRESULT IPage::Previous ( );
__declspec(implementation_key(113)) long IPage::GetMaxPointsPerPage ( );
__declspec(implementation_key(114)) void IPage::PutMaxPointsPerPage ( long MaxPointsPerPage );
__declspec(implementation_key(115)) long IPage::GetCurrent ( );
__declspec(implementation_key(116)) void IPage::PutCurrent ( long Current );
__declspec(implementation_key(117)) VARIANT_BOOL IPage::GetScaleLastPage ( );
__declspec(implementation_key(118)) void IPage::PutScaleLastPage ( VARIANT_BOOL ScaleLastPage );
__declspec(implementation_key(119)) long IPage::GetCount ( );
__declspec(implementation_key(120)) VARIANT_BOOL IPanel::GetBackImageInside ( );
__declspec(implementation_key(121)) void IPanel::PutBackImageInside ( VARIANT_BOOL BackImageInside );
__declspec(implementation_key(122)) enum EBackImageMode IPanel::GetBackImageMode ( );
__declspec(implementation_key(123)) void IPanel::PutBackImageMode ( enum EBackImageMode BackImageMode );
__declspec(implementation_key(124)) enum EPanelBevel IPanel::GetBevelInner ( );
__declspec(implementation_key(125)) void IPanel::PutBevelInner ( enum EPanelBevel BevelInner );
__declspec(implementation_key(126)) enum EPanelBevel IPanel::GetBevelOuter ( );
__declspec(implementation_key(127)) void IPanel::PutBevelOuter ( enum EPanelBevel BevelOuter );
__declspec(implementation_key(128)) long IPanel::GetBevelWidth ( );
__declspec(implementation_key(129)) void IPanel::PutBevelWidth ( long BevelWidth );
__declspec(implementation_key(130)) long IPanel::GetBevelOffset ( );
__declspec(implementation_key(131)) void IPanel::PutBevelOffset ( long BevelOffset );
__declspec(implementation_key(132)) enum EBorderStyle IPanel::GetBorderStyle ( );
__declspec(implementation_key(133)) void IPanel::PutBorderStyle ( enum EBorderStyle BorderStyle );
__declspec(implementation_key(134)) OLE_COLOR IPanel::GetColor ( );
__declspec(implementation_key(135)) void IPanel::PutColor ( OLE_COLOR Color );
__declspec(implementation_key(136)) IGradientPtr IPanel::GetGradient ( );
__declspec(implementation_key(137)) long IPanel::GetMarginLeft ( );
__declspec(implementation_key(138)) void IPanel::PutMarginLeft ( long MarginLeft );
__declspec(implementation_key(139)) long IPanel::GetMarginTop ( );
__declspec(implementation_key(140)) void IPanel::PutMarginTop ( long MarginTop );
__declspec(implementation_key(141)) long IPanel::GetMarginRight ( );
__declspec(implementation_key(142)) void IPanel::PutMarginRight ( long MarginRight );
__declspec(implementation_key(143)) long IPanel::GetMarginBottom ( );
__declspec(implementation_key(144)) void IPanel::PutMarginBottom ( long MarginBottom );
__declspec(implementation_key(145)) HRESULT IPanel::BackImageClear ( );
__declspec(implementation_key(146)) HRESULT IPanel::BackImageLoad ( _bstr_t FileName );
__declspec(implementation_key(147)) long IValueList::GetCount ( );
__declspec(implementation_key(148)) VARIANT_BOOL IValueList::GetDateTime ( );
__declspec(implementation_key(149)) void IValueList::PutDateTime ( VARIANT_BOOL DateTime );
__declspec(implementation_key(150)) double IValueList::GetFirst ( );
__declspec(implementation_key(151)) double IValueList::GetLast ( );
__declspec(implementation_key(152)) double IValueList::GetMaximum ( );
__declspec(implementation_key(153)) double IValueList::GetMinimum ( );
__declspec(implementation_key(154)) enum EValueListOrder IValueList::GetOrder ( );
__declspec(implementation_key(155)) void IValueList::PutOrder ( enum EValueListOrder Order );
__declspec(implementation_key(156)) double IValueList::GetTotal ( );
__declspec(implementation_key(157)) double IValueList::GetTotalABS ( );
__declspec(implementation_key(158)) double IValueList::GetValue ( long Index );
__declspec(implementation_key(159)) void IValueList::PutValue ( long Index, double Value );
__declspec(implementation_key(160)) _bstr_t IValueList::GetValueSource ( );
__declspec(implementation_key(161)) void IValueList::PutValueSource ( _bstr_t ValueSource );
__declspec(implementation_key(162)) HRESULT IValueList::Delete ( long Index );
__declspec(implementation_key(163)) HRESULT IValueList::FillSequence ( );
__declspec(implementation_key(164)) long IValueList::Locate ( double SomeValue );
__declspec(implementation_key(165)) HRESULT IValueList::Sort ( );
__declspec(implementation_key(166)) VARIANT_BOOL IValueList::GetModified ( );
__declspec(implementation_key(167)) void IValueList::PutModified ( VARIANT_BOOL Value );
__declspec(implementation_key(168)) double IValueList::GetTempValue ( );
__declspec(implementation_key(169)) void IValueList::PutTempValue ( double Value );
__declspec(implementation_key(170)) _bstr_t IValueList::GetName ( );
__declspec(implementation_key(171)) VARIANT_BOOL IAverageFunction::GetIncludeNulls ( );
__declspec(implementation_key(172)) void IAverageFunction::PutIncludeNulls ( VARIANT_BOOL Value );
__declspec(implementation_key(173)) long ICurveFittingFunction::GetPolyDegree ( );
__declspec(implementation_key(174)) void ICurveFittingFunction::PutPolyDegree ( long PolyDegree );
__declspec(implementation_key(175)) enum ETypeFitting ICurveFittingFunction::GetTypeFitting ( );
__declspec(implementation_key(176)) void ICurveFittingFunction::PutTypeFitting ( enum ETypeFitting TypeFitting );
__declspec(implementation_key(177)) long ICurveFittingFunction::GetFirstPoint ( );
__declspec(implementation_key(178)) void ICurveFittingFunction::PutFirstPoint ( long FirstPoint );
__declspec(implementation_key(179)) long ICurveFittingFunction::GetLastPoint ( );
__declspec(implementation_key(180)) void ICurveFittingFunction::PutLastPoint ( long LastPoint );
__declspec(implementation_key(181)) long ICurveFittingFunction::GetFirstCalcPoint ( );
__declspec(implementation_key(182)) void ICurveFittingFunction::PutFirstCalcPoint ( long FirstCalcPoint );
__declspec(implementation_key(183)) long ICurveFittingFunction::GetLastCalcPoint ( );
__declspec(implementation_key(184)) void ICurveFittingFunction::PutLastCalcPoint ( long LastCalcPoint );
__declspec(implementation_key(185)) double ICurveFittingFunction::GetAnswerVector ( long Index );
__declspec(implementation_key(186)) double ICurveFittingFunction::GetCurveYValue ( double X );
__declspec(implementation_key(187)) double IExpAvgFunction::GetWeight ( );
__declspec(implementation_key(188)) void IExpAvgFunction::PutWeight ( double Weight );
__declspec(implementation_key(189)) VARIANT_BOOL IMovingAvgFunction::GetWeighted ( );
__declspec(implementation_key(190)) void IMovingAvgFunction::PutWeighted ( VARIANT_BOOL Weighted );
__declspec(implementation_key(191)) _bstr_t IChartFont::GetName ( );
__declspec(implementation_key(192)) void IChartFont::PutName ( _bstr_t Name );
__declspec(implementation_key(193)) long IChartFont::GetSize ( );
__declspec(implementation_key(194)) void IChartFont::PutSize ( long Size );
__declspec(implementation_key(195)) VARIANT_BOOL IChartFont::GetBold ( );
__declspec(implementation_key(196)) void IChartFont::PutBold ( VARIANT_BOOL Bold );
__declspec(implementation_key(197)) VARIANT_BOOL IChartFont::GetItalic ( );
__declspec(implementation_key(198)) void IChartFont::PutItalic ( VARIANT_BOOL Italic );
__declspec(implementation_key(199)) VARIANT_BOOL IChartFont::GetUnderline ( );
__declspec(implementation_key(200)) void IChartFont::PutUnderline ( VARIANT_BOOL Underline );
__declspec(implementation_key(201)) VARIANT_BOOL IChartFont::GetStrikethrough ( );
__declspec(implementation_key(202)) void IChartFont::PutStrikethrough ( VARIANT_BOOL Strikethrough );
__declspec(implementation_key(203)) short IChartFont::GetCharset ( );
__declspec(implementation_key(204)) void IChartFont::PutCharset ( short Charset );
__declspec(implementation_key(205)) OLE_COLOR IChartFont::GetColor ( );
__declspec(implementation_key(206)) void IChartFont::PutColor ( OLE_COLOR Value );
__declspec(implementation_key(207)) long IChartFont::GetHeight ( );
__declspec(implementation_key(208)) void IChartFont::PutHeight ( long Value );
__declspec(implementation_key(209)) long IChartFont::GetPixelsPerInch ( );
__declspec(implementation_key(210)) enum EPieOtherStyle IPieOtherSlice::GetStyle ( );
__declspec(implementation_key(211)) void IPieOtherSlice::PutStyle ( enum EPieOtherStyle Value );
__declspec(implementation_key(212)) _bstr_t IPieOtherSlice::GetText ( );
__declspec(implementation_key(213)) void IPieOtherSlice::PutText ( _bstr_t Value );
__declspec(implementation_key(214)) double IPieOtherSlice::GetValue ( );
__declspec(implementation_key(215)) void IPieOtherSlice::PutValue ( double Value );
__declspec(implementation_key(216)) long IExplodedSlices::GetValue ( long Index );
__declspec(implementation_key(217)) void IExplodedSlices::PutValue ( long Index, long Value );
__declspec(implementation_key(218)) VARIANT_BOOL ICircleLabels::GetVisible ( );
__declspec(implementation_key(219)) void ICircleLabels::PutVisible ( VARIANT_BOOL Value );
__declspec(implementation_key(220)) IChartFontPtr ICircleLabels::GetFont ( );
__declspec(implementation_key(221)) VARIANT_BOOL ICircleLabels::GetRotated ( );
__declspec(implementation_key(222)) void ICircleLabels::PutRotated ( VARIANT_BOOL Value );
__declspec(implementation_key(223)) _bstr_t ICircleLabels::GetDegreeSymbol ( );
__declspec(implementation_key(224)) void ICircleLabels::PutDegreeSymbol ( _bstr_t Value );
__declspec(implementation_key(225)) VARIANT_BOOL IStdDeviationFunction::GetComplete ( );
__declspec(implementation_key(226)) void IStdDeviationFunction::PutComplete ( VARIANT_BOOL Value );
__declspec(implementation_key(227)) VARIANT_BOOL IEnvironment::GetNoPromptDBConnect ( );
__declspec(implementation_key(228)) void IEnvironment::PutNoPromptDBConnect ( VARIANT_BOOL Value );
__declspec(implementation_key(229)) VARIANT_BOOL IEnvironment::GetIEPrintWithPage ( );
__declspec(implementation_key(230)) void IEnvironment::PutIEPrintWithPage ( VARIANT_BOOL Value );
__declspec(implementation_key(231)) HRESULT IEnvironment::InternalRepaint ( );
__declspec(implementation_key(232)) VARIANT_BOOL IEnvironment::GetMouseWheelScroll ( );
__declspec(implementation_key(233)) void IEnvironment::PutMouseWheelScroll ( VARIANT_BOOL Value );
__declspec(implementation_key(234)) _bstr_t IEnvironment::GetDecimalSeparator ( );
__declspec(implementation_key(235)) HRESULT ITeeCommanderEvents::OnEditedChart ( );
__declspec(implementation_key(236)) HRESULT ITeeListBoxEvents::OnDblClickSeries ( long SeriesIndex );
__declspec(implementation_key(237)) double ITeePoint2D::GetX ( );
__declspec(implementation_key(238)) void ITeePoint2D::PutX ( double Value );
__declspec(implementation_key(239)) double ITeePoint2D::GetY ( );
__declspec(implementation_key(240)) void ITeePoint2D::PutY ( double Value );
__declspec(implementation_key(241)) ITeePoint2DPtr ISeriesMarkPosition::GetArrowFrom ( );
__declspec(implementation_key(242)) ITeePoint2DPtr ISeriesMarkPosition::GetArrowTo ( );
__declspec(implementation_key(243)) VARIANT_BOOL ISeriesMarkPosition::GetCustom ( );
__declspec(implementation_key(244)) void ISeriesMarkPosition::PutCustom ( VARIANT_BOOL Value );
__declspec(implementation_key(245)) long ISeriesMarkPosition::GetHeight ( );
__declspec(implementation_key(246)) void ISeriesMarkPosition::PutHeight ( long Value );
__declspec(implementation_key(247)) ITeePoint2DPtr ISeriesMarkPosition::GetLeftTop ( );
__declspec(implementation_key(248)) long ISeriesMarkPosition::GetWidth ( );
__declspec(implementation_key(249)) void ISeriesMarkPosition::PutWidth ( long Value );
__declspec(implementation_key(250)) ISeriesMarkPositionPtr ISeriesMarksPositions::GetPosition ( long Index );
__declspec(implementation_key(251)) HRESULT ISeriesMarksPositions::Automatic ( long Index );
__declspec(implementation_key(252)) double ITeePoint3D::GetZ ( );
__declspec(implementation_key(253)) void ITeePoint3D::PutZ ( double Value );
__declspec(implementation_key(254)) VARIANT_BOOL ITeeEditorShowPages::GetMain ( );
__declspec(implementation_key(255)) void ITeeEditorShowPages::PutMain ( VARIANT_BOOL Value );
__declspec(implementation_key(256)) VARIANT_BOOL ITeeEditorShowPages::GetGeneral ( );
__declspec(implementation_key(257)) void ITeeEditorShowPages::PutGeneral ( VARIANT_BOOL Value );
__declspec(implementation_key(258)) VARIANT_BOOL ITeeEditorShowPages::GetAxis ( );
__declspec(implementation_key(259)) void ITeeEditorShowPages::PutAxis ( VARIANT_BOOL Value );
__declspec(implementation_key(260)) VARIANT_BOOL ITeeEditorShowPages::GetTitles ( );
__declspec(implementation_key(261)) void ITeeEditorShowPages::PutTitles ( VARIANT_BOOL Value );
__declspec(implementation_key(262)) VARIANT_BOOL ITeeEditorShowPages::GetLegend ( );
__declspec(implementation_key(263)) void ITeeEditorShowPages::PutLegend ( VARIANT_BOOL Value );
__declspec(implementation_key(264)) VARIANT_BOOL ITeeEditorShowPages::GetPanel ( );
__declspec(implementation_key(265)) void ITeeEditorShowPages::PutPanel ( VARIANT_BOOL Value );
__declspec(implementation_key(266)) VARIANT_BOOL ITeeEditorShowPages::GetPaging ( );
__declspec(implementation_key(267)) void ITeeEditorShowPages::PutPaging ( VARIANT_BOOL Value );
__declspec(implementation_key(268)) VARIANT_BOOL ITeeEditorShowPages::GetWalls ( );
__declspec(implementation_key(269)) void ITeeEditorShowPages::PutWalls ( VARIANT_BOOL Value );
__declspec(implementation_key(270)) VARIANT_BOOL ITeeEditorShowPages::GetAspect ( );
__declspec(implementation_key(271)) void ITeeEditorShowPages::PutAspect ( VARIANT_BOOL Value );
__declspec(implementation_key(272)) VARIANT_BOOL ITeeEditorShowPages::GetSeriesGeneral ( );
__declspec(implementation_key(273)) void ITeeEditorShowPages::PutSeriesGeneral ( VARIANT_BOOL Value );
__declspec(implementation_key(274)) VARIANT_BOOL ITeeEditorShowPages::GetSeriesMarks ( );
__declspec(implementation_key(275)) void ITeeEditorShowPages::PutSeriesMarks ( VARIANT_BOOL Value );
__declspec(implementation_key(276)) VARIANT_BOOL ITeeEditorShowPages::GetTools ( );
__declspec(implementation_key(277)) void ITeeEditorShowPages::PutTools ( VARIANT_BOOL Value );
__declspec(implementation_key(278)) VARIANT_BOOL ITeeEditorShowPages::GetSeriesData ( );
__declspec(implementation_key(279)) void ITeeEditorShowPages::PutSeriesData ( VARIANT_BOOL Value );
__declspec(implementation_key(280)) VARIANT_BOOL ITeeEditorShowPages::GetExportDialog ( );
__declspec(implementation_key(281)) void ITeeEditorShowPages::PutExportDialog ( VARIANT_BOOL Value );
__declspec(implementation_key(282)) VARIANT_BOOL ITeeEditorShowPages::GetPrintPreview ( );
__declspec(implementation_key(283)) void ITeeEditorShowPages::PutPrintPreview ( VARIANT_BOOL Value );
__declspec(implementation_key(284)) VARIANT_BOOL ITeeEditorShowPages::GetOpenGL ( );
__declspec(implementation_key(285)) void ITeeEditorShowPages::PutOpenGL ( VARIANT_BOOL Value );
__declspec(implementation_key(286)) VARIANT_BOOL ITeeEditorOptions::GetAdd ( );
__declspec(implementation_key(287)) void ITeeEditorOptions::PutAdd ( VARIANT_BOOL Value );
__declspec(implementation_key(288)) VARIANT_BOOL ITeeEditorOptions::GetDelete ( );
__declspec(implementation_key(289)) void ITeeEditorOptions::PutDelete ( VARIANT_BOOL Value );
__declspec(implementation_key(290)) VARIANT_BOOL ITeeEditorOptions::GetChange ( );
__declspec(implementation_key(291)) void ITeeEditorOptions::PutChange ( VARIANT_BOOL Value );
__declspec(implementation_key(292)) VARIANT_BOOL ITeeEditorOptions::GetClone ( );
__declspec(implementation_key(293)) void ITeeEditorOptions::PutClone ( VARIANT_BOOL Value );
__declspec(implementation_key(294)) VARIANT_BOOL ITeeEditorOptions::GetDataSource ( );
__declspec(implementation_key(295)) void ITeeEditorOptions::PutDataSource ( VARIANT_BOOL Value );
__declspec(implementation_key(296)) VARIANT_BOOL ITeeEditorOptions::GetTitle ( );
__declspec(implementation_key(297)) void ITeeEditorOptions::PutTitle ( VARIANT_BOOL Value );
__declspec(implementation_key(298)) VARIANT_BOOL ITeeEditorOptions::GetHelp ( );
__declspec(implementation_key(299)) void ITeeEditorOptions::PutHelp ( VARIANT_BOOL Value );
__declspec(implementation_key(300)) VARIANT_BOOL ITeePreviewerOptions::GetChangePrinter ( );
__declspec(implementation_key(301)) void ITeePreviewerOptions::PutChangePrinter ( VARIANT_BOOL Value );
__declspec(implementation_key(302)) VARIANT_BOOL ITeePreviewerOptions::GetSetupPrinter ( );
__declspec(implementation_key(303)) void ITeePreviewerOptions::PutSetupPrinter ( VARIANT_BOOL Value );
__declspec(implementation_key(304)) VARIANT_BOOL ITeePreviewerOptions::GetResizeImage ( );
__declspec(implementation_key(305)) void ITeePreviewerOptions::PutResizeImage ( VARIANT_BOOL Value );
__declspec(implementation_key(306)) VARIANT_BOOL ITeePreviewerOptions::GetMoveImage ( );
__declspec(implementation_key(307)) void ITeePreviewerOptions::PutMoveImage ( VARIANT_BOOL Value );
__declspec(implementation_key(308)) VARIANT_BOOL ITeePreviewerOptions::GetChangeDetail ( );
__declspec(implementation_key(309)) void ITeePreviewerOptions::PutChangeDetail ( VARIANT_BOOL Value );
__declspec(implementation_key(310)) VARIANT_BOOL ITeePreviewerOptions::GetChangePaperOrientation ( );
__declspec(implementation_key(311)) void ITeePreviewerOptions::PutChangePaperOrientation ( VARIANT_BOOL Value );
__declspec(implementation_key(312)) VARIANT_BOOL ITeePreviewerOptions::GetChangeMargins ( );
__declspec(implementation_key(313)) void ITeePreviewerOptions::PutChangeMargins ( VARIANT_BOOL Value );
__declspec(implementation_key(314)) VARIANT_BOOL ITeePreviewerOptions::GetDragImage ( );
__declspec(implementation_key(315)) void ITeePreviewerOptions::PutDragImage ( VARIANT_BOOL Value );
__declspec(implementation_key(316)) VARIANT_BOOL ITeePreviewerOptions::GetPrintPanel ( );
__declspec(implementation_key(317)) void ITeePreviewerOptions::PutPrintPanel ( VARIANT_BOOL Value );
__declspec(implementation_key(318)) VARIANT_BOOL ITeePreviewerOptions::GetAsBitmap ( );
__declspec(implementation_key(319)) void ITeePreviewerOptions::PutAsBitmap ( VARIANT_BOOL Value );
__declspec(implementation_key(320)) VARIANT_BOOL ITeeOpenGL::GetActive ( );
__declspec(implementation_key(321)) void ITeeOpenGL::PutActive ( VARIANT_BOOL Value );
__declspec(implementation_key(322)) long ITeeOpenGL::GetAmbientLight ( );
__declspec(implementation_key(323)) void ITeeOpenGL::PutAmbientLight ( long Value );
__declspec(implementation_key(324)) ITeePoint3DPtr ITeeOpenGL::GetLightPosition ( );
__declspec(implementation_key(325)) OLE_COLOR ITeeOpenGL::GetLightColor ( );
__declspec(implementation_key(326)) void ITeeOpenGL::PutLightColor ( OLE_COLOR Value );
__declspec(implementation_key(327)) VARIANT_BOOL ITeeOpenGL::GetFontOutlines ( );
__declspec(implementation_key(328)) void ITeeOpenGL::PutFontOutlines ( VARIANT_BOOL Value );
__declspec(implementation_key(329)) VARIANT_BOOL ITeeOpenGL::GetShadeQuality ( );
__declspec(implementation_key(330)) void ITeeOpenGL::PutShadeQuality ( VARIANT_BOOL Value );
__declspec(implementation_key(331)) VARIANT_BOOL IAspect::GetApplyZOrder ( );
__declspec(implementation_key(332)) void IAspect::PutApplyZOrder ( VARIANT_BOOL ApplyZOrder );
__declspec(implementation_key(333)) long IAspect::GetChart3DPercent ( );
__declspec(implementation_key(334)) void IAspect::PutChart3DPercent ( long Chart3DPercent );
__declspec(implementation_key(335)) long IAspect::GetHeight3D ( );
__declspec(implementation_key(336)) VARIANT_BOOL IAspect::GetView3D ( );
__declspec(implementation_key(337)) void IAspect::PutView3D ( VARIANT_BOOL View3D );
__declspec(implementation_key(338)) long IAspect::GetWidth3D ( );
__declspec(implementation_key(339)) long IAspect::GetRotation ( );
__declspec(implementation_key(340)) void IAspect::PutRotation ( long RotationX );
__declspec(implementation_key(341)) long IAspect::GetElevation ( );
__declspec(implementation_key(342)) void IAspect::PutElevation ( long RotationY );
__declspec(implementation_key(343)) long IAspect::GetZoom ( );
__declspec(implementation_key(344)) void IAspect::PutZoom ( long Zoom );
__declspec(implementation_key(345)) VARIANT_BOOL IAspect::GetZoomText ( );
__declspec(implementation_key(346)) void IAspect::PutZoomText ( VARIANT_BOOL Value );
__declspec(implementation_key(347)) long IAspect::GetHorizOffset ( );
__declspec(implementation_key(348)) void IAspect::PutHorizOffset ( long Value );
__declspec(implementation_key(349)) long IAspect::GetVertOffset ( );
__declspec(implementation_key(350)) void IAspect::PutVertOffset ( long Value );
__declspec(implementation_key(351)) long IAspect::GetTilt ( );
__declspec(implementation_key(352)) void IAspect::PutTilt ( long Value );
__declspec(implementation_key(353)) VARIANT_BOOL IAspect::GetOrthogonal ( );
__declspec(implementation_key(354)) void IAspect::PutOrthogonal ( VARIANT_BOOL Value );
__declspec(implementation_key(355)) long IAspect::GetPerspective ( );
__declspec(implementation_key(356)) void IAspect::PutPerspective ( long Value );
__declspec(implementation_key(357)) ITeeOpenGLPtr IAspect::GetOpenGL ( );
__declspec(implementation_key(358)) long IAspect::GetOrthoAngle ( );
__declspec(implementation_key(359)) void IAspect::PutOrthoAngle ( long Value );
__declspec(implementation_key(360)) _variant_t ICustomToolSeries::GetSeries ( );
__declspec(implementation_key(361)) void ICustomToolSeries::PutSeries ( const _variant_t & Value );
__declspec(implementation_key(362)) _variant_t ICustomToolAxis::GetAxis ( );
__declspec(implementation_key(363)) void ICustomToolAxis::PutAxis ( const _variant_t & Value );
__declspec(implementation_key(364)) VARIANT_BOOL IRotateTool::GetActive ( );
__declspec(implementation_key(365)) void IRotateTool::PutActive ( VARIANT_BOOL Value );
__declspec(implementation_key(366)) enum EMouseButton IRotateTool::GetButton ( );
__declspec(implementation_key(367)) void IRotateTool::PutButton ( enum EMouseButton Value );
__declspec(implementation_key(368)) _bstr_t IRotateTool::Description ( );
__declspec(implementation_key(369)) VARIANT_BOOL ILegendSymbol::GetContinuous ( );
__declspec(implementation_key(370)) void ILegendSymbol::PutContinuous ( VARIANT_BOOL Value );
__declspec(implementation_key(371)) enum ELegendSymbolPosition ILegendSymbol::GetPosition ( );
__declspec(implementation_key(372)) void ILegendSymbol::PutPosition ( enum ELegendSymbolPosition Value );
__declspec(implementation_key(373)) long ILegendSymbol::GetWidth ( );
__declspec(implementation_key(374)) void ILegendSymbol::PutWidth ( long Value );
__declspec(implementation_key(375)) enum ELegendSymbolSize ILegendSymbol::GetWidthUnits ( );
__declspec(implementation_key(376)) void ILegendSymbol::PutWidthUnits ( enum ELegendSymbolSize Value );
__declspec(implementation_key(377)) long ITeeShadow::GetHorizSize ( );
__declspec(implementation_key(378)) void ITeeShadow::PutHorizSize ( long Value );
__declspec(implementation_key(379)) long ITeeShadow::GetVertSize ( );
__declspec(implementation_key(380)) void ITeeShadow::PutVertSize ( long Value );
__declspec(implementation_key(381)) OLE_COLOR ITeeShadow::GetColor ( );
__declspec(implementation_key(382)) void ITeeShadow::PutColor ( OLE_COLOR Value );
__declspec(implementation_key(383)) long ITeeFont::GetInterCharSize ( );
__declspec(implementation_key(384)) void ITeeFont::PutInterCharSize ( long Value );
__declspec(implementation_key(385)) ITeeShadowPtr ITeeFont::GetShadow ( );
__declspec(implementation_key(386)) long IAxisTitle::GetAngle ( );
__declspec(implementation_key(387)) void IAxisTitle::PutAngle ( long Angle );
__declspec(implementation_key(388)) _bstr_t IAxisTitle::GetCaption ( );
__declspec(implementation_key(389)) void IAxisTitle::PutCaption ( _bstr_t Caption );
__declspec(implementation_key(390)) ITeeFontPtr IAxisTitle::GetFont ( );
__declspec(implementation_key(391)) VARIANT_BOOL IAxisTitle::GetVisible ( );
__declspec(implementation_key(392)) void IAxisTitle::PutVisible ( VARIANT_BOOL Value );
__declspec(implementation_key(393)) HRESULT ITeePreviewPanelEvents::OnChangeMargins ( VARIANT_BOOL DisableProportional, long Left, long Top, long Right, long Bottom );
__declspec(implementation_key(394)) HRESULT IChartGridEvents::OnClick ( );
__declspec(implementation_key(395)) enum ERSIStyle IRSIFunction::GetStyle ( );
__declspec(implementation_key(396)) void IRSIFunction::PutStyle ( enum ERSIStyle Value );
__declspec(implementation_key(397)) long IAxisLabels::GetAngle ( );
__declspec(implementation_key(398)) void IAxisLabels::PutAngle ( long Angle );
__declspec(implementation_key(399)) VARIANT_BOOL IAxisLabels::GetVisible ( );
__declspec(implementation_key(400)) void IAxisLabels::PutVisible ( VARIANT_BOOL Visible );
__declspec(implementation_key(401)) _bstr_t IAxisLabels::GetDateTimeFormat ( );
__declspec(implementation_key(402)) void IAxisLabels::PutDateTimeFormat ( _bstr_t DateTimeFormat );
__declspec(implementation_key(403)) ITeeFontPtr IAxisLabels::GetFont ( );
__declspec(implementation_key(404)) _bstr_t IAxisLabels::FormattedValue ( double SomeValue );
__declspec(implementation_key(405)) long IAxisLabels::GetPos ( );
__declspec(implementation_key(406)) long IAxisLabels::Height ( double SomeValue );
__declspec(implementation_key(407)) long IAxisLabels::MaxWidth ( );
__declspec(implementation_key(408)) VARIANT_BOOL IAxisLabels::GetOnAxis ( );
__declspec(implementation_key(409)) void IAxisLabels::PutOnAxis ( VARIANT_BOOL OnAxis );
__declspec(implementation_key(410)) VARIANT_BOOL IAxisLabels::GetRoundFirstLabel ( );
__declspec(implementation_key(411)) void IAxisLabels::PutRoundFirstLabel ( VARIANT_BOOL RoundFirstLabel );
__declspec(implementation_key(412)) long IAxisLabels::GetSeparation ( );
__declspec(implementation_key(413)) void IAxisLabels::PutSeparation ( long Separation );
__declspec(implementation_key(414)) long IAxisLabels::GetSize ( );
__declspec(implementation_key(415)) void IAxisLabels::PutSize ( long Size );
__declspec(implementation_key(416)) enum EAxisLabelStyle IAxisLabels::GetStyle ( );
__declspec(implementation_key(417)) void IAxisLabels::PutStyle ( enum EAxisLabelStyle Style );
__declspec(implementation_key(418)) _bstr_t IAxisLabels::GetValueFormat ( );
__declspec(implementation_key(419)) void IAxisLabels::PutValueFormat ( _bstr_t ValueFormat );
__declspec(implementation_key(420)) long IAxisLabels::Width ( double SomeValue );
__declspec(implementation_key(421)) VARIANT_BOOL IAxisLabels::GetMultiline ( );
__declspec(implementation_key(422)) void IAxisLabels::PutMultiline ( VARIANT_BOOL Value );
__declspec(implementation_key(423)) HRESULT IAxisLabels::TeeSplitInLines ( BSTR * St, _bstr_t Separator );
__declspec(implementation_key(424)) VARIANT_BOOL IAxisLabels::GetExponent ( );
__declspec(implementation_key(425)) void IAxisLabels::PutExponent ( VARIANT_BOOL Value );
__declspec(implementation_key(426)) enum EAxisLabelAlign IAxisLabels::GetAlign ( );
__declspec(implementation_key(427)) void IAxisLabels::PutAlign ( enum EAxisLabelAlign Value );
__declspec(implementation_key(428)) OLE_COLOR IContourLevel::GetColor ( );
__declspec(implementation_key(429)) void IContourLevel::PutColor ( OLE_COLOR Value );
__declspec(implementation_key(430)) double IContourLevel::GetUpToValue ( );
__declspec(implementation_key(431)) void IContourLevel::PutUpToValue ( double Value );
__declspec(implementation_key(432)) IContourLevelPtr IContourLevels::GetItems ( long Index );
__declspec(implementation_key(433)) long IPyramidSeries::GetSizePercent ( );
__declspec(implementation_key(434)) void IPyramidSeries::PutSizePercent ( long Value );
__declspec(implementation_key(435)) HRESULT ITeePanelsList::Delete ( long Index );
__declspec(implementation_key(436)) HRESULT ITeePanelsList::Clear ( );
__declspec(implementation_key(437)) long ITeePanelsList::GetCount ( );
__declspec(implementation_key(438)) OLE_COLOR ITeeCustomShape::GetColor ( );
__declspec(implementation_key(439)) void ITeeCustomShape::PutColor ( OLE_COLOR Value );
__declspec(implementation_key(440)) ITeeFontPtr ITeeCustomShape::GetFont ( );
__declspec(implementation_key(441)) IGradientPtr ITeeCustomShape::GetGradient ( );
__declspec(implementation_key(442)) long ITeeCustomShape::GetShadowSize ( );
__declspec(implementation_key(443)) void ITeeCustomShape::PutShadowSize ( long Value );
__declspec(implementation_key(444)) OLE_COLOR ITeeCustomShape::GetShadowColor ( );
__declspec(implementation_key(445)) void ITeeCustomShape::PutShadowColor ( OLE_COLOR Value );
__declspec(implementation_key(446)) VARIANT_BOOL ITeeCustomShape::GetTransparent ( );
__declspec(implementation_key(447)) void ITeeCustomShape::PutTransparent ( VARIANT_BOOL Value );
__declspec(implementation_key(448)) enum EChartObjectShapeStyle ITeeCustomShape::GetShapeStyle ( );
__declspec(implementation_key(449)) void ITeeCustomShape::PutShapeStyle ( enum EChartObjectShapeStyle Value );
__declspec(implementation_key(450)) long ITeeCustomShape::GetTransparency ( );
__declspec(implementation_key(451)) void ITeeCustomShape::PutTransparency ( long Value );
__declspec(implementation_key(452)) struct TeeRect ITeeCustomShape::GetShapeBounds ( );
__declspec(implementation_key(453)) enum EPanelBevel ITeeCustomShape::GetBevel ( );
__declspec(implementation_key(454)) void ITeeCustomShape::PutBevel ( enum EPanelBevel Value );
__declspec(implementation_key(455)) long ITeeCustomShape::GetBevelWidth ( );
__declspec(implementation_key(456)) void ITeeCustomShape::PutBevelWidth ( long Value );
__declspec(implementation_key(457)) VARIANT_BOOL ITeeShapePosition::GetCustomPosition ( );
__declspec(implementation_key(458)) void ITeeShapePosition::PutCustomPosition ( VARIANT_BOOL Value );
__declspec(implementation_key(459)) long ITeeShapePosition::GetLeft ( );
__declspec(implementation_key(460)) void ITeeShapePosition::PutLeft ( long Value );
__declspec(implementation_key(461)) long ITeeShapePosition::GetTop ( );
__declspec(implementation_key(462)) void ITeeShapePosition::PutTop ( long Value );
__declspec(implementation_key(463)) long IExportFormat::GetWidth ( );
__declspec(implementation_key(464)) void IExportFormat::PutWidth ( long Value );
__declspec(implementation_key(465)) long IExportFormat::GetHeight ( );
__declspec(implementation_key(466)) void IExportFormat::PutHeight ( long Value );
__declspec(implementation_key(467)) HRESULT IExportFormat::SaveToFile ( _bstr_t FileName );
__declspec(implementation_key(468)) _variant_t IExportFormat::SaveToStream ( );
__declspec(implementation_key(469)) VARIANT_BOOL IJPEGExport::GetGrayScale ( );
__declspec(implementation_key(470)) void IJPEGExport::PutGrayScale ( VARIANT_BOOL Value );
__declspec(implementation_key(471)) long IJPEGExport::GetCompressionQuality ( );
__declspec(implementation_key(472)) void IJPEGExport::PutCompressionQuality ( long Value );
__declspec(implementation_key(473)) long IPNGExport::GetCompressionLevel ( );
__declspec(implementation_key(474)) void IPNGExport::PutCompressionLevel ( long Value );
__declspec(implementation_key(475)) enum EGIFCompression IGIFExport::GetCompression ( );
__declspec(implementation_key(476)) void IGIFExport::PutCompression ( enum EGIFCompression Value );
__declspec(implementation_key(477)) enum EGIFDitherMode IGIFExport::GetDitherMode ( );
__declspec(implementation_key(478)) void IGIFExport::PutDitherMode ( enum EGIFDitherMode Value );
__declspec(implementation_key(479)) enum EGIFColorReduction IGIFExport::GetColorReduction ( );
__declspec(implementation_key(480)) void IGIFExport::PutColorReduction ( enum EGIFColorReduction Value );
__declspec(implementation_key(481)) VARIANT_BOOL IMetafileExport::GetEnhanced ( );
__declspec(implementation_key(482)) void IMetafileExport::PutEnhanced ( VARIANT_BOOL Value );
__declspec(implementation_key(483)) enum EPixelFormat IBMPExport::GetColors ( );
__declspec(implementation_key(484)) void IBMPExport::PutColors ( enum EPixelFormat Value );
__declspec(implementation_key(485)) VARIANT_BOOL IBMPExport::GetMonochrome ( );
__declspec(implementation_key(486)) void IBMPExport::PutMonochrome ( VARIANT_BOOL Value );
__declspec(implementation_key(487)) HRESULT IChartImageTool::ImageLoad ( _bstr_t FileName );
__declspec(implementation_key(488)) HRESULT IChartImageTool::ImageClear ( );
__declspec(implementation_key(489)) enum EMarkToolMouseAction IMarksTipTool::GetMouseAction ( );
__declspec(implementation_key(490)) void IMarksTipTool::PutMouseAction ( enum EMarkToolMouseAction Value );
__declspec(implementation_key(491)) enum EMarkStyle IMarksTipTool::GetStyle ( );
__declspec(implementation_key(492)) void IMarksTipTool::PutStyle ( enum EMarkStyle Value );
__declspec(implementation_key(493)) long IMarksTipTool::GetDelay ( );
__declspec(implementation_key(494)) void IMarksTipTool::PutDelay ( long Value );
__declspec(implementation_key(495)) VARIANT_BOOL IRMSFunction::GetComplete ( );
__declspec(implementation_key(496)) void IRMSFunction::PutComplete ( VARIANT_BOOL Value );
__declspec(implementation_key(497)) HRESULT INativeExport::SaveToFile ( _bstr_t FileName, VARIANT_BOOL IncludeData );
__declspec(implementation_key(498)) _variant_t INativeExport::SaveToStream ( VARIANT_BOOL IncludeData );
__declspec(implementation_key(499)) VARIANT_BOOL IDataExport::GetIncludeHeader ( );
__declspec(implementation_key(500)) void IDataExport::PutIncludeHeader ( VARIANT_BOOL Value );
__declspec(implementation_key(501)) VARIANT_BOOL IDataExport::GetIncludeLabels ( );
__declspec(implementation_key(502)) void IDataExport::PutIncludeLabels ( VARIANT_BOOL Value );
__declspec(implementation_key(503)) VARIANT_BOOL IDataExport::GetIncludeIndex ( );
__declspec(implementation_key(504)) void IDataExport::PutIncludeIndex ( VARIANT_BOOL Value );
__declspec(implementation_key(505)) _variant_t IDataExport::GetSeries ( );
__declspec(implementation_key(506)) void IDataExport::PutSeries ( const _variant_t & Value );
__declspec(implementation_key(507)) HRESULT IDataExport::SaveToFile ( _bstr_t FileName );
__declspec(implementation_key(508)) _variant_t IDataExport::SaveToStream ( );
__declspec(implementation_key(509)) _bstr_t IDataExport::AsString ( );
__declspec(implementation_key(510)) _bstr_t ITextExport::GetTextDelimiter ( );
__declspec(implementation_key(511)) void ITextExport::PutTextDelimiter ( _bstr_t Value );
__declspec(implementation_key(512)) HRESULT IExport::CopyToClipboardBitmap ( );
__declspec(implementation_key(513)) HRESULT IExport::CopyToClipboardMetafile ( VARIANT_BOOL Enhanced );
__declspec(implementation_key(514)) HRESULT IExport::SaveToBitmapFile ( _bstr_t FileName );
__declspec(implementation_key(515)) HRESULT IExport::SaveToFile ( _bstr_t FileName );
__declspec(implementation_key(516)) HRESULT IExport::SaveToJPEGFile ( _bstr_t FileName, VARIANT_BOOL Gray, enum EJPEGPerformance Performance, long Quality, long Width, long Height );
__declspec(implementation_key(517)) HRESULT IExport::SaveToMetafile ( _bstr_t FileName );
__declspec(implementation_key(518)) HRESULT IExport::SaveToMetafileEnh ( _bstr_t FileName );
__declspec(implementation_key(519)) HRESULT IExport::ShowExport ( );
__declspec(implementation_key(520)) _bstr_t IExport::SaveChartDialog ( );
__declspec(implementation_key(521)) HRESULT IExport::ConvertTeeFileToText ( _bstr_t InputFile, _bstr_t OutputFile );
__declspec(implementation_key(522)) _variant_t IExport::Stream ( enum EStreamType StreamType );
__declspec(implementation_key(523)) IJPEGExportPtr IExport::GetasJPEG ( );
__declspec(implementation_key(524)) IPNGExportPtr IExport::GetasPNG ( );
__declspec(implementation_key(525)) IGIFExportPtr IExport::GetasGIF ( );
__declspec(implementation_key(526)) IBMPExportPtr IExport::GetasBMP ( );
__declspec(implementation_key(527)) IPCXExportPtr IExport::GetasPCX ( );
__declspec(implementation_key(528)) IMetafileExportPtr IExport::GetasMetafile ( );
__declspec(implementation_key(529)) INativeExportPtr IExport::GetasNative ( );
__declspec(implementation_key(530)) IXMLExportPtr IExport::GetasXML ( );
__declspec(implementation_key(531)) IXLSExportPtr IExport::GetasXLS ( );
__declspec(implementation_key(532)) IHTMLExportPtr IExport::GetasHTML ( );
__declspec(implementation_key(533)) ITextExportPtr IExport::GetasText ( );
__declspec(implementation_key(534)) HRESULT IExport::EmailFile ( _bstr_t FileName );
__declspec(implementation_key(535)) VARIANT_BOOL ICalendarCell::GetVisible ( );
__declspec(implementation_key(536)) void ICalendarCell::PutVisible ( VARIANT_BOOL Value );
__declspec(implementation_key(537)) _bstr_t ICalendarCellUpper::GetFormat ( );
__declspec(implementation_key(538)) void ICalendarCellUpper::PutFormat ( _bstr_t Value );
__declspec(implementation_key(539)) VARIANT_BOOL ICalendarCellUpper::GetUpperCase ( );
__declspec(implementation_key(540)) void ICalendarCellUpper::PutUpperCase ( VARIANT_BOOL Value );
__declspec(implementation_key(541)) double ICalendarSeries::GetDate ( );
__declspec(implementation_key(542)) void ICalendarSeries::PutDate ( double Value );
__declspec(implementation_key(543)) ICalendarCellPtr ICalendarSeries::GetDays ( );
__declspec(implementation_key(544)) ICalendarCellUpperPtr ICalendarSeries::GetMonths ( );
__declspec(implementation_key(545)) ICalendarCellPtr ICalendarSeries::GetTrailing ( );
__declspec(implementation_key(546)) ICalendarCellPtr ICalendarSeries::GetSunday ( );
__declspec(implementation_key(547)) ICalendarCellPtr ICalendarSeries::GetToday ( );
__declspec(implementation_key(548)) ICalendarCellUpperPtr ICalendarSeries::GetWeekdays ( );
__declspec(implementation_key(549)) HRESULT ICalendarSeries::NextMonth ( );
__declspec(implementation_key(550)) HRESULT ICalendarSeries::PreviousMonth ( );
__declspec(implementation_key(551)) struct TeeRect ICalendarSeries::RectCell ( long Column, long Row );
__declspec(implementation_key(552)) long ICalendarSeries::Rows ( );
__declspec(implementation_key(553)) struct TeeRect ICalendarSeries::SeriesRect ( );
__declspec(implementation_key(554)) VARIANT_BOOL ICalendarSeries::GetNextButtonVisible ( );
__declspec(implementation_key(555)) void ICalendarSeries::PutNextButtonVisible ( VARIANT_BOOL Value );
__declspec(implementation_key(556)) VARIANT_BOOL ICalendarSeries::GetPreviousButtonVisible ( );
__declspec(implementation_key(557)) void ICalendarSeries::PutPreviousButtonVisible ( VARIANT_BOOL Value );
__declspec(implementation_key(558)) long ISeriesTextField::GetFieldIndex ( );
__declspec(implementation_key(559)) void ISeriesTextField::PutFieldIndex ( long Value );
__declspec(implementation_key(560)) _bstr_t ISeriesTextField::GetFieldName ( );
__declspec(implementation_key(561)) void ISeriesTextField::PutFieldName ( _bstr_t Value );
__declspec(implementation_key(562)) ISeriesTextFieldPtr ISeriesTextFields::GetItems ( long Index );
__declspec(implementation_key(563)) HRESULT ISeriesTextFields::Clear ( );
__declspec(implementation_key(564)) HRESULT ISeriesTextFields::Delete ( long Index );
__declspec(implementation_key(565)) long ISeriesTextFields::GetCount ( );
__declspec(implementation_key(566)) long IValueLists::GetCount ( );
__declspec(implementation_key(567)) IValueListPtr IValueLists::GetItems ( long Index );
__declspec(implementation_key(568)) long IChartGridRows::GetRow ( );
__declspec(implementation_key(569)) void IChartGridRows::PutRow ( long Value );
__declspec(implementation_key(570)) long IChartGridRows::GetCount ( );
__declspec(implementation_key(571)) long IChartGridRows::GetHeights ( long Index );
__declspec(implementation_key(572)) void IChartGridRows::PutHeights ( long Index, long Value );
__declspec(implementation_key(573)) long IChartGridCols::GetCol ( );
__declspec(implementation_key(574)) void IChartGridCols::PutCol ( long Value );
__declspec(implementation_key(575)) long IChartGridCols::GetCount ( );
__declspec(implementation_key(576)) long IChartGridCols::GetWidths ( long Index );
__declspec(implementation_key(577)) void IChartGridCols::PutWidths ( long Index, long Value );
__declspec(implementation_key(578)) OLE_COLOR IPen::GetColor ( );
__declspec(implementation_key(579)) void IPen::PutColor ( OLE_COLOR Color );
__declspec(implementation_key(580)) long IPen::GetWidth ( );
__declspec(implementation_key(581)) void IPen::PutWidth ( long Width );
__declspec(implementation_key(582)) enum EChartPenStyle IPen::GetStyle ( );
__declspec(implementation_key(583)) void IPen::PutStyle ( enum EChartPenStyle Style );
__declspec(implementation_key(584)) VARIANT_BOOL IPen::GetVisible ( );
__declspec(implementation_key(585)) void IPen::PutVisible ( VARIANT_BOOL Visible );
__declspec(implementation_key(586)) enum EPenEndStyle IPen::GetEndStyle ( );
__declspec(implementation_key(587)) void IPen::PutEndStyle ( enum EPenEndStyle Value );
__declspec(implementation_key(588)) IBrushPtr ICanvas::GetBrush ( );
__declspec(implementation_key(589)) IPenPtr ICanvas::GetPen ( );
__declspec(implementation_key(590)) HRESULT ICanvas::LineTo ( long X, long Y );
__declspec(implementation_key(591)) HRESULT ICanvas::MoveTo ( long X, long Y );
__declspec(implementation_key(592)) HRESULT ICanvas::Rectangle ( long Left, long Top, long Right, long Bottom );
__declspec(implementation_key(593)) IChartFontPtr ICanvas::GetFont ( );
__declspec(implementation_key(594)) HRESULT ICanvas::Arc ( long X1, long Y1, long X2, long Y2, long X3, long Y3, long X4, long Y4 );
__declspec(implementation_key(595)) HRESULT ICanvas::Ellipse ( long X1, long Y1, long X2, long Y2 );
__declspec(implementation_key(596)) HRESULT ICanvas::TextOut ( long X, long Y, _bstr_t Text );
__declspec(implementation_key(597)) long ICanvas::TextHeight ( _bstr_t SomeText );
__declspec(implementation_key(598)) long ICanvas::TextWidth ( _bstr_t SomeText );
__declspec(implementation_key(599)) HRESULT ICanvas::ClipRectangle ( long Left, long Top, long Right, long Bottom );
__declspec(implementation_key(600)) HRESULT ICanvas::UnClipRectangle ( );
__declspec(implementation_key(601)) HRESULT ICanvas::RotateLabel ( long X, long Y, _bstr_t St, long RotDegree );
__declspec(implementation_key(602)) VARIANT_BOOL ICanvas::IsScreenHighColor ( );
__declspec(implementation_key(603)) long ICanvas::GetTop ( );
__declspec(implementation_key(604)) long ICanvas::GetLeft ( );
__declspec(implementation_key(605)) long ICanvas::GetWidth ( );
__declspec(implementation_key(606)) long ICanvas::GetHeight ( );
__declspec(implementation_key(607)) enum ECanvasBackMode ICanvas::GetBackMode ( );
__declspec(implementation_key(608)) void ICanvas::PutBackMode ( enum ECanvasBackMode Value );
__declspec(implementation_key(609)) OLE_COLOR ICanvas::GetBackColor ( );
__declspec(implementation_key(610)) void ICanvas::PutBackColor ( OLE_COLOR Value );
__declspec(implementation_key(611)) VARIANT_BOOL ICanvas::GetSupportsFullRotation ( );
__declspec(implementation_key(612)) VARIANT_BOOL ICanvas::GetUseBuffer ( );
__declspec(implementation_key(613)) void ICanvas::PutUseBuffer ( VARIANT_BOOL Value );
__declspec(implementation_key(614)) HRESULT ICanvas::Pie3D ( long XCenter, long YCenter, long XRadius, long YRadius, long Z0, long Z1, double StartAngle, double EndAngle, VARIANT_BOOL DarkSides, VARIANT_BOOL DrawSides );
__declspec(implementation_key(615)) HRESULT ICanvas::LineWithZ ( long X0, long Y0, long X1, long Y1, long Z );
__declspec(implementation_key(616)) HRESULT ICanvas::MoveTo3D ( long X, long Y, long Z );
__declspec(implementation_key(617)) HRESULT ICanvas::LineTo3D ( long X, long Y, long Z );
__declspec(implementation_key(618)) HRESULT ICanvas::Plane3D ( long X0, long Y0, long X1, long Y1, long Z0, long Z1 );
__declspec(implementation_key(619)) HRESULT ICanvas::ZLine3D ( long X, long Y, long Z0, long Z1 );
__declspec(implementation_key(620)) HRESULT ICanvas::RotateLabel3D ( long X, long Y, long Z, _bstr_t St, long RotDegree );
__declspec(implementation_key(621)) enum ECanvasTextAlign ICanvas::GetTextAlign ( );
__declspec(implementation_key(622)) void ICanvas::PutTextAlign ( enum ECanvasTextAlign Value );
__declspec(implementation_key(623)) HRESULT ICanvas::VertLine3D ( long X, long Top, long Bottom, long Z );
__declspec(implementation_key(624)) HRESULT ICanvas::HorizLine3D ( long Left, long Right, long Y, long Z );
__declspec(implementation_key(625)) HRESULT ICanvas::Cylinder ( VARIANT_BOOL Vertical, long Left, long Top, long Right, long Bottom, long Z0, long Z1, VARIANT_BOOL DarkCover );
__declspec(implementation_key(626)) HRESULT ICanvas::Cube ( long Left, long Right, long Top, long Bottom, long Z0, long Z1, VARIANT_BOOL DarkSides );
__declspec(implementation_key(627)) HRESULT ICanvas::EllipseWithZ ( long X1, long Y1, long X2, long Y2, long Z );
__declspec(implementation_key(628)) HRESULT ICanvas::PlaneWithZ ( long X1, long Y1, long X2, long Y2, long X3, long Y3, long X4, long Y4, long Z );
__declspec(implementation_key(629)) HRESULT ICanvas::PlaneFour3D ( long X1, long Y1, long X2, long Y2, long X3, long Y3, long X4, long Y4, long Z0, long Z1 );
__declspec(implementation_key(630)) HRESULT ICanvas::RectangleWithZ ( long Left, long Top, long Right, long Bottom, long Z );
__declspec(implementation_key(631)) HRESULT ICanvas::RectangleZ ( long Left, long Top, long Bottom, long Z0, long Z1 );
__declspec(implementation_key(632)) HRESULT ICanvas::TextOut3D ( long X, long Y, long Z, _bstr_t Text );
__declspec(implementation_key(633)) HRESULT ICanvas::TriangleWithZ ( long X1, long Y1, long X2, long Y2, long X3, long Y3, long Z );
__declspec(implementation_key(634)) HRESULT ICanvas::Frame3D ( long Left, long Top, long Right, long Bottom, OLE_COLOR TopColor, OLE_COLOR BottomColor, long Width );
__declspec(implementation_key(635)) HRESULT ICanvas::EraseBackground ( long Left, long Top, long Right, long Bottom );
__declspec(implementation_key(636)) HRESULT ICanvas::GradientFill ( long Left, long Top, long Right, long Bottom, OLE_COLOR StartColor, OLE_COLOR EndColor, enum EGradientDirection Direction );
__declspec(implementation_key(637)) HRESULT ICanvas::Line ( long X0, long Y0, long X1, long Y1 );
__declspec(implementation_key(638)) HRESULT ICanvas::RectangleY ( long Left, long Top, long Right, long Z0, long Z1 );
__declspec(implementation_key(639)) HRESULT ICanvas::Pixels3D ( long X, long Y, long Z, OLE_COLOR Value );
__declspec(implementation_key(640)) long ICanvas::GetHandleDC ( );
__declspec(implementation_key(641)) HRESULT ICanvas::Cone ( VARIANT_BOOL Vertical, long Left, long Top, long Right, long Bottom, long Z0, long Z1, VARIANT_BOOL Dark3D, long ConePercent );
__declspec(implementation_key(642)) HRESULT ICanvas::Sphere ( long X, long Y, long Z, double Radius );
__declspec(implementation_key(643)) HRESULT ICanvas::Arrow ( VARIANT_BOOL Filled, long X0, long Y0, long X1, long Y1, long HeadWidth, long HeadHeight, long Z );
__declspec(implementation_key(644)) HRESULT ICanvas::Draw ( long X, long Y, struct IPicture * Image );
__declspec(implementation_key(645)) ITeePoint3DPtr ICanvas::GetRotationCenter ( );
__declspec(implementation_key(646)) long ICanvas::GetChartXCenter ( );
__declspec(implementation_key(647)) long ICanvas::GetChartYCenter ( );
__declspec(implementation_key(648)) HRESULT ICanvas::GrayScale ( VARIANT_BOOL Inverted );
__declspec(implementation_key(649)) VARIANT_BOOL IAxis::GetAutomatic ( );
__declspec(implementation_key(650)) void IAxis::PutAutomatic ( VARIANT_BOOL Automatic );
__declspec(implementation_key(651)) VARIANT_BOOL IAxis::GetAutomaticMaximum ( );
__declspec(implementation_key(652)) void IAxis::PutAutomaticMaximum ( VARIANT_BOOL AutomaticMaximum );
__declspec(implementation_key(653)) VARIANT_BOOL IAxis::GetAutomaticMinimum ( );
__declspec(implementation_key(654)) void IAxis::PutAutomaticMinimum ( VARIANT_BOOL AutomaticMinimum );
__declspec(implementation_key(655)) IPenPtr IAxis::GetAxisPen ( );
__declspec(implementation_key(656)) enum EAxisType IAxis::GetAxisType ( );
__declspec(implementation_key(657)) VARIANT_BOOL IAxis::GetExactDateTime ( );
__declspec(implementation_key(658)) void IAxis::PutExactDateTime ( VARIANT_BOOL ExactDateTime );
__declspec(implementation_key(659)) IPenPtr IAxis::GetGridPen ( );
__declspec(implementation_key(660)) double IAxis::GetIncrement ( );
__declspec(implementation_key(661)) void IAxis::PutIncrement ( double Increment );
__declspec(implementation_key(662)) VARIANT_BOOL IAxis::GetInverted ( );
__declspec(implementation_key(663)) void IAxis::PutInverted ( VARIANT_BOOL Inverted );
__declspec(implementation_key(664)) IAxisLabelsPtr IAxis::GetLabels ( );
__declspec(implementation_key(665)) VARIANT_BOOL IAxis::GetLogarithmic ( );
__declspec(implementation_key(666)) void IAxis::PutLogarithmic ( VARIANT_BOOL Logarithmic );
__declspec(implementation_key(667)) double IAxis::GetMaximum ( );
__declspec(implementation_key(668)) void IAxis::PutMaximum ( double Maximum );
__declspec(implementation_key(669)) double IAxis::GetMinimum ( );
__declspec(implementation_key(670)) void IAxis::PutMinimum ( double Minimum );
__declspec(implementation_key(671)) long IAxis::GetMinorTickCount ( );
__declspec(implementation_key(672)) void IAxis::PutMinorTickCount ( long MinorTickCount );
__declspec(implementation_key(673)) long IAxis::GetMinorTickLength ( );
__declspec(implementation_key(674)) void IAxis::PutMinorTickLength ( long MinorTickLength );
__declspec(implementation_key(675)) IPenPtr IAxis::GetMinorTicks ( );
__declspec(implementation_key(676)) long IAxis::GetPosition ( );
__declspec(implementation_key(677)) long IAxis::GetTickInnerLength ( );
__declspec(implementation_key(678)) void IAxis::PutTickInnerLength ( long TickInnerLength );
__declspec(implementation_key(679)) long IAxis::GetTickLength ( );
__declspec(implementation_key(680)) void IAxis::PutTickLength ( long TickLength );
__declspec(implementation_key(681)) VARIANT_BOOL IAxis::GetTickOnLabelsOnly ( );
__declspec(implementation_key(682)) void IAxis::PutTickOnLabelsOnly ( VARIANT_BOOL TickOnLabelsOnly );
__declspec(implementation_key(683)) IPenPtr IAxis::GetTicks ( );
__declspec(implementation_key(684)) IPenPtr IAxis::GetTicksInner ( );
__declspec(implementation_key(685)) IAxisTitlePtr IAxis::GetTitle ( );
__declspec(implementation_key(686)) long IAxis::GetTitleSize ( );
__declspec(implementation_key(687)) void IAxis::PutTitleSize ( long TitleSize );
__declspec(implementation_key(688)) VARIANT_BOOL IAxis::GetVisible ( );
__declspec(implementation_key(689)) void IAxis::PutVisible ( VARIANT_BOOL Visible );
__declspec(implementation_key(690)) HRESULT IAxis::AdjustMaxMin ( );
__declspec(implementation_key(691)) long IAxis::CalcXPosValue ( double SomeValue );
__declspec(implementation_key(692)) long IAxis::CalcYPosValue ( double SomeValue );
__declspec(implementation_key(693)) long IAxis::CalcXSizeValue ( double SomeValue );
__declspec(implementation_key(694)) long IAxis::CalcYSizeValue ( double SomeValue );
__declspec(implementation_key(695)) double IAxis::CalcPosPoint ( long SomeValue );
__declspec(implementation_key(696)) VARIANT_BOOL IAxis::Clicked ( long XCoord, long YCoord );
__declspec(implementation_key(697)) HRESULT IAxis::CustomDraw ( long APosLabels, long APosTitle, long APosAxis, VARIANT_BOOL GridVisible );
__declspec(implementation_key(698)) VARIANT_BOOL IAxis::IsDateTime ( );
__declspec(implementation_key(699)) double IAxis::MaxXValue ( );
__declspec(implementation_key(700)) double IAxis::MaxYValue ( );
__declspec(implementation_key(701)) double IAxis::MinXValue ( );
__declspec(implementation_key(702)) double IAxis::MinYValue ( );
__declspec(implementation_key(703)) HRESULT IAxis::Scroll ( double Offset, VARIANT_BOOL CheckLimits );
__declspec(implementation_key(704)) HRESULT IAxis::SetMinMax ( double AMin, double AMax );
__declspec(implementation_key(705)) VARIANT_BOOL IAxis::GetGridCentered ( );
__declspec(implementation_key(706)) void IAxis::PutGridCentered ( VARIANT_BOOL Value );
__declspec(implementation_key(707)) double IAxis::GetPositionPercent ( );
__declspec(implementation_key(708)) void IAxis::PutPositionPercent ( double Value );
__declspec(implementation_key(709)) double IAxis::GetStartPosition ( );
__declspec(implementation_key(710)) void IAxis::PutStartPosition ( double Value );
__declspec(implementation_key(711)) double IAxis::GetEndPosition ( );
__declspec(implementation_key(712)) void IAxis::PutEndPosition ( double Value );
__declspec(implementation_key(713)) long IAxis::GetLogarithmicBase ( );
__declspec(implementation_key(714)) void IAxis::PutLogarithmicBase ( long Value );
__declspec(implementation_key(715)) HRESULT IAxis::CustomDrawMinMax ( long APosLabels, long APosTitle, long APosAxis, VARIANT_BOOL GridVisible, double AMinimum, double AMaximum, long AStartPosition, long AEndPosition );
__declspec(implementation_key(716)) IPenPtr IAxis::GetMinorGrid ( );
__declspec(implementation_key(717)) VARIANT_BOOL IAxis::GetOtherside ( );
__declspec(implementation_key(718)) void IAxis::PutOtherside ( VARIANT_BOOL Value );
__declspec(implementation_key(719)) long IAxis::GetAxisLink ( );
__declspec(implementation_key(720)) double IAxis::MaxVisibleSeriesValue ( VARIANT_BOOL AllSeries, long SeriesIndex );
__declspec(implementation_key(721)) double IAxis::MinVisibleSeriesValue ( VARIANT_BOOL AllSeries, long SeriesIndex );
__declspec(implementation_key(722)) double IAxis::CalcIncrement ( );
__declspec(implementation_key(723)) IAxisPtr IAxes::GetLeft ( );
__declspec(implementation_key(724)) IAxisPtr IAxes::GetRight ( );
__declspec(implementation_key(725)) IAxisPtr IAxes::GetTop ( );
__declspec(implementation_key(726)) IAxisPtr IAxes::GetBottom ( );
__declspec(implementation_key(727)) VARIANT_BOOL IAxes::GetVisible ( );
__declspec(implementation_key(728)) void IAxes::PutVisible ( VARIANT_BOOL Visible );
__declspec(implementation_key(729)) IAxisPtr IAxes::GetDepth ( );
__declspec(implementation_key(730)) VARIANT_BOOL IAxes::GetDrawAxesBeforeSeries ( );
__declspec(implementation_key(731)) void IAxes::PutDrawAxesBeforeSeries ( VARIANT_BOOL Value );
__declspec(implementation_key(732)) long IAxes::AddCustom ( VARIANT_BOOL IsHorizontal );
__declspec(implementation_key(733)) IAxisPtr IAxes::GetCustom ( long CustomAxisIndex );
__declspec(implementation_key(734)) long IAxes::GetCustomCount ( );
__declspec(implementation_key(735)) HRESULT IAxes::RemoveCustom ( long CustomAxisIndex );
__declspec(implementation_key(736)) HRESULT IAxes::RemoveAllCustom ( );
__declspec(implementation_key(737)) VARIANT_BOOL IZoom::GetEnable ( );
__declspec(implementation_key(738)) void IZoom::PutEnable ( VARIANT_BOOL Enable );
__declspec(implementation_key(739)) VARIANT_BOOL IZoom::GetAnimated ( );
__declspec(implementation_key(740)) void IZoom::PutAnimated ( VARIANT_BOOL Animated );
__declspec(implementation_key(741)) long IZoom::GetAnimatedSteps ( );
__declspec(implementation_key(742)) void IZoom::PutAnimatedSteps ( long AnimatedSteps );
__declspec(implementation_key(743)) HRESULT IZoom::Undo ( );
__declspec(implementation_key(744)) HRESULT IZoom::ZoomRect ( long Left, long Top, long Right, long Bottom );
__declspec(implementation_key(745)) VARIANT_BOOL IZoom::GetZoomed ( );
__declspec(implementation_key(746)) IPenPtr IZoom::GetPen ( );
__declspec(implementation_key(747)) long IZoom::GetMinimumPixels ( );
__declspec(implementation_key(748)) void IZoom::PutMinimumPixels ( long Value );
__declspec(implementation_key(749)) enum EMouseButton IZoom::GetMouseButton ( );
__declspec(implementation_key(750)) void IZoom::PutMouseButton ( enum EMouseButton Value );
__declspec(implementation_key(751)) enum ETeeZoomDirection IZoom::GetDirection ( );
__declspec(implementation_key(752)) void IZoom::PutDirection ( enum ETeeZoomDirection Value );
__declspec(implementation_key(753)) IBrushPtr IZoom::GetBrush ( );
__declspec(implementation_key(754)) HRESULT IZoom::ZoomPercent ( double PercentZoom );
__declspec(implementation_key(755)) IBrushPtr IWall::GetBrush ( );
__declspec(implementation_key(756)) OLE_COLOR IWall::GetColor ( );
__declspec(implementation_key(757)) void IWall::PutColor ( OLE_COLOR Color );
__declspec(implementation_key(758)) IPenPtr IWall::GetPen ( );
__declspec(implementation_key(759)) long IWall::GetSize ( );
__declspec(implementation_key(760)) void IWall::PutSize ( long Size );
__declspec(implementation_key(761)) VARIANT_BOOL IWall::GetTransparent ( );
__declspec(implementation_key(762)) void IWall::PutTransparent ( VARIANT_BOOL Value );
__declspec(implementation_key(763)) VARIANT_BOOL IWall::GetDark3D ( );
__declspec(implementation_key(764)) void IWall::PutDark3D ( VARIANT_BOOL Value );
__declspec(implementation_key(765)) IGradientPtr IWall::GetGradient ( );
__declspec(implementation_key(766)) VARIANT_BOOL IWall::GetVisible ( );
__declspec(implementation_key(767)) void IWall::PutVisible ( VARIANT_BOOL Value );
__declspec(implementation_key(768)) long IWall::GetTransparency ( );
__declspec(implementation_key(769)) void IWall::PutTransparency ( long Value );
__declspec(implementation_key(770)) IWallPtr IWalls::GetBottom ( );
__declspec(implementation_key(771)) IWallPtr IWalls::GetLeft ( );
__declspec(implementation_key(772)) VARIANT_BOOL IWalls::GetVisible ( );
__declspec(implementation_key(773)) void IWalls::PutVisible ( VARIANT_BOOL Visible );
__declspec(implementation_key(774)) OLE_COLOR IWalls::GetBackColor ( );
__declspec(implementation_key(775)) void IWalls::PutBackColor ( OLE_COLOR BackColor );
__declspec(implementation_key(776)) IWallPtr IWalls::GetBack ( );
__declspec(implementation_key(777)) IWallPtr IWalls::GetRight ( );
__declspec(implementation_key(778)) IPenPtr IMarks::GetArrow ( );
__declspec(implementation_key(779)) long IMarks::GetArrowLength ( );
__declspec(implementation_key(780)) void IMarks::PutArrowLength ( long ArrowLength );
__declspec(implementation_key(781)) OLE_COLOR IMarks::GetBackColor ( );
__declspec(implementation_key(782)) void IMarks::PutBackColor ( OLE_COLOR BackColor );
__declspec(implementation_key(783)) VARIANT_BOOL IMarks::GetClip ( );
__declspec(implementation_key(784)) void IMarks::PutClip ( VARIANT_BOOL Clip );
__declspec(implementation_key(785)) IPenPtr IMarks::GetFrame ( );
__declspec(implementation_key(786)) enum EMarkStyle IMarks::GetStyle ( );
__declspec(implementation_key(787)) void IMarks::PutStyle ( enum EMarkStyle Style );
__declspec(implementation_key(788)) VARIANT_BOOL IMarks::GetVisible ( );
__declspec(implementation_key(789)) void IMarks::PutVisible ( VARIANT_BOOL Visible );
__declspec(implementation_key(790)) ISeriesMarksPositionsPtr IMarks::GetPositions ( );
__declspec(implementation_key(791)) long IMarks::Clicked ( long X, long Y );
__declspec(implementation_key(792)) long IMarks::GetZPosition ( );
__declspec(implementation_key(793)) void IMarks::PutZPosition ( long Value );
__declspec(implementation_key(794)) long IMarks::GetAngle ( );
__declspec(implementation_key(795)) void IMarks::PutAngle ( long Value );
__declspec(implementation_key(796)) long IMarks::GetDrawEvery ( );
__declspec(implementation_key(797)) void IMarks::PutDrawEvery ( long Value );
__declspec(implementation_key(798)) VARIANT_BOOL IMarks::GetMultiline ( );
__declspec(implementation_key(799)) void IMarks::PutMultiline ( VARIANT_BOOL Value );
__declspec(implementation_key(800)) HRESULT IMarks::ResetPositions ( );
__declspec(implementation_key(801)) IBrushPtr IPointer::GetBrush ( );
__declspec(implementation_key(802)) VARIANT_BOOL IPointer::GetDraw3D ( );
__declspec(implementation_key(803)) void IPointer::PutDraw3D ( VARIANT_BOOL Draw3D );
__declspec(implementation_key(804)) long IPointer::GetHorizontalSize ( );
__declspec(implementation_key(805)) void IPointer::PutHorizontalSize ( long HorizontalSize );
__declspec(implementation_key(806)) long IPointer::GetVerticalSize ( );
__declspec(implementation_key(807)) void IPointer::PutVerticalSize ( long VerticalSize );
__declspec(implementation_key(808)) VARIANT_BOOL IPointer::GetInflateMargins ( );
__declspec(implementation_key(809)) void IPointer::PutInflateMargins ( VARIANT_BOOL InflateMargins );
__declspec(implementation_key(810)) IPenPtr IPointer::GetPen ( );
__declspec(implementation_key(811)) enum EPointerStyle IPointer::GetStyle ( );
__declspec(implementation_key(812)) void IPointer::PutStyle ( enum EPointerStyle Style );
__declspec(implementation_key(813)) VARIANT_BOOL IPointer::GetVisible ( );
__declspec(implementation_key(814)) void IPointer::PutVisible ( VARIANT_BOOL Visible );
__declspec(implementation_key(815)) VARIANT_BOOL IPointer::GetDark3D ( );
__declspec(implementation_key(816)) void IPointer::PutDark3D ( VARIANT_BOOL Value );
__declspec(implementation_key(817)) HRESULT IPointer::DrawPointer ( long DC, VARIANT_BOOL Is3D, long px, long py, long tmpHoriz, long tmpVert, OLE_COLOR AColor, enum EPointerStyle AStyle );
__declspec(implementation_key(818)) IPointerPtr ICustomSeries::GetPointer ( );
__declspec(implementation_key(819)) VARIANT_BOOL ICustomSeries::GetStairs ( );
__declspec(implementation_key(820)) void ICustomSeries::PutStairs ( VARIANT_BOOL Stairs );
__declspec(implementation_key(821)) VARIANT_BOOL ICustomSeries::GetInvertedStairs ( );
__declspec(implementation_key(822)) void ICustomSeries::PutInvertedStairs ( VARIANT_BOOL InvertedStairs );
__declspec(implementation_key(823)) IPenPtr ICustomSeries::GetLinePen ( );
__declspec(implementation_key(824)) enum EBrushStyle ICustomSeries::GetLineBrush ( );
__declspec(implementation_key(825)) void ICustomSeries::PutLineBrush ( enum EBrushStyle LineBrush );
__declspec(implementation_key(826)) VARIANT_BOOL ICustomSeries::GetClickableLine ( );
__declspec(implementation_key(827)) void ICustomSeries::PutClickableLine ( VARIANT_BOOL ClickableLine );
__declspec(implementation_key(828)) long ICustomSeries::GetLineHeight ( );
__declspec(implementation_key(829)) void ICustomSeries::PutLineHeight ( long Value );
__declspec(implementation_key(830)) VARIANT_BOOL ICustomSeries::GetDark3D ( );
__declspec(implementation_key(831)) void ICustomSeries::PutDark3D ( VARIANT_BOOL Value );
__declspec(implementation_key(832)) IBrushPtr ICustomSeries::GetBrush ( );
__declspec(implementation_key(833)) VARIANT_BOOL ICustomSeries::GetColorEachLine ( );
__declspec(implementation_key(834)) void ICustomSeries::PutColorEachLine ( VARIANT_BOOL Value );
__declspec(implementation_key(835)) IPenPtr ICustomSeries::GetOutline ( );
__declspec(implementation_key(836)) long ICustomSeries::GetTransparency ( );
__declspec(implementation_key(837)) void ICustomSeries::PutTransparency ( long Value );
__declspec(implementation_key(838)) enum EBrushStyle IAreaSeries::GetAreaBrush ( );
__declspec(implementation_key(839)) void IAreaSeries::PutAreaBrush ( enum EBrushStyle AreaBrush );
__declspec(implementation_key(840)) IPenPtr IAreaSeries::GetAreaPen ( );
__declspec(implementation_key(841)) enum EMultiArea IAreaSeries::GetMultiArea ( );
__declspec(implementation_key(842)) void IAreaSeries::PutMultiArea ( enum EMultiArea MultiArea );
__declspec(implementation_key(843)) long IAreaSeries::GetOriginPos ( long AValueIndex );
__declspec(implementation_key(844)) VARIANT_BOOL IAreaSeries::GetUseYOrigin ( );
__declspec(implementation_key(845)) void IAreaSeries::PutUseYOrigin ( VARIANT_BOOL Value );
__declspec(implementation_key(846)) double IAreaSeries::GetYOrigin ( );
__declspec(implementation_key(847)) void IAreaSeries::PutYOrigin ( double Value );
__declspec(implementation_key(848)) IPointerPtr IPointSeries::GetPointer ( );
__declspec(implementation_key(849)) VARIANT_BOOL IPointSeries::GetDark3D ( );
__declspec(implementation_key(850)) void IPointSeries::PutDark3D ( VARIANT_BOOL Value );
__declspec(implementation_key(851)) enum ECustomSeriesStack ILineSeries::GetStacked ( );
__declspec(implementation_key(852)) void ILineSeries::PutStacked ( enum ECustomSeriesStack Value );
__declspec(implementation_key(853)) IPenPtr IFastLineSeries::GetLinePen ( );
__declspec(implementation_key(854)) long IFastLineSeries::AddRealTime ( double X, double Y, _bstr_t SomeLabel, OLE_COLOR SomeColor );
__declspec(implementation_key(855)) VARIANT_BOOL IFastLineSeries::GetDrawAllPoints ( );
__declspec(implementation_key(856)) void IFastLineSeries::PutDrawAllPoints ( VARIANT_BOOL Value );
__declspec(implementation_key(857)) IValueListPtr IBubbleSeries::GetRadiusValues ( );
__declspec(implementation_key(858)) VARIANT_BOOL IBubbleSeries::GetSquared ( );
__declspec(implementation_key(859)) void IBubbleSeries::PutSquared ( VARIANT_BOOL Squared );
__declspec(implementation_key(860)) long IBubbleSeries::AddBubble ( double AX, double AY, double ARadius, _bstr_t AXLabel, OLE_COLOR Value );
__declspec(implementation_key(861)) IPenPtr IGanttSeries::GetConnectingPen ( );
__declspec(implementation_key(862)) IValueListPtr IGanttSeries::GetEndValues ( );
__declspec(implementation_key(863)) IValueListPtr IGanttSeries::GetStartValues ( );
__declspec(implementation_key(864)) IValueListPtr IGanttSeries::GetNextTask ( );
__declspec(implementation_key(865)) long IGanttSeries::AddGantt ( double AStart, double AEnd, double AY, _bstr_t SomeLabel );
__declspec(implementation_key(866)) long IGanttSeries::AddGanttColor ( double AStart, double AEnd, double AY, _bstr_t AXLabel, OLE_COLOR Value );
__declspec(implementation_key(867)) enum ETextAlignment IShapeSeries::GetAlignment ( );
__declspec(implementation_key(868)) void IShapeSeries::PutAlignment ( enum ETextAlignment Alignment );
__declspec(implementation_key(869)) IBrushPtr IShapeSeries::GetBrush ( );
__declspec(implementation_key(870)) IChartFontPtr IShapeSeries::GetFont ( );
__declspec(implementation_key(871)) IPenPtr IShapeSeries::GetPen ( );
__declspec(implementation_key(872)) VARIANT_BOOL IShapeSeries::GetRoundRectangle ( );
__declspec(implementation_key(873)) void IShapeSeries::PutRoundRectangle ( VARIANT_BOOL RoundRectangle );
__declspec(implementation_key(874)) enum EShapeStyle IShapeSeries::GetStyle ( );
__declspec(implementation_key(875)) void IShapeSeries::PutStyle ( enum EShapeStyle Style );
__declspec(implementation_key(876)) IStringsPtr IShapeSeries::GetText ( );
__declspec(implementation_key(877)) VARIANT_BOOL IShapeSeries::GetTransparent ( );
__declspec(implementation_key(878)) void IShapeSeries::PutTransparent ( VARIANT_BOOL Transparent );
__declspec(implementation_key(879)) double IShapeSeries::GetX0 ( );
__declspec(implementation_key(880)) void IShapeSeries::PutX0 ( double X0 );
__declspec(implementation_key(881)) double IShapeSeries::GetX1 ( );
__declspec(implementation_key(882)) void IShapeSeries::PutX1 ( double X1 );
__declspec(implementation_key(883)) enum EShapeXYStyle IShapeSeries::GetXYStyle ( );
__declspec(implementation_key(884)) void IShapeSeries::PutXYStyle ( enum EShapeXYStyle XYStyle );
__declspec(implementation_key(885)) double IShapeSeries::GetY0 ( );
__declspec(implementation_key(886)) void IShapeSeries::PutY0 ( double Y0 );
__declspec(implementation_key(887)) double IShapeSeries::GetY1 ( );
__declspec(implementation_key(888)) void IShapeSeries::PutY1 ( double Y1 );
__declspec(implementation_key(889)) HRESULT IShapeSeries::ShapeImageLoad ( _bstr_t FileName );
__declspec(implementation_key(890)) HRESULT IShapeSeries::ShapeImageClear ( );
__declspec(implementation_key(891)) enum ETeeVertAlign IShapeSeries::GetVertAlign ( );
__declspec(implementation_key(892)) void IShapeSeries::PutVertAlign ( enum ETeeVertAlign Value );
__declspec(implementation_key(893)) IGradientPtr IShapeSeries::GetGradient ( );
__declspec(implementation_key(894)) long IArrowSeries::GetArrowHeight ( );
__declspec(implementation_key(895)) void IArrowSeries::PutArrowHeight ( long ArrowHeight );
__declspec(implementation_key(896)) long IArrowSeries::GetArrowWidth ( );
__declspec(implementation_key(897)) void IArrowSeries::PutArrowWidth ( long ArrowWidth );
__declspec(implementation_key(898)) IValueListPtr IArrowSeries::GetEndXValues ( );
__declspec(implementation_key(899)) IValueListPtr IArrowSeries::GetEndYValues ( );
__declspec(implementation_key(900)) IValueListPtr IArrowSeries::GetStartXValues ( );
__declspec(implementation_key(901)) IValueListPtr IArrowSeries::GetStartYValues ( );
__declspec(implementation_key(902)) long IArrowSeries::AddArrow ( double X0, double Y0, double X1, double Y1, _bstr_t ALabel, OLE_COLOR Value );
__declspec(implementation_key(903)) enum EMultiBar ICustomBarSeries::GetMultiBar ( );
__declspec(implementation_key(904)) void ICustomBarSeries::PutMultiBar ( enum EMultiBar MultiBar );
__declspec(implementation_key(905)) VARIANT_BOOL ICustomBarSeries::GetAutoMarkPosition ( );
__declspec(implementation_key(906)) void ICustomBarSeries::PutAutoMarkPosition ( VARIANT_BOOL AutoMarkPosition );
__declspec(implementation_key(907)) IBrushPtr ICustomBarSeries::GetBarBrush ( );
__declspec(implementation_key(908)) IPenPtr ICustomBarSeries::GetBarPen ( );
__declspec(implementation_key(909)) enum EBarStyle ICustomBarSeries::GetBarStyle ( );
__declspec(implementation_key(910)) void ICustomBarSeries::PutBarStyle ( enum EBarStyle BarStyle );
__declspec(implementation_key(911)) long ICustomBarSeries::GetBarWidthPercent ( );
__declspec(implementation_key(912)) void ICustomBarSeries::PutBarWidthPercent ( long BarWidthPercent );
__declspec(implementation_key(913)) VARIANT_BOOL ICustomBarSeries::GetDark3D ( );
__declspec(implementation_key(914)) void ICustomBarSeries::PutDark3D ( VARIANT_BOOL Dark3D );
__declspec(implementation_key(915)) long ICustomBarSeries::GetOffsetPercent ( );
__declspec(implementation_key(916)) void ICustomBarSeries::PutOffsetPercent ( long OffsetPercent );
__declspec(implementation_key(917)) VARIANT_BOOL ICustomBarSeries::GetSideMargins ( );
__declspec(implementation_key(918)) void ICustomBarSeries::PutSideMargins ( VARIANT_BOOL SideMargins );
__declspec(implementation_key(919)) VARIANT_BOOL ICustomBarSeries::GetUseOrigin ( );
__declspec(implementation_key(920)) void ICustomBarSeries::PutUseOrigin ( VARIANT_BOOL UseOrigin );
__declspec(implementation_key(921)) double ICustomBarSeries::GetOrigin ( );
__declspec(implementation_key(922)) void ICustomBarSeries::PutOrigin ( double Origin );
__declspec(implementation_key(923)) long ICustomBarSeries::GetOriginPos ( long SomeValueIndex );
__declspec(implementation_key(924)) VARIANT_BOOL ICustomBarSeries::GetAutoBarSize ( );
__declspec(implementation_key(925)) void ICustomBarSeries::PutAutoBarSize ( VARIANT_BOOL Value );
__declspec(implementation_key(926)) HRESULT ICustomBarSeries::BarImageLoad ( _bstr_t FileName );
__declspec(implementation_key(927)) HRESULT ICustomBarSeries::BarImageClear ( );
__declspec(implementation_key(928)) IGradientPtr ICustomBarSeries::GetGradient ( );
__declspec(implementation_key(929)) long ICustomBarSeries::GetStackGroup ( );
__declspec(implementation_key(930)) void ICustomBarSeries::PutStackGroup ( long Value );
__declspec(implementation_key(931)) long ICustomBarSeries::GetConePercent ( );
__declspec(implementation_key(932)) void ICustomBarSeries::PutConePercent ( long Value );
__declspec(implementation_key(933)) long IBarSeries::GetBarWidth ( );
__declspec(implementation_key(934)) void IBarSeries::PutBarWidth ( long BarWidth );
__declspec(implementation_key(935)) long IHorizBarSeries::GetBarHeight ( );
__declspec(implementation_key(936)) void IHorizBarSeries::PutBarHeight ( long BarHeight );
__declspec(implementation_key(937)) enum ECandleStyle ICandleSeries::GetCandleStyle ( );
__declspec(implementation_key(938)) void ICandleSeries::PutCandleStyle ( enum ECandleStyle CandleStyle );
__declspec(implementation_key(939)) long ICandleSeries::GetCandleWidth ( );
__declspec(implementation_key(940)) void ICandleSeries::PutCandleWidth ( long CandleWidth );
__declspec(implementation_key(941)) IValueListPtr ICandleSeries::GetCloseValues ( );
__declspec(implementation_key(942)) IValueListPtr ICandleSeries::GetDateValues ( );
__declspec(implementation_key(943)) OLE_COLOR ICandleSeries::GetDownCloseColor ( );
__declspec(implementation_key(944)) void ICandleSeries::PutDownCloseColor ( OLE_COLOR Value );
__declspec(implementation_key(945)) IValueListPtr ICandleSeries::GetHighValues ( );
__declspec(implementation_key(946)) IValueListPtr ICandleSeries::GetLowValues ( );
__declspec(implementation_key(947)) IValueListPtr ICandleSeries::GetOpenValues ( );
__declspec(implementation_key(948)) VARIANT_BOOL ICandleSeries::GetShowCloseTick ( );
__declspec(implementation_key(949)) void ICandleSeries::PutShowCloseTick ( VARIANT_BOOL ShowCloseTick );
__declspec(implementation_key(950)) VARIANT_BOOL ICandleSeries::GetShowOpenTick ( );
__declspec(implementation_key(951)) void ICandleSeries::PutShowOpenTick ( VARIANT_BOOL ShowOpenTick );
__declspec(implementation_key(952)) OLE_COLOR ICandleSeries::GetUpCloseColor ( );
__declspec(implementation_key(953)) void ICandleSeries::PutUpCloseColor ( OLE_COLOR Value );
__declspec(implementation_key(954)) long ICandleSeries::AddCandle ( double DateValue, double OpenValue, double HighValue, double LowValue, double CloseValue );
__declspec(implementation_key(955)) long ICustom3DSeries::AddXYZ ( double AX, double AY, double AZ, _bstr_t AXLabel, OLE_COLOR Value );
__declspec(implementation_key(956)) double ICustom3DSeries::MaxZValue ( );
__declspec(implementation_key(957)) double ICustom3DSeries::MinZValue ( );
__declspec(implementation_key(958)) long ICustom3DSeries::GetTimesZOrder ( );
__declspec(implementation_key(959)) void ICustom3DSeries::PutTimesZOrder ( long TimesZOrder );
__declspec(implementation_key(960)) IValueListPtr ICustom3DSeries::GetZValues ( );
__declspec(implementation_key(961)) double ICustom3DSeries::GetZValue ( long Index );
__declspec(implementation_key(962)) void ICustom3DSeries::PutZValue ( long Index, double Value );
__declspec(implementation_key(963)) IBrushPtr ICustom3DSeries::GetBrush ( );
__declspec(implementation_key(964)) IPenPtr ICustom3DSeries::GetPen ( );
__declspec(implementation_key(965)) HRESULT ICustom3DSeries::AddArrayXYZ ( const _variant_t & XArray, const _variant_t & YArray, const _variant_t & ZArray );
__declspec(implementation_key(966)) IPenPtr IErrorBarSeries::GetErrorPen ( );
__declspec(implementation_key(967)) IValueListPtr IErrorBarSeries::GetErrorValues ( );
__declspec(implementation_key(968)) long IErrorBarSeries::GetErrorWidth ( );
__declspec(implementation_key(969)) void IErrorBarSeries::PutErrorWidth ( long ErrorWidth );
__declspec(implementation_key(970)) enum EErrorWidthUnits IErrorBarSeries::GetErrorWidthUnits ( );
__declspec(implementation_key(971)) void IErrorBarSeries::PutErrorWidthUnits ( enum EErrorWidthUnits ErrorWidthUnits );
__declspec(implementation_key(972)) long IErrorBarSeries::AddErrorBar ( double AX, double AY, double AError, _bstr_t AXLabel, OLE_COLOR Value );
__declspec(implementation_key(973)) IValueListPtr IVolumeSeries::GetVolumeValues ( );
__declspec(implementation_key(974)) IPenPtr IVolumeSeries::GetLinePen ( );
__declspec(implementation_key(975)) VARIANT_BOOL IVolumeSeries::GetUseYOrigin ( );
__declspec(implementation_key(976)) void IVolumeSeries::PutUseYOrigin ( VARIANT_BOOL Value );
__declspec(implementation_key(977)) double IVolumeSeries::GetYOrigin ( );
__declspec(implementation_key(978)) void IVolumeSeries::PutYOrigin ( double Value );
__declspec(implementation_key(979)) long ICustom3DPaletteSeries::AddPalette ( double Value, OLE_COLOR Color );
__declspec(implementation_key(980)) OLE_COLOR ICustom3DPaletteSeries::GetStartColor ( );
__declspec(implementation_key(981)) void ICustom3DPaletteSeries::PutStartColor ( OLE_COLOR Value );
__declspec(implementation_key(982)) OLE_COLOR ICustom3DPaletteSeries::GetEndColor ( );
__declspec(implementation_key(983)) void ICustom3DPaletteSeries::PutEndColor ( OLE_COLOR Value );
__declspec(implementation_key(984)) long ICustom3DPaletteSeries::GetPaletteSteps ( );
__declspec(implementation_key(985)) void ICustom3DPaletteSeries::PutPaletteSteps ( long Value );
__declspec(implementation_key(986)) VARIANT_BOOL ICustom3DPaletteSeries::GetUsePalette ( );
__declspec(implementation_key(987)) void ICustom3DPaletteSeries::PutUsePalette ( VARIANT_BOOL Value );
__declspec(implementation_key(988)) VARIANT_BOOL ICustom3DPaletteSeries::GetUseColorRange ( );
__declspec(implementation_key(989)) void ICustom3DPaletteSeries::PutUseColorRange ( VARIANT_BOOL Value );
__declspec(implementation_key(990)) HRESULT ICustom3DPaletteSeries::ClearPalette ( );
__declspec(implementation_key(991)) HRESULT ICustom3DPaletteSeries::CreateDefaultPalette ( long NumSteps );
__declspec(implementation_key(992)) OLE_COLOR ICustom3DPaletteSeries::GetSurfacePaletteColor ( double Y );
__declspec(implementation_key(993)) OLE_COLOR ICustom3DPaletteSeries::GetMidColor ( );
__declspec(implementation_key(994)) void ICustom3DPaletteSeries::PutMidColor ( OLE_COLOR Value );
__declspec(implementation_key(995)) HRESULT ICustom3DPaletteSeries::CreateRangePalette ( );
__declspec(implementation_key(996)) enum EPaletteStyle ICustom3DPaletteSeries::GetPaletteStyle ( );
__declspec(implementation_key(997)) void ICustom3DPaletteSeries::PutPaletteStyle ( enum EPaletteStyle Value );
__declspec(implementation_key(998)) long ICustom3DGridSeries::GetNumXValues ( );
__declspec(implementation_key(999)) void ICustom3DGridSeries::PutNumXValues ( long Value );
__declspec(implementation_key(1000)) long ICustom3DGridSeries::GetNumZValues ( );
__declspec(implementation_key(1001)) void ICustom3DGridSeries::PutNumZValues ( long Value );
__declspec(implementation_key(1002)) double ICustom3DGridSeries::GetXZValue ( long X, long Z );
__declspec(implementation_key(1003)) VARIANT_BOOL ICustom3DGridSeries::GetIrregularGrid ( );
__declspec(implementation_key(1004)) void ICustom3DGridSeries::PutIrregularGrid ( VARIANT_BOOL Value );
__declspec(implementation_key(1005)) long IBezierSeries::GetNumBezierPoints ( );
__declspec(implementation_key(1006)) void IBezierSeries::PutNumBezierPoints ( long Value );
__declspec(implementation_key(1007)) enum EBezierStyle IBezierSeries::GetBezierStyle ( );
__declspec(implementation_key(1008)) void IBezierSeries::PutBezierStyle ( enum EBezierStyle Value );
__declspec(implementation_key(1009)) enum EErrorSeriesStyle IErrorSeries::GetErrorStyle ( );
__declspec(implementation_key(1010)) void IErrorSeries::PutErrorStyle ( enum EErrorSeriesStyle Value );
__declspec(implementation_key(1011)) double IPoint3DSeries::GetDepthSize ( );
__declspec(implementation_key(1012)) void IPoint3DSeries::PutDepthSize ( double Value );
__declspec(implementation_key(1013)) IPointerPtr IPoint3DSeries::GetPointer ( );
__declspec(implementation_key(1014)) IPenPtr IPoint3DSeries::GetLinePen ( );
__declspec(implementation_key(1015)) VARIANT_BOOL ISurfaceSeries::GetDotFrame ( );
__declspec(implementation_key(1016)) void ISurfaceSeries::PutDotFrame ( VARIANT_BOOL DotFrame );
__declspec(implementation_key(1017)) VARIANT_BOOL ISurfaceSeries::GetWireFrame ( );
__declspec(implementation_key(1018)) void ISurfaceSeries::PutWireFrame ( VARIANT_BOOL Value );
__declspec(implementation_key(1019)) IBrushPtr ISurfaceSeries::GetSideBrush ( );
__declspec(implementation_key(1020)) VARIANT_BOOL ISurfaceSeries::GetSmoothPalette ( );
__declspec(implementation_key(1021)) void ISurfaceSeries::PutSmoothPalette ( VARIANT_BOOL Value );
__declspec(implementation_key(1022)) long IBar3DSeries::AddBar ( double AX, double AY, double AOffset, _bstr_t ALabel, OLE_COLOR AColor );
__declspec(implementation_key(1023)) IValueListPtr IBar3DSeries::GetOffsetValues ( );
__declspec(implementation_key(1024)) VARIANT_BOOL IImageBarSeries::LoadImage ( _bstr_t FileName );
__declspec(implementation_key(1025)) HRESULT IImageBarSeries::ClearImage ( );
__declspec(implementation_key(1026)) VARIANT_BOOL IImageBarSeries::GetImageTiled ( );
__declspec(implementation_key(1027)) void IImageBarSeries::PutImageTiled ( VARIANT_BOOL Value );
__declspec(implementation_key(1028)) IBrushPtr INearestTool::GetBrush ( );
__declspec(implementation_key(1029)) VARIANT_BOOL INearestTool::GetDrawLine ( );
__declspec(implementation_key(1030)) void INearestTool::PutDrawLine ( VARIANT_BOOL Value );
__declspec(implementation_key(1031)) VARIANT_BOOL INearestTool::GetFullRepaint ( );
__declspec(implementation_key(1032)) void INearestTool::PutFullRepaint ( VARIANT_BOOL Value );
__declspec(implementation_key(1033)) IPenPtr INearestTool::GetPen ( );
__declspec(implementation_key(1034)) long INearestTool::GetSize ( );
__declspec(implementation_key(1035)) void INearestTool::PutSize ( long Value );
__declspec(implementation_key(1036)) enum ENearestToolStyle INearestTool::GetStyle ( );
__declspec(implementation_key(1037)) void INearestTool::PutStyle ( enum ENearestToolStyle Value );
__declspec(implementation_key(1038)) IBrushPtr IColorBandTool::GetBrush ( );
__declspec(implementation_key(1039)) IPenPtr IColorBandTool::GetPen ( );
__declspec(implementation_key(1040)) double IColorBandTool::GetEndValue ( );
__declspec(implementation_key(1041)) void IColorBandTool::PutEndValue ( double Value );
__declspec(implementation_key(1042)) double IColorBandTool::GetStartValue ( );
__declspec(implementation_key(1043)) void IColorBandTool::PutStartValue ( double Value );
__declspec(implementation_key(1044)) VARIANT_BOOL IColorBandTool::GetDrawBehind ( );
__declspec(implementation_key(1045)) void IColorBandTool::PutDrawBehind ( VARIANT_BOOL Value );
__declspec(implementation_key(1046)) OLE_COLOR IColorBandTool::GetColor ( );
__declspec(implementation_key(1047)) void IColorBandTool::PutColor ( OLE_COLOR Value );
__declspec(implementation_key(1048)) IGradientPtr IColorBandTool::GetGradient ( );
__declspec(implementation_key(1049)) long IColorBandTool::GetTransparency ( );
__declspec(implementation_key(1050)) void IColorBandTool::PutTransparency ( long Value );
__declspec(implementation_key(1051)) IPenPtr IColorLineTool::GetPen ( );
__declspec(implementation_key(1052)) double IColorLineTool::GetValue ( );
__declspec(implementation_key(1053)) void IColorLineTool::PutValue ( double Value );
__declspec(implementation_key(1054)) VARIANT_BOOL IColorLineTool::GetAllowDrag ( );
__declspec(implementation_key(1055)) void IColorLineTool::PutAllowDrag ( VARIANT_BOOL Value );
__declspec(implementation_key(1056)) VARIANT_BOOL IColorLineTool::Clicked ( long X, long Y );
__declspec(implementation_key(1057)) VARIANT_BOOL IColorLineTool::GetDragRepaint ( );
__declspec(implementation_key(1058)) void IColorLineTool::PutDragRepaint ( VARIANT_BOOL Value );
__declspec(implementation_key(1059)) VARIANT_BOOL IColorLineTool::GetNoLimitDrag ( );
__declspec(implementation_key(1060)) void IColorLineTool::PutNoLimitDrag ( VARIANT_BOOL Value );
__declspec(implementation_key(1061)) long IHighLowSeries::AddHighLow ( double AX, double AHigh, double ALow, _bstr_t AXLabel, OLE_COLOR AColor );
__declspec(implementation_key(1062)) IBrushPtr IHighLowSeries::GetHighBrush ( );
__declspec(implementation_key(1063)) IPenPtr IHighLowSeries::GetHighPen ( );
__declspec(implementation_key(1064)) IValueListPtr IHighLowSeries::GetHighValues ( );
__declspec(implementation_key(1065)) IBrushPtr IHighLowSeries::GetLowBrush ( );
__declspec(implementation_key(1066)) IPenPtr IHighLowSeries::GetLowPen ( );
__declspec(implementation_key(1067)) IValueListPtr IHighLowSeries::GetLowValues ( );
__declspec(implementation_key(1068)) IPenPtr IHighLowSeries::GetPen ( );
__declspec(implementation_key(1069)) VARIANT_BOOL ITitles::GetAdjustFrame ( );
__declspec(implementation_key(1070)) void ITitles::PutAdjustFrame ( VARIANT_BOOL AdjustFrame );
__declspec(implementation_key(1071)) enum ETitleAlignment ITitles::GetAlignment ( );
__declspec(implementation_key(1072)) void ITitles::PutAlignment ( enum ETitleAlignment Alignment );
__declspec(implementation_key(1073)) IBrushPtr ITitles::GetBrush ( );
__declspec(implementation_key(1074)) IPenPtr ITitles::GetFrame ( );
__declspec(implementation_key(1075)) IStringsPtr ITitles::GetText ( );
__declspec(implementation_key(1076)) VARIANT_BOOL ITitles::GetVisible ( );
__declspec(implementation_key(1077)) void ITitles::PutVisible ( VARIANT_BOOL Visible );
__declspec(implementation_key(1078)) IPenPtr ITriSurfaceSeries::GetBorder ( );
__declspec(implementation_key(1079)) VARIANT_BOOL ITriSurfaceSeries::GetHideTriangles ( );
__declspec(implementation_key(1080)) void ITriSurfaceSeries::PutHideTriangles ( VARIANT_BOOL Value );
__declspec(implementation_key(1081)) VARIANT_BOOL ITriSurfaceSeries::GetCacheTriangles ( );
__declspec(implementation_key(1082)) void ITriSurfaceSeries::PutCacheTriangles ( VARIANT_BOOL Value );
__declspec(implementation_key(1083)) IPointerPtr ICustomBoxSeries::GetExtrOut ( );
__declspec(implementation_key(1084)) IPenPtr ICustomBoxSeries::GetMedianPen ( );
__declspec(implementation_key(1085)) IPointerPtr ICustomBoxSeries::GetMildOut ( );
__declspec(implementation_key(1086)) double ICustomBoxSeries::GetPosition ( );
__declspec(implementation_key(1087)) void ICustomBoxSeries::PutPosition ( double Value );
__declspec(implementation_key(1088)) double ICustomBoxSeries::GetWhiskerLength ( );
__declspec(implementation_key(1089)) void ICustomBoxSeries::PutWhiskerLength ( double Value );
__declspec(implementation_key(1090)) IPenPtr ICustomBoxSeries::GetWhiskerPen ( );
__declspec(implementation_key(1091)) IPointerPtr ICustomBoxSeries::GetBox ( );
__declspec(implementation_key(1092)) double IHorizBoxPlotSeries::MaxYValue ( );
__declspec(implementation_key(1093)) double IHorizBoxPlotSeries::MinYValue ( );
__declspec(implementation_key(1094)) IPenPtr IHistogramSeries::GetLinesPen ( );
__declspec(implementation_key(1095)) long IHistogramSeries::GetTransparency ( );
__declspec(implementation_key(1096)) void IHistogramSeries::PutTransparency ( long Value );
__declspec(implementation_key(1097)) IPenPtr IHistogramSeries::GetLinePen ( );
__declspec(implementation_key(1098)) IBrushPtr IHistogramSeries::GetBrush ( );
__declspec(implementation_key(1099)) double IColorGridSeries::MaxXValue ( );
__declspec(implementation_key(1100)) double IColorGridSeries::MaxYValue ( );
__declspec(implementation_key(1101)) double IColorGridSeries::MinYValue ( );
__declspec(implementation_key(1102)) IPenPtr IBarJoinSeries::GetJoinPen ( );
__declspec(implementation_key(1103)) VARIANT_BOOL IWaterfallSeries::GetWaterfall ( );
__declspec(implementation_key(1104)) void IWaterfallSeries::PutWaterfall ( VARIANT_BOOL Value );
__declspec(implementation_key(1105)) IPenPtr IWaterfallSeries::GetWaterLines ( );
__declspec(implementation_key(1106)) long IContourSeries::GetNumLevels ( );
__declspec(implementation_key(1107)) void IContourSeries::PutNumLevels ( long Value );
__declspec(implementation_key(1108)) VARIANT_BOOL IContourSeries::GetYPositionLevel ( );
__declspec(implementation_key(1109)) void IContourSeries::PutYPositionLevel ( VARIANT_BOOL Value );
__declspec(implementation_key(1110)) double IContourSeries::GetYPosition ( );
__declspec(implementation_key(1111)) void IContourSeries::PutYPosition ( double Value );
__declspec(implementation_key(1112)) IContourLevelsPtr IContourSeries::GetLevels ( );
__declspec(implementation_key(1113)) VARIANT_BOOL IContourSeries::GetAutomaticLevels ( );
__declspec(implementation_key(1114)) void IContourSeries::PutAutomaticLevels ( VARIANT_BOOL Value );
__declspec(implementation_key(1115)) HRESULT IContourSeries::CreateAutoLevels ( );
__declspec(implementation_key(1116)) double IBoxPlotSeries::MaxXValue ( );
__declspec(implementation_key(1117)) double IBoxPlotSeries::MinXValue ( );
__declspec(implementation_key(1118)) VARIANT_BOOL ICursorTool::GetFollowMouse ( );
__declspec(implementation_key(1119)) void ICursorTool::PutFollowMouse ( VARIANT_BOOL Value );
__declspec(implementation_key(1120)) IPenPtr ICursorTool::GetPen ( );
__declspec(implementation_key(1121)) VARIANT_BOOL ICursorTool::GetSnap ( );
__declspec(implementation_key(1122)) void ICursorTool::PutSnap ( VARIANT_BOOL Value );
__declspec(implementation_key(1123)) enum ECursorToolStyle ICursorTool::GetStyle ( );
__declspec(implementation_key(1124)) void ICursorTool::PutStyle ( enum ECursorToolStyle Value );
__declspec(implementation_key(1125)) double ICursorTool::GetXVal ( );
__declspec(implementation_key(1126)) void ICursorTool::PutXVal ( double Value );
__declspec(implementation_key(1127)) double ICursorTool::GetYVal ( );
__declspec(implementation_key(1128)) void ICursorTool::PutYVal ( double Value );
__declspec(implementation_key(1129)) ITeePoint2DPtr IDrawLine::GetEndPos ( );
__declspec(implementation_key(1130)) ITeePoint2DPtr IDrawLine::GetStartPos ( );
__declspec(implementation_key(1131)) IPenPtr IDrawLine::GetPen ( );
__declspec(implementation_key(1132)) HRESULT IDrawLine::DrawHandles ( );
__declspec(implementation_key(1133)) struct TeeRect IDrawLine::EndHandle ( );
__declspec(implementation_key(1134)) struct TeeRect IDrawLine::StartHandle ( );
__declspec(implementation_key(1135)) IDrawLinePtr IDrawLineList::GetItems ( long Index );
__declspec(implementation_key(1136)) _variant_t IDrawLineList::GetControlDefault ( long Index );
__declspec(implementation_key(1137)) HRESULT IDrawLineList::Clear ( );
__declspec(implementation_key(1138)) HRESULT IDrawLineList::Delete ( long Index );
__declspec(implementation_key(1139)) long IDrawLineList::GetCount ( );
__declspec(implementation_key(1140)) ITeePoint2DPtr IDrawLineTool::GetFromPoint ( );
__declspec(implementation_key(1141)) ITeePoint2DPtr IDrawLineTool::GetToPoint ( );
__declspec(implementation_key(1142)) ITeePoint2DPtr IDrawLineTool::AxisPoint ( double X, double Y );
__declspec(implementation_key(1143)) long IDrawLineTool::Clicked ( long X, long Y );
__declspec(implementation_key(1144)) HRESULT IDrawLineTool::DeleteSelected ( );
__declspec(implementation_key(1145)) ITeePoint2DPtr IDrawLineTool::ScreenPoint ( long X, long Y );
__declspec(implementation_key(1146)) IDrawLineListPtr IDrawLineTool::GetLines ( );
__declspec(implementation_key(1147)) long IDrawLineTool::GetSelected ( );
__declspec(implementation_key(1148)) void IDrawLineTool::PutSelected ( long Index );
__declspec(implementation_key(1149)) enum EMouseButton IDrawLineTool::GetButton ( );
__declspec(implementation_key(1150)) void IDrawLineTool::PutButton ( enum EMouseButton Value );
__declspec(implementation_key(1151)) VARIANT_BOOL IDrawLineTool::GetEnableDraw ( );
__declspec(implementation_key(1152)) void IDrawLineTool::PutEnableDraw ( VARIANT_BOOL Value );
__declspec(implementation_key(1153)) VARIANT_BOOL IDrawLineTool::GetEnableSelect ( );
__declspec(implementation_key(1154)) void IDrawLineTool::PutEnableSelect ( VARIANT_BOOL Value );
__declspec(implementation_key(1155)) IPenPtr IDrawLineTool::GetPen ( );
__declspec(implementation_key(1156)) long IDrawLineTool::AddLine ( double FromX, double FromY, double ToX, double ToY );
__declspec(implementation_key(1157)) enum EAxisArrowToolPosition IAxisArrowTool::GetPosition ( );
__declspec(implementation_key(1158)) void IAxisArrowTool::PutPosition ( enum EAxisArrowToolPosition Value );
__declspec(implementation_key(1159)) IBrushPtr IAxisArrowTool::GetBrush ( );
__declspec(implementation_key(1160)) long IAxisArrowTool::GetLength ( );
__declspec(implementation_key(1161)) void IAxisArrowTool::PutLength ( long Value );
__declspec(implementation_key(1162)) IPenPtr IAxisArrowTool::GetPen ( );
__declspec(implementation_key(1163)) long IAxisArrowTool::GetScrollPercent ( );
__declspec(implementation_key(1164)) void IAxisArrowTool::PutScrollPercent ( long Value );
__declspec(implementation_key(1165)) VARIANT_BOOL IAxisArrowTool::GetScrollInverted ( );
__declspec(implementation_key(1166)) void IAxisArrowTool::PutScrollInverted ( VARIANT_BOOL Value );
__declspec(implementation_key(1167)) IBrushPtr IMapPolygon::GetBrush ( );
__declspec(implementation_key(1168)) OLE_COLOR IMapPolygon::GetColor ( );
__declspec(implementation_key(1169)) void IMapPolygon::PutColor ( OLE_COLOR Value );
__declspec(implementation_key(1170)) IGradientPtr IMapPolygon::GetGradient ( );
__declspec(implementation_key(1171)) VARIANT_BOOL IMapPolygon::GetParentBrush ( );
__declspec(implementation_key(1172)) void IMapPolygon::PutParentBrush ( VARIANT_BOOL Value );
__declspec(implementation_key(1173)) VARIANT_BOOL IMapPolygon::GetParentPen ( );
__declspec(implementation_key(1174)) void IMapPolygon::PutParentPen ( VARIANT_BOOL Value );
__declspec(implementation_key(1175)) IPenPtr IMapPolygon::GetPen ( );
__declspec(implementation_key(1176)) _bstr_t IMapPolygon::GetText ( );
__declspec(implementation_key(1177)) void IMapPolygon::PutText ( _bstr_t Value );
__declspec(implementation_key(1178)) double IMapPolygon::GetZ ( );
__declspec(implementation_key(1179)) void IMapPolygon::PutZ ( double Value );
__declspec(implementation_key(1180)) long IMapPolygon::AddXY ( double X, double Y );
__declspec(implementation_key(1181)) long IMapPolygonList::Add ( );
__declspec(implementation_key(1182)) IMapPolygonPtr IMapPolygonList::GetPolygon ( long Index );
__declspec(implementation_key(1183)) IMapPolygonListPtr IMapSeries::GetShapes ( );
__declspec(implementation_key(1184)) long IFunnelSeries::AddSegment ( double AQuote, double AOpportunity, _bstr_t ALabel, OLE_COLOR AColor );
__declspec(implementation_key(1185)) HRESULT IFunnelSeries::Recalc ( );
__declspec(implementation_key(1186)) IBrushPtr IFunnelSeries::GetBrush ( );
__declspec(implementation_key(1187)) IPenPtr IFunnelSeries::GetPen ( );
__declspec(implementation_key(1188)) IPenPtr IFunnelSeries::GetLinesPen ( );
__declspec(implementation_key(1189)) VARIANT_BOOL IFunnelSeries::GetAutoUpdate ( );
__declspec(implementation_key(1190)) void IFunnelSeries::PutAutoUpdate ( VARIANT_BOOL Value );
__declspec(implementation_key(1191)) VARIANT_BOOL IFunnelSeries::GetQuotesSorted ( );
__declspec(implementation_key(1192)) void IFunnelSeries::PutQuotesSorted ( VARIANT_BOOL Value );
__declspec(implementation_key(1193)) double IFunnelSeries::GetDifferenceLimit ( );
__declspec(implementation_key(1194)) void IFunnelSeries::PutDifferenceLimit ( double Value );
__declspec(implementation_key(1195)) OLE_COLOR IFunnelSeries::GetAboveColor ( );
__declspec(implementation_key(1196)) void IFunnelSeries::PutAboveColor ( OLE_COLOR Value );
__declspec(implementation_key(1197)) OLE_COLOR IFunnelSeries::GetWithinColor ( );
__declspec(implementation_key(1198)) void IFunnelSeries::PutWithinColor ( OLE_COLOR Value );
__declspec(implementation_key(1199)) OLE_COLOR IFunnelSeries::GetBelowColor ( );
__declspec(implementation_key(1200)) void IFunnelSeries::PutBelowColor ( OLE_COLOR Value );
__declspec(implementation_key(1201)) IValueListPtr IFunnelSeries::GetOpportunityValues ( );
__declspec(implementation_key(1202)) IValueListPtr IFunnelSeries::GetQuoteValues ( );
__declspec(implementation_key(1203)) enum ELegendAlignment ILegend::GetAlignment ( );
__declspec(implementation_key(1204)) void ILegend::PutAlignment ( enum ELegendAlignment Alignment );
__declspec(implementation_key(1205)) long ILegend::GetColorWidth ( );
__declspec(implementation_key(1206)) void ILegend::PutColorWidth ( long ColorWidth );
__declspec(implementation_key(1207)) IPenPtr ILegend::GetDividingLines ( );
__declspec(implementation_key(1208)) long ILegend::GetFirstValue ( );
__declspec(implementation_key(1209)) void ILegend::PutFirstValue ( long FirstValue );
__declspec(implementation_key(1210)) IPenPtr ILegend::GetFrame ( );
__declspec(implementation_key(1211)) long ILegend::GetHorizMargin ( );
__declspec(implementation_key(1212)) void ILegend::PutHorizMargin ( long HorizMargin );
__declspec(implementation_key(1213)) VARIANT_BOOL ILegend::GetInverted ( );
__declspec(implementation_key(1214)) void ILegend::PutInverted ( VARIANT_BOOL Inverted );
__declspec(implementation_key(1215)) enum ELegendStyle ILegend::GetLegendStyle ( );
__declspec(implementation_key(1216)) void ILegend::PutLegendStyle ( enum ELegendStyle LegendStyle );
__declspec(implementation_key(1217)) VARIANT_BOOL ILegend::GetResizeChart ( );
__declspec(implementation_key(1218)) void ILegend::PutResizeChart ( VARIANT_BOOL ResizeChart );
__declspec(implementation_key(1219)) enum ELegendTextStyle ILegend::GetTextStyle ( );
__declspec(implementation_key(1220)) void ILegend::PutTextStyle ( enum ELegendTextStyle TextStyle );
__declspec(implementation_key(1221)) long ILegend::GetTopPos ( );
__declspec(implementation_key(1222)) void ILegend::PutTopPos ( long TopPos );
__declspec(implementation_key(1223)) long ILegend::GetVertMargin ( );
__declspec(implementation_key(1224)) void ILegend::PutVertMargin ( long VertMargin );
__declspec(implementation_key(1225)) VARIANT_BOOL ILegend::GetVisible ( );
__declspec(implementation_key(1226)) void ILegend::PutVisible ( VARIANT_BOOL Visible );
__declspec(implementation_key(1227)) _bstr_t ILegend::Formatted ( long SomeSeriesOrValueIndex );
__declspec(implementation_key(1228)) _bstr_t ILegend::FormattedValue ( long aSeries, long SomeValueIndex );
__declspec(implementation_key(1229)) long ILegend::Clicked ( long X, long Y );
__declspec(implementation_key(1230)) long ILegend::GetMaxNumRows ( );
__declspec(implementation_key(1231)) void ILegend::PutMaxNumRows ( long Value );
__declspec(implementation_key(1232)) HRESULT ILegend::BackImageLoad ( _bstr_t FileName );
__declspec(implementation_key(1233)) HRESULT ILegend::BackImageClear ( );
__declspec(implementation_key(1234)) IBrushPtr ILegend::GetBrush ( );
__declspec(implementation_key(1235)) _variant_t ILegend::GetSeries ( );
__declspec(implementation_key(1236)) void ILegend::PutSeries ( const _variant_t & Value );
__declspec(implementation_key(1237)) HRESULT ILegend::DrawLegend ( );
__declspec(implementation_key(1238)) VARIANT_BOOL ILegend::GetFontSeriesColor ( );
__declspec(implementation_key(1239)) void ILegend::PutFontSeriesColor ( VARIANT_BOOL Value );
__declspec(implementation_key(1240)) VARIANT_BOOL ILegend::GetCurrentPage ( );
__declspec(implementation_key(1241)) void ILegend::PutCurrentPage ( VARIANT_BOOL Value );
__declspec(implementation_key(1242)) ILegendSymbolPtr ILegend::GetSymbol ( );
__declspec(implementation_key(1243)) VARIANT_BOOL ILegend::GetCheckBoxes ( );
__declspec(implementation_key(1244)) void ILegend::PutCheckBoxes ( VARIANT_BOOL Value );
__declspec(implementation_key(1245)) VARIANT_BOOL ILegend::GetColumnWidthAuto ( );
__declspec(implementation_key(1246)) void ILegend::PutColumnWidthAuto ( VARIANT_BOOL Value );
__declspec(implementation_key(1247)) long ILegend::GetColumnWidths ( long Index );
__declspec(implementation_key(1248)) void ILegend::PutColumnWidths ( long Index, long Value );
__declspec(implementation_key(1249)) long ILegend::GetVertspacing ( );
__declspec(implementation_key(1250)) void ILegend::PutVertspacing ( long Value );
__declspec(implementation_key(1251)) VARIANT_BOOL ILegend::GetVertical ( );
__declspec(implementation_key(1252)) IPenPtr ITeeShapePanel::GetFrame ( );
__declspec(implementation_key(1253)) enum EAnnotationPosition IAnnotationTool::GetPosition ( );
__declspec(implementation_key(1254)) void IAnnotationTool::PutPosition ( enum EAnnotationPosition Value );
__declspec(implementation_key(1255)) ITeeShapePanelPtr IAnnotationTool::GetShape ( );
__declspec(implementation_key(1256)) _bstr_t IAnnotationTool::GetText ( );
__declspec(implementation_key(1257)) void IAnnotationTool::PutText ( _bstr_t Value );
__declspec(implementation_key(1258)) _bstr_t IPageNumTool::GetFormat ( );
__declspec(implementation_key(1259)) void IPageNumTool::PutFormat ( _bstr_t Value );
__declspec(implementation_key(1260)) ICursorToolPtr ITools::GetasTeeCursor ( );
__declspec(implementation_key(1261)) IDragMarksToolPtr ITools::GetasDragMarks ( );
__declspec(implementation_key(1262)) IAxisArrowToolPtr ITools::GetasAxisArrow ( );
__declspec(implementation_key(1263)) IDrawLineToolPtr ITools::GetasDrawLine ( );
__declspec(implementation_key(1264)) INearestToolPtr ITools::GetasNearest ( );
__declspec(implementation_key(1265)) IColorBandToolPtr ITools::GetasColorband ( );
__declspec(implementation_key(1266)) IColorLineToolPtr ITools::GetasColorLine ( );
__declspec(implementation_key(1267)) IRotateToolPtr ITools::GetasRotate ( );
__declspec(implementation_key(1268)) IMarksTipToolPtr ITools::GetasMarksTip ( );
__declspec(implementation_key(1269)) IChartImageToolPtr ITools::GetasChartImage ( );
__declspec(implementation_key(1270)) IAnnotationToolPtr ITools::GetasAnnotation ( );
__declspec(implementation_key(1271)) IPageNumToolPtr ITools::GetasPageNum ( );
__declspec(implementation_key(1272)) VARIANT_BOOL ITools::GetActive ( );
__declspec(implementation_key(1273)) void ITools::PutActive ( VARIANT_BOOL Value );
__declspec(implementation_key(1274)) _bstr_t ITools::GetDescription ( );
__declspec(implementation_key(1275)) enum EToolClass ITools::GetToolType ( );
__declspec(implementation_key(1276)) long IToolList::Add ( enum EToolClass ToolClass );
__declspec(implementation_key(1277)) IToolsPtr IToolList::GetItems ( long Index );
__declspec(implementation_key(1278)) _variant_t IToolList::GetControlDefault ( long Index );
__declspec(implementation_key(1279)) HRESULT IToolList::Clear ( );
__declspec(implementation_key(1280)) HRESULT IToolList::Delete ( long Index );
__declspec(implementation_key(1281)) long IToolList::GetCount ( );
__declspec(implementation_key(1282)) long ICircledSeries::GetXRadius ( );
__declspec(implementation_key(1283)) void ICircledSeries::PutXRadius ( long XRadius );
__declspec(implementation_key(1284)) long ICircledSeries::GetYRadius ( );
__declspec(implementation_key(1285)) void ICircledSeries::PutYRadius ( long YRadius );
__declspec(implementation_key(1286)) long ICircledSeries::GetXCenter ( );
__declspec(implementation_key(1287)) long ICircledSeries::GetYCenter ( );
__declspec(implementation_key(1288)) long ICircledSeries::GetCircleWidth ( );
__declspec(implementation_key(1289)) long ICircledSeries::GetCircleHeight ( );
__declspec(implementation_key(1290)) OLE_COLOR ICircledSeries::GetCircleBackColor ( );
__declspec(implementation_key(1291)) void ICircledSeries::PutCircleBackColor ( OLE_COLOR CircleBackColor );
__declspec(implementation_key(1292)) VARIANT_BOOL ICircledSeries::GetCircled ( );
__declspec(implementation_key(1293)) void ICircledSeries::PutCircled ( VARIANT_BOOL Circled );
__declspec(implementation_key(1294)) long ICircledSeries::GetRotationAngle ( );
__declspec(implementation_key(1295)) void ICircledSeries::PutRotationAngle ( long RotationAngle );
__declspec(implementation_key(1296)) struct TeePoint2D ICircledSeries::AngleToPoint ( double Angle, double AXRadius, double AYRadius );
__declspec(implementation_key(1297)) double ICircledSeries::PointToAngle ( long XCoord, long YCoord );
__declspec(implementation_key(1298)) VARIANT_BOOL IPieSeries::GetUsePatterns ( );
__declspec(implementation_key(1299)) void IPieSeries::PutUsePatterns ( VARIANT_BOOL UsePatterns );
__declspec(implementation_key(1300)) IValueListPtr IPieSeries::GetPieValues ( );
__declspec(implementation_key(1301)) VARIANT_BOOL IPieSeries::GetDark3D ( );
__declspec(implementation_key(1302)) void IPieSeries::PutDark3D ( VARIANT_BOOL Dark3D );
__declspec(implementation_key(1303)) long IPieSeries::GetExplodeBiggest ( );
__declspec(implementation_key(1304)) void IPieSeries::PutExplodeBiggest ( long Value );
__declspec(implementation_key(1305)) IPieOtherSlicePtr IPieSeries::GetOtherSlice ( );
__declspec(implementation_key(1306)) IExplodedSlicesPtr IPieSeries::GetExplodedSlice ( );
__declspec(implementation_key(1307)) IPenPtr IPieSeries::GetPiePen ( );
__declspec(implementation_key(1308)) ITeeShadowPtr IPieSeries::GetShadow ( );
__declspec(implementation_key(1309)) long IPieSeries::GetAngleSize ( );
__declspec(implementation_key(1310)) void IPieSeries::PutAngleSize ( long Value );
__declspec(implementation_key(1311)) double ICustomPolarSeries::GetAngleIncrement ( );
__declspec(implementation_key(1312)) void ICustomPolarSeries::PutAngleIncrement ( double AngleIncrement );
__declspec(implementation_key(1313)) VARIANT_BOOL ICustomPolarSeries::GetCloseCircle ( );
__declspec(implementation_key(1314)) void ICustomPolarSeries::PutCloseCircle ( VARIANT_BOOL CloseCircle );
__declspec(implementation_key(1315)) IPenPtr ICustomPolarSeries::GetPen ( );
__declspec(implementation_key(1316)) IPointerPtr ICustomPolarSeries::GetPointer ( );
__declspec(implementation_key(1317)) double ICustomPolarSeries::GetRadiusIncrement ( );
__declspec(implementation_key(1318)) void ICustomPolarSeries::PutRadiusIncrement ( double RadiusIncrement );
__declspec(implementation_key(1319)) IValueListPtr ICustomPolarSeries::GetAngleValues ( );
__declspec(implementation_key(1320)) IValueListPtr ICustomPolarSeries::GetRadiusValues ( );
__declspec(implementation_key(1321)) HRESULT ICustomPolarSeries::DrawRing ( double Value, long Z );
__declspec(implementation_key(1322)) IPenPtr ICustomPolarSeries::GetCirclePen ( );
__declspec(implementation_key(1323)) ICircleLabelsPtr ICustomPolarSeries::GetCircleLabels ( );
__declspec(implementation_key(1324)) IBrushPtr ICustomPolarSeries::GetBrush ( );
__declspec(implementation_key(1325)) HRESULT ICustomPolarSeries::LoadBackImage ( _bstr_t FileName );
__declspec(implementation_key(1326)) HRESULT ICustomPolarSeries::ClearBackImage ( );
__declspec(implementation_key(1327)) VARIANT_BOOL ICustomPolarSeries::GetClockWiseLabels ( );
__declspec(implementation_key(1328)) void ICustomPolarSeries::PutClockWiseLabels ( VARIANT_BOOL Value );
__declspec(implementation_key(1329)) VARIANT_BOOL ICustomPolarSeries::GetCircleLabelsInside ( );
__declspec(implementation_key(1330)) void ICustomPolarSeries::PutCircleLabelsInside ( VARIANT_BOOL Value );
__declspec(implementation_key(1331)) long ICustomPolarSeries::GetTransparency ( );
__declspec(implementation_key(1332)) void ICustomPolarSeries::PutTransparency ( long Value );
__declspec(implementation_key(1333)) long IPolarSeries::AddPolar ( double Angle, double Value, _bstr_t ALabel, OLE_COLOR Valu );
__declspec(implementation_key(1334)) VARIANT_BOOL IClockSeries::GetRomanNumbers ( );
__declspec(implementation_key(1335)) void IClockSeries::PutRomanNumbers ( VARIANT_BOOL Value );
__declspec(implementation_key(1336)) IPenPtr IClockSeries::GetPenHours ( );
__declspec(implementation_key(1337)) IPenPtr IClockSeries::GetPenMinutes ( );
__declspec(implementation_key(1338)) IPenPtr IClockSeries::GetPenSeconds ( );
__declspec(implementation_key(1339)) long IDonutSeries::GetDonutPercent ( );
__declspec(implementation_key(1340)) void IDonutSeries::PutDonutPercent ( long Value );
__declspec(implementation_key(1341)) IPenPtr ISmithSeries::GetCCirclePen ( );
__declspec(implementation_key(1342)) IPenPtr ISmithSeries::GetCirclePen ( );
__declspec(implementation_key(1343)) VARIANT_BOOL ISmithSeries::GetCLabels ( );
__declspec(implementation_key(1344)) void ISmithSeries::PutCLabels ( VARIANT_BOOL Value );
__declspec(implementation_key(1345)) ITeeFontPtr ISmithSeries::GetCLabelsFont ( );
__declspec(implementation_key(1346)) IValueListPtr ISmithSeries::GetResistenceValues ( );
__declspec(implementation_key(1347)) IValueListPtr ISmithSeries::GetReactanceValues ( );
__declspec(implementation_key(1348)) IPointerPtr ISmithSeries::GetPointer ( );
__declspec(implementation_key(1349)) IPenPtr ISmithSeries::GetRCirclePen ( );
__declspec(implementation_key(1350)) VARIANT_BOOL ISmithSeries::GetRLabels ( );
__declspec(implementation_key(1351)) void ISmithSeries::PutRLabels ( VARIANT_BOOL Value );
__declspec(implementation_key(1352)) ITeeFontPtr ISmithSeries::GetRLabelsFont ( );
__declspec(implementation_key(1353)) IAspectPtr ITChart::GetAspect ( );
__declspec(implementation_key(1354)) IAxesPtr ITChart::GetAxis ( );
__declspec(implementation_key(1355)) ICanvasPtr ITChart::GetCanvas ( );
__declspec(implementation_key(1356)) VARIANT_BOOL ITChart::GetClipPoints ( );
__declspec(implementation_key(1357)) void ITChart::PutClipPoints ( VARIANT_BOOL ClipPoints );
__declspec(implementation_key(1358)) short ITChart::GetCursor ( );
__declspec(implementation_key(1359)) void ITChart::PutCursor ( short Cursor );
__declspec(implementation_key(1360)) short ITChart::GetDragCursor ( );
__declspec(implementation_key(1361)) void ITChart::PutDragCursor ( short DragCursor );
__declspec(implementation_key(1362)) enum EDragMode ITChart::GetDragMode ( );
__declspec(implementation_key(1363)) void ITChart::PutDragMode ( enum EDragMode DragMode );
__declspec(implementation_key(1364)) VARIANT_BOOL ITChart::GetEnabled ( );
__declspec(implementation_key(1365)) void ITChart::PutEnabled ( VARIANT_BOOL Enabled );
__declspec(implementation_key(1366)) IExportPtr ITChart::GetExport ( );
__declspec(implementation_key(1367)) ITitlesPtr ITChart::GetFooter ( );
__declspec(implementation_key(1368)) IPenPtr ITChart::GetFrame ( );
__declspec(implementation_key(1369)) ITitlesPtr ITChart::GetHeader ( );
__declspec(implementation_key(1370)) long ITChart::GetHeight ( );
__declspec(implementation_key(1371)) void ITChart::PutHeight ( long Height );
__declspec(implementation_key(1372)) IImportPtr ITChart::GetImport ( );
__declspec(implementation_key(1373)) long ITChart::GetLeft ( );
__declspec(implementation_key(1374)) void ITChart::PutLeft ( long Left );
__declspec(implementation_key(1375)) ILegendPtr ITChart::GetLegend ( );
__declspec(implementation_key(1376)) IPagePtr ITChart::GetPage ( );
__declspec(implementation_key(1377)) IPanelPtr ITChart::GetPanel ( );
__declspec(implementation_key(1378)) IPrinterPtr ITChart::GetPrinter ( );
__declspec(implementation_key(1379)) IScrollPtr ITChart::GetScroll ( );
__declspec(implementation_key(1380)) ISeriesPtr ITChart::GetaSeries ( long SeriesIndex );
__declspec(implementation_key(1381)) long ITChart::GetSeriesCount ( );
__declspec(implementation_key(1382)) long ITChart::GetTop ( );
__declspec(implementation_key(1383)) void ITChart::PutTop ( long Top );
__declspec(implementation_key(1384)) VARIANT_BOOL ITChart::GetVisible ( );
__declspec(implementation_key(1385)) void ITChart::PutVisible ( VARIANT_BOOL Visible );
__declspec(implementation_key(1386)) IWallsPtr ITChart::GetWalls ( );
__declspec(implementation_key(1387)) long ITChart::GetWidth ( );
__declspec(implementation_key(1388)) void ITChart::PutWidth ( long Width );
__declspec(implementation_key(1389)) IZoomPtr ITChart::GetZoom ( );
__declspec(implementation_key(1390)) HRESULT ITChart::AboutBox ( );
__declspec(implementation_key(1391)) long ITChart::AddSeries ( enum ESeriesClass SeriesClass );
__declspec(implementation_key(1392)) HRESULT ITChart::ChangeSeriesType ( long SeriesIndex, enum ESeriesClass NewSeriesType );
__declspec(implementation_key(1393)) long ITChart::CloneSeries ( long SourceSeriesIndex );
__declspec(implementation_key(1394)) HRESULT ITChart::Draw ( long DC, long Left, long Top, long Right, long Bottom );
__declspec(implementation_key(1395)) HRESULT ITChart::ExchangeSeries ( long Series1, long Series2 );
__declspec(implementation_key(1396)) double ITChart::GetDateTimeStep ( enum EDateTimeStep DateTimeStep );
__declspec(implementation_key(1397)) OLE_COLOR ITChart::GetFreeSeriesColor ( VARIANT_BOOL CheckBackgroundColor );
__declspec(implementation_key(1398)) ISeriesPtr ITChart::GetLabelsSeries ( enum EAxisType DestAxis );
__declspec(implementation_key(1399)) VARIANT_BOOL ITChart::IsFreeSeriesColor ( OLE_COLOR AColor, VARIANT_BOOL CheckBackgroundColor );
__declspec(implementation_key(1400)) HRESULT ITChart::RemoveAllSeries ( );
__declspec(implementation_key(1401)) HRESULT ITChart::RemoveSeries ( long SeriesIndex );
__declspec(implementation_key(1402)) HRESULT ITChart::Repaint ( );
__declspec(implementation_key(1403)) _bstr_t ITChart::SeriesTitleLegend ( long ASeriesIndex );
__declspec(implementation_key(1404)) HRESULT ITChart::ShowEditor ( long SeriesIndex );
__declspec(implementation_key(1405)) HRESULT ITChart::StopMouse ( );
__declspec(implementation_key(1406)) VARIANT_BOOL ITChart::GetTimerEnabled ( );
__declspec(implementation_key(1407)) void ITChart::PutTimerEnabled ( VARIANT_BOOL TimerEnabled );
__declspec(implementation_key(1408)) long ITChart::GetTimerInterval ( );
__declspec(implementation_key(1409)) void ITChart::PutTimerInterval ( long TimerInterval );
__declspec(implementation_key(1410)) VARIANT_BOOL ITChart::GetAutoRepaint ( );
__declspec(implementation_key(1411)) void ITChart::PutAutoRepaint ( VARIANT_BOOL Value );
__declspec(implementation_key(1412)) HRESULT ITChart::EditOneSeries ( long SeriesIndex );
__declspec(implementation_key(1413)) IEnvironmentPtr ITChart::GetEnvironment ( );
__declspec(implementation_key(1414)) long ITChart::GetChartLink ( );
__declspec(implementation_key(1415)) ITeePoint2DPtr ITChart::GetMousePosition ( );
__declspec(implementation_key(1416)) HRESULT ITChart::ChartRect ( long Left, long Top, long Right, long Bottom );
__declspec(implementation_key(1417)) IToolListPtr ITChart::GetTools ( );
__declspec(implementation_key(1418)) ITitlesPtr ITChart::GetSubHeader ( );
__declspec(implementation_key(1419)) ITitlesPtr ITChart::GetSubFooter ( );
__declspec(implementation_key(1420)) HRESULT ITChart::ClearChart ( );
__declspec(implementation_key(1421)) HRESULT ITChart::RefreshData ( );
__declspec(implementation_key(1422)) ISeriesPtr ITChart::Series ( long SeriesIndex );
__declspec(implementation_key(1423)) void ITeeLinked::PutChart ( struct ITChart * _arg1 );
__declspec(implementation_key(1424)) void ITeeLinked::PutChartLink ( long _arg1 );
__declspec(implementation_key(1425)) HRESULT ITeeLinked::AboutBox ( );
__declspec(implementation_key(1426)) OLE_COLOR ITeeListBox::GetColor ( );
__declspec(implementation_key(1427)) void ITeeListBox::PutColor ( OLE_COLOR Value );
__declspec(implementation_key(1428)) HRESULT ITeeListBox::UpdateSeries ( );
__declspec(implementation_key(1429)) long ITeeListBox::GetSelectedSeries ( );
__declspec(implementation_key(1430)) void ITeeListBox::PutSelectedSeries ( long Value );
__declspec(implementation_key(1431)) VARIANT_BOOL ITeeListBox::GetShowActive ( );
__declspec(implementation_key(1432)) void ITeeListBox::PutShowActive ( VARIANT_BOOL Value );
__declspec(implementation_key(1433)) VARIANT_BOOL ITeeListBox::GetShowColor ( );
__declspec(implementation_key(1434)) void ITeeListBox::PutShowColor ( VARIANT_BOOL Value );
__declspec(implementation_key(1435)) VARIANT_BOOL ITeeListBox::GetShowTitle ( );
__declspec(implementation_key(1436)) void ITeeListBox::PutShowTitle ( VARIANT_BOOL Value );
__declspec(implementation_key(1437)) VARIANT_BOOL ITeeListBox::GetShowIcon ( );
__declspec(implementation_key(1438)) void ITeeListBox::PutShowIcon ( VARIANT_BOOL Value );
__declspec(implementation_key(1439)) _bstr_t ITeeEditor::GetEditorTitle ( );
__declspec(implementation_key(1440)) void ITeeEditor::PutEditorTitle ( _bstr_t Value );
__declspec(implementation_key(1441)) enum ETeeEditorPage ITeeEditor::GetDefaultPage ( );
__declspec(implementation_key(1442)) void ITeeEditor::PutDefaultPage ( enum ETeeEditorPage Value );
__declspec(implementation_key(1443)) HRESULT ITeeEditor::ShowEditor ( );
__declspec(implementation_key(1444)) VARIANT_BOOL ITeeEditor::GetAutoRepaint ( );
__declspec(implementation_key(1445)) void ITeeEditor::PutAutoRepaint ( VARIANT_BOOL Value );
__declspec(implementation_key(1446)) ITeeEditorShowPagesPtr ITeeEditor::GetShowPages ( );
__declspec(implementation_key(1447)) long ITeeEditor::GetEditorLink ( );
__declspec(implementation_key(1448)) ITeeEditorOptionsPtr ITeeEditor::GetOptions ( );
__declspec(implementation_key(1449)) _bstr_t ITeePreviewer::GetPreviewTitle ( );
__declspec(implementation_key(1450)) void ITeePreviewer::PutPreviewTitle ( _bstr_t Value );
__declspec(implementation_key(1451)) HRESULT ITeePreviewer::ShowPreview ( );
__declspec(implementation_key(1452)) OLE_COLOR ITeePreviewer::GetPaperColor ( );
__declspec(implementation_key(1453)) void ITeePreviewer::PutPaperColor ( OLE_COLOR Value );
__declspec(implementation_key(1454)) long ITeePreviewer::GetPreviewerLink ( );
__declspec(implementation_key(1455)) VARIANT_BOOL ITeePreviewer::GetMaximized ( );
__declspec(implementation_key(1456)) void ITeePreviewer::PutMaximized ( VARIANT_BOOL Value );
__declspec(implementation_key(1457)) ITeePreviewerOptionsPtr ITeePreviewer::GetOptions ( );
__declspec(implementation_key(1458)) VARIANT_BOOL ITeeCommander::GetLabelValues ( );
__declspec(implementation_key(1459)) void ITeeCommander::PutLabelValues ( VARIANT_BOOL Value );
__declspec(implementation_key(1460)) OLE_COLOR ITeeCommander::GetColor ( );
__declspec(implementation_key(1461)) void ITeeCommander::PutColor ( OLE_COLOR Value );
__declspec(implementation_key(1462)) VARIANT_BOOL ITeeCommander::GetEnabled ( );
__declspec(implementation_key(1463)) void ITeeCommander::PutEnabled ( VARIANT_BOOL Value );
__declspec(implementation_key(1464)) void ITeeCommander::PutEditor ( struct ITeeEditor * _arg1 );
__declspec(implementation_key(1465)) void ITeeCommander::PutPreviewer ( struct ITeePreviewer * _arg1 );
__declspec(implementation_key(1466)) void ITeeCommander::PutEditorLink ( long _arg1 );
__declspec(implementation_key(1467)) void ITeeCommander::PutPreviewerLink ( long _arg1 );
__declspec(implementation_key(1468)) VARIANT_BOOL ITeeCommander::GetVertical ( );
__declspec(implementation_key(1469)) void ITeeCommander::PutVertical ( VARIANT_BOOL Value );
__declspec(implementation_key(1470)) _variant_t ITeeCommander::GetControls ( );
__declspec(implementation_key(1471)) void ITeeCommander::PutControls ( const _variant_t & Value );
__declspec(implementation_key(1472)) _variant_t ITeeCommander::GetButtons ( );
__declspec(implementation_key(1473)) void ITeeCommander::PutButtons ( const _variant_t & Value );
__declspec(implementation_key(1474)) VARIANT_BOOL ITeePreviewPanel::GetAllowResize ( );
__declspec(implementation_key(1475)) void ITeePreviewPanel::PutAllowResize ( VARIANT_BOOL Value );
__declspec(implementation_key(1476)) VARIANT_BOOL ITeePreviewPanel::GetAllowMove ( );
__declspec(implementation_key(1477)) void ITeePreviewPanel::PutAllowMove ( VARIANT_BOOL Value );
__declspec(implementation_key(1478)) VARIANT_BOOL ITeePreviewPanel::GetAsBitmap ( );
__declspec(implementation_key(1479)) void ITeePreviewPanel::PutAsBitmap ( VARIANT_BOOL Value );
__declspec(implementation_key(1480)) VARIANT_BOOL ITeePreviewPanel::GetDragImage ( );
__declspec(implementation_key(1481)) void ITeePreviewPanel::PutDragImage ( VARIANT_BOOL Value );
__declspec(implementation_key(1482)) enum ETeePreviewPanelOrientation ITeePreviewPanel::GetOrientation ( );
__declspec(implementation_key(1483)) void ITeePreviewPanel::PutOrientation ( enum ETeePreviewPanelOrientation Value );
__declspec(implementation_key(1484)) OLE_COLOR ITeePreviewPanel::GetPaperColor ( );
__declspec(implementation_key(1485)) void ITeePreviewPanel::PutPaperColor ( OLE_COLOR Value );
__declspec(implementation_key(1486)) OLE_COLOR ITeePreviewPanel::GetShadowColor ( );
__declspec(implementation_key(1487)) void ITeePreviewPanel::PutShadowColor ( OLE_COLOR Value );
__declspec(implementation_key(1488)) long ITeePreviewPanel::GetShadowSize ( );
__declspec(implementation_key(1489)) void ITeePreviewPanel::PutShadowSize ( long Value );
__declspec(implementation_key(1490)) VARIANT_BOOL ITeePreviewPanel::GetShowImage ( );
__declspec(implementation_key(1491)) void ITeePreviewPanel::PutShowImage ( VARIANT_BOOL Value );
__declspec(implementation_key(1492)) _bstr_t ITeePreviewPanel::GetTitle ( );
__declspec(implementation_key(1493)) void ITeePreviewPanel::PutTitle ( _bstr_t Value );
__declspec(implementation_key(1494)) HRESULT ITeePreviewPanel::Repaint ( );
__declspec(implementation_key(1495)) ITeePanelsListPtr ITeePreviewPanel::GetPanels ( );
__declspec(implementation_key(1496)) HRESULT ITeePreviewPanel::AddChart ( struct ITChart * Value );
__declspec(implementation_key(1497)) IGradientPtr ITeePreviewPanel::GetGradient ( );
__declspec(implementation_key(1498)) IPenPtr ITeePreviewPanel::GetMargins ( );
__declspec(implementation_key(1499)) HRESULT ITeePreviewPanel::PrintPage ( );
__declspec(implementation_key(1500)) HRESULT ITeePreviewPanel::AddChartLink ( long Value );
__declspec(implementation_key(1501)) long IChartGrid::GetCol ( );
__declspec(implementation_key(1502)) void IChartGrid::PutCol ( long Value );
__declspec(implementation_key(1503)) long IChartGrid::GetColCount ( );
__declspec(implementation_key(1504)) long IChartGrid::GetColwidths ( long Index );
__declspec(implementation_key(1505)) void IChartGrid::PutColwidths ( long Index, long Value );
__declspec(implementation_key(1506)) VARIANT_BOOL IChartGrid::GetEditorMode ( );
__declspec(implementation_key(1507)) void IChartGrid::PutEditorMode ( VARIANT_BOOL Value );
__declspec(implementation_key(1508)) long IChartGrid::GetGridHeight ( );
__declspec(implementation_key(1509)) long IChartGrid::GetGridWidth ( );
__declspec(implementation_key(1510)) long IChartGrid::GetLeftCol ( );
__declspec(implementation_key(1511)) void IChartGrid::PutLeftCol ( long Value );
__declspec(implementation_key(1512)) long IChartGrid::GetGridLink ( );
__declspec(implementation_key(1513)) HRESULT IChartGrid::RecalcDimensions ( );
__declspec(implementation_key(1514)) VARIANT_BOOL IChartGrid::GetShowLabels ( );
__declspec(implementation_key(1515)) void IChartGrid::PutShowLabels ( VARIANT_BOOL Value );
__declspec(implementation_key(1516)) VARIANT_BOOL IChartGrid::GetShowColors ( );
__declspec(implementation_key(1517)) void IChartGrid::PutShowColors ( VARIANT_BOOL Value );
__declspec(implementation_key(1518)) VARIANT_BOOL IChartGrid::GetShowFields ( );
__declspec(implementation_key(1519)) void IChartGrid::PutShowFields ( VARIANT_BOOL Value );
__declspec(implementation_key(1520)) IChartGridColsPtr IChartGrid::Cols ( );
__declspec(implementation_key(1521)) IChartGridRowsPtr IChartGrid::Rows ( );
__declspec(implementation_key(1522)) void IChartGridNavigator::PutGrid ( struct IChartGrid * _arg1 );
__declspec(implementation_key(1523)) void IChartGridNavigator::PutGridLink ( long _arg1 );
__declspec(implementation_key(1524)) HRESULT IChartGridNavigator::EnableButtons ( );
__declspec(implementation_key(1525)) HRESULT IChartPageNavigator::EnableButtons ( );
__declspec(implementation_key(1526)) HRESULT IChartEditorPanel::SelectUnderMouse ( );
__declspec(implementation_key(1527)) enum EPanelBevel IChartEditorPanel::GetBevelOuter ( );
__declspec(implementation_key(1528)) void IChartEditorPanel::PutBevelOuter ( enum EPanelBevel Value );
__declspec(implementation_key(1529)) HRESULT ISeriesTextSource::Close ( );
__declspec(implementation_key(1530)) HRESULT ISeriesTextSource::Load ( );
__declspec(implementation_key(1531)) HRESULT ISeriesTextSource::LoadAsStream ( const _variant_t & AStream );
__declspec(implementation_key(1532)) HRESULT ISeriesTextSource::LoadFromFile ( _bstr_t FileName );
__declspec(implementation_key(1533)) HRESULT ISeriesTextSource::LoadFromURL ( _bstr_t URL );
__declspec(implementation_key(1534)) HRESULT ISeriesTextSource::Open ( );
__declspec(implementation_key(1535)) VARIANT_BOOL ISeriesTextSource::GetActive ( );
__declspec(implementation_key(1536)) void ISeriesTextSource::PutActive ( VARIANT_BOOL Value );
__declspec(implementation_key(1537)) long ISeriesTextSource::GetHeaderLines ( );
__declspec(implementation_key(1538)) void ISeriesTextSource::PutHeaderLines ( long Value );
__declspec(implementation_key(1539)) ISeriesTextFieldsPtr ISeriesTextSource::GetFields ( );
__declspec(implementation_key(1540)) _bstr_t ISeriesTextSource::GetFieldSeparator ( );
__declspec(implementation_key(1541)) void ISeriesTextSource::PutFieldSeparator ( _bstr_t Value );
__declspec(implementation_key(1542)) _bstr_t ISeriesTextSource::GetFileName ( );
__declspec(implementation_key(1543)) void ISeriesTextSource::PutFileName ( _bstr_t Value );
__declspec(implementation_key(1544)) _variant_t ISeriesTextSource::GetSeries ( );
__declspec(implementation_key(1545)) void ISeriesTextSource::PutSeries ( const _variant_t & Value );
__declspec(implementation_key(1546)) ISeriesTextFieldPtr ISeriesTextSource::AddField ( _bstr_t AName, long AIndex );
__declspec(implementation_key(1547)) VARIANT_BOOL ISeries::GetActive ( );
__declspec(implementation_key(1548)) void ISeries::PutActive ( VARIANT_BOOL Active );
__declspec(implementation_key(1549)) IAreaSeriesPtr ISeries::GetasArea ( );
__declspec(implementation_key(1550)) IArrowSeriesPtr ISeries::GetasArrow ( );
__declspec(implementation_key(1551)) IBarSeriesPtr ISeries::GetasBar ( );
__declspec(implementation_key(1552)) IBubbleSeriesPtr ISeries::GetasBubble ( );
__declspec(implementation_key(1553)) ICandleSeriesPtr ISeries::GetasCandle ( );
__declspec(implementation_key(1554)) IErrorBarSeriesPtr ISeries::GetasErrorBar ( );
__declspec(implementation_key(1555)) IFastLineSeriesPtr ISeries::GetasFastLine ( );
__declspec(implementation_key(1556)) IGanttSeriesPtr ISeries::GetasGantt ( );
__declspec(implementation_key(1557)) IHorizBarSeriesPtr ISeries::GetasHorizBar ( );
__declspec(implementation_key(1558)) ILineSeriesPtr ISeries::GetasLine ( );
__declspec(implementation_key(1559)) IPieSeriesPtr ISeries::GetasPie ( );
__declspec(implementation_key(1560)) IPointSeriesPtr ISeries::GetasPoint ( );
__declspec(implementation_key(1561)) IPolarSeriesPtr ISeries::GetasPolar ( );
__declspec(implementation_key(1562)) IShapeSeriesPtr ISeries::GetasShape ( );
__declspec(implementation_key(1563)) ISurfaceSeriesPtr ISeries::GetasSurface ( );
__declspec(implementation_key(1564)) IVolumeSeriesPtr ISeries::GetasVolume ( );
__declspec(implementation_key(1565)) OLE_COLOR ISeries::GetColor ( );
__declspec(implementation_key(1566)) void ISeries::PutColor ( OLE_COLOR Color );
__declspec(implementation_key(1567)) VARIANT_BOOL ISeries::GetColorEachPoint ( );
__declspec(implementation_key(1568)) void ISeries::PutColorEachPoint ( VARIANT_BOOL ColorEachPoint );
__declspec(implementation_key(1569)) long ISeries::GetCount ( );
__declspec(implementation_key(1570)) short ISeries::GetCursor ( );
__declspec(implementation_key(1571)) void ISeries::PutCursor ( short Cursor );
__declspec(implementation_key(1572)) _variant_t ISeries::GetDataSource ( );
__declspec(implementation_key(1573)) void ISeries::PutDataSource ( const _variant_t & DataSource );
__declspec(implementation_key(1574)) long ISeries::GetFirstValueIndex ( );
__declspec(implementation_key(1575)) ITeeFunctionPtr ISeries::GetFunctionType ( );
__declspec(implementation_key(1576)) enum EHorizontalAxis ISeries::GetHorizontalAxis ( );
__declspec(implementation_key(1577)) void ISeries::PutHorizontalAxis ( enum EHorizontalAxis HorizontalAxis );
__declspec(implementation_key(1578)) _bstr_t ISeries::GetLabelsSource ( );
__declspec(implementation_key(1579)) void ISeries::PutLabelsSource ( _bstr_t LabelsSource );
__declspec(implementation_key(1580)) long ISeries::GetLastValueIndex ( );
__declspec(implementation_key(1581)) IMarksPtr ISeries::GetMarks ( );
__declspec(implementation_key(1582)) _bstr_t ISeries::GetName ( );
__declspec(implementation_key(1583)) void ISeries::PutName ( _bstr_t Name );
__declspec(implementation_key(1584)) _bstr_t ISeries::GetPercentFormat ( );
__declspec(implementation_key(1585)) void ISeries::PutPercentFormat ( _bstr_t PercentFormat );
__declspec(implementation_key(1586)) OLE_COLOR ISeries::GetPointColor ( long Index );
__declspec(implementation_key(1587)) void ISeries::PutPointColor ( long Index, OLE_COLOR Value );
__declspec(implementation_key(1588)) _bstr_t ISeries::GetPointLabel ( long Index );
__declspec(implementation_key(1589)) void ISeries::PutPointLabel ( long Index, _bstr_t Value );
__declspec(implementation_key(1590)) double ISeries::GetPointValue ( long Index );
__declspec(implementation_key(1591)) void ISeries::PutPointValue ( long Index, double Value );
__declspec(implementation_key(1592)) enum ESeriesClass ISeries::GetSeriesType ( );
__declspec(implementation_key(1593)) VARIANT_BOOL ISeries::GetShowInLegend ( );
__declspec(implementation_key(1594)) void ISeries::PutShowInLegend ( VARIANT_BOOL ShowInLegend );
__declspec(implementation_key(1595)) _bstr_t ISeries::GetTitle ( );
__declspec(implementation_key(1596)) void ISeries::PutTitle ( _bstr_t Title );
__declspec(implementation_key(1597)) _bstr_t ISeries::GetValueFormat ( );
__declspec(implementation_key(1598)) void ISeries::PutValueFormat ( _bstr_t ValueFormat );
__declspec(implementation_key(1599)) _bstr_t ISeries::GetValueMarkText ( long ValueIndex );
__declspec(implementation_key(1600)) enum EVerticalAxis ISeries::GetVerticalAxis ( );
__declspec(implementation_key(1601)) void ISeries::PutVerticalAxis ( enum EVerticalAxis VerticalAxis );
__declspec(implementation_key(1602)) IValueListPtr ISeries::GetXValues ( );
__declspec(implementation_key(1603)) IValueListPtr ISeries::GetYValues ( );
__declspec(implementation_key(1604)) long ISeries::GetZOrder ( );
__declspec(implementation_key(1605)) long ISeries::Add ( double AValue, _bstr_t ALabel, OLE_COLOR Value );
__declspec(implementation_key(1606)) long ISeries::AddNull ( _bstr_t SomeLabel );
__declspec(implementation_key(1607)) long ISeries::AddXY ( double AX, double AY, _bstr_t ALabel, OLE_COLOR Value );
__declspec(implementation_key(1608)) long ISeries::CalcXPos ( long SomeValueIndex );
__declspec(implementation_key(1609)) long ISeries::CalcXPosValue ( double SomeValue );
__declspec(implementation_key(1610)) long ISeries::CalcXSizeValue ( double SomeValue );
__declspec(implementation_key(1611)) long ISeries::CalcYPos ( long SomeValueIndex );
__declspec(implementation_key(1612)) long ISeries::CalcYPosValue ( double SomeValue );
__declspec(implementation_key(1613)) long ISeries::CalcYSizeValue ( double SomeValue );
__declspec(implementation_key(1614)) HRESULT ISeries::CheckDataSource ( );
__declspec(implementation_key(1615)) HRESULT ISeries::Clear ( );
__declspec(implementation_key(1616)) long ISeries::Clicked ( long XCoord, long YCoord );
__declspec(implementation_key(1617)) HRESULT ISeries::Delete ( long Index );
__declspec(implementation_key(1618)) HRESULT ISeries::FillSampleValues ( long NumValues );
__declspec(implementation_key(1619)) long ISeries::GetMousePoint ( );
__declspec(implementation_key(1620)) VARIANT_BOOL ISeries::IsNull ( long ValueIndex );
__declspec(implementation_key(1621)) HRESULT ISeries::RefreshSeries ( );
__declspec(implementation_key(1622)) HRESULT ISeries::SetFunction ( enum EFunctionType AFunction );
__declspec(implementation_key(1623)) HRESULT ISeries::SwapValues ( long a, long b );
__declspec(implementation_key(1624)) double ISeries::XScreenToValue ( long ScreenCoord );
__declspec(implementation_key(1625)) _bstr_t ISeries::XValueToText ( double SomeValue );
__declspec(implementation_key(1626)) double ISeries::YScreenToValue ( long ScreenCoord );
__declspec(implementation_key(1627)) _bstr_t ISeries::YValueToText ( double SomeValue );
__declspec(implementation_key(1628)) IBezierSeriesPtr ISeries::GetasBezier ( );
__declspec(implementation_key(1629)) IContourSeriesPtr ISeries::GetasContour ( );
__declspec(implementation_key(1630)) IErrorSeriesPtr ISeries::GetasError ( );
__declspec(implementation_key(1631)) IPoint3DSeriesPtr ISeries::GetasPoint3D ( );
__declspec(implementation_key(1632)) IRadarSeriesPtr ISeries::GetasRadar ( );
__declspec(implementation_key(1633)) long ISeries::AddNullXY ( double X, double Y, _bstr_t ALabel );
__declspec(implementation_key(1634)) _bstr_t ISeries::LegendString ( long LegendIndex, enum ELegendTextStyle LegendTextStyle );
__declspec(implementation_key(1635)) OLE_COLOR ISeries::LegendItemColor ( long LegendIndex );
__declspec(implementation_key(1636)) long ISeries::CountLegendItems ( );
__declspec(implementation_key(1637)) long ISeries::LegendToValueIndex ( long LegendIndex );
__declspec(implementation_key(1638)) long ISeries::VisibleCount ( );
__declspec(implementation_key(1639)) HRESULT ISeries::AssignValues ( long SeriesIndex );
__declspec(implementation_key(1640)) long ISeries::GetHorizontalAxisCustom ( );
__declspec(implementation_key(1641)) void ISeries::PutHorizontalAxisCustom ( long Value );
__declspec(implementation_key(1642)) long ISeries::GetVerticalAxisCustom ( );
__declspec(implementation_key(1643)) void ISeries::PutVerticalAxisCustom ( long Value );
__declspec(implementation_key(1644)) IClockSeriesPtr ISeries::GetasClock ( );
__declspec(implementation_key(1645)) IWindRoseSeriesPtr ISeries::GetasWindRose ( );
__declspec(implementation_key(1646)) IBar3DSeriesPtr ISeries::GetasBar3D ( );
__declspec(implementation_key(1647)) IImageBarSeriesPtr ISeries::GetasImageBar ( );
__declspec(implementation_key(1648)) HRESULT ISeries::DisconnectAxisCustom ( VARIANT_BOOL IsHorizontal );
__declspec(implementation_key(1649)) ITeePoint2DPtr ISeries::GetMouseValues ( );
__declspec(implementation_key(1650)) HRESULT ISeries::AddArray ( long ArraySize, const _variant_t & YArray, const _variant_t & XArray );
__declspec(implementation_key(1651)) long ISeries::GetDepth ( );
__declspec(implementation_key(1652)) void ISeries::PutDepth ( long Value );
__declspec(implementation_key(1653)) IDonutSeriesPtr ISeries::GetasDonut ( );
__declspec(implementation_key(1654)) ITriSurfaceSeriesPtr ISeries::GetasTriSurface ( );
__declspec(implementation_key(1655)) IBoxPlotSeriesPtr ISeries::GetasBoxPlot ( );
__declspec(implementation_key(1656)) IHorizBoxPlotSeriesPtr ISeries::GetasHorizBoxPlot ( );
__declspec(implementation_key(1657)) IHistogramSeriesPtr ISeries::GetasHistogram ( );
__declspec(implementation_key(1658)) IColorGridSeriesPtr ISeries::GetasColorGrid ( );
__declspec(implementation_key(1659)) IHorizLineSeriesPtr ISeries::GetasHorizLine ( );
__declspec(implementation_key(1660)) IBarJoinSeriesPtr ISeries::GetasBarJoin ( );
__declspec(implementation_key(1661)) IHighLowSeriesPtr ISeries::GetasHighLow ( );
__declspec(implementation_key(1662)) IWaterfallSeriesPtr ISeries::GetasWaterfall ( );
__declspec(implementation_key(1663)) ISmithSeriesPtr ISeries::GetasSmith ( );
__declspec(implementation_key(1664)) IPyramidSeriesPtr ISeries::GetasPyramid ( );
__declspec(implementation_key(1665)) IMapSeriesPtr ISeries::GetasMap ( );
__declspec(implementation_key(1666)) IFunnelSeriesPtr ISeries::GetasFunnel ( );
__declspec(implementation_key(1667)) ICalendarSeriesPtr ISeries::GetasCalendar ( );
__declspec(implementation_key(1668)) HRESULT ISeries::FreeDatasource ( VARIANT_BOOL SurePrompt );
__declspec(implementation_key(1669)) long ISeries::GetSeriesLink ( );
__declspec(implementation_key(1670)) enum EDatasourceType ISeries::GetDatasourceType ( );
__declspec(implementation_key(1671)) void ISeries::PutDatasourceType ( enum EDatasourceType Value );
__declspec(implementation_key(1672)) IValueListsPtr ISeries::GetValueLists ( );
__declspec(implementation_key(1673)) VARIANT_BOOL ISeries::IsNan ( double Value );
__declspec(implementation_key(1674)) HRESULT ISeries::DeleteRange ( long Start, long Quantity );
__declspec(implementation_key(1675)) double IMACDFunction::GetPeriod2 ( );
__declspec(implementation_key(1676)) void IMACDFunction::PutPeriod2 ( double Value );
__declspec(implementation_key(1677)) ISeriesPtr IMACDFunction::GetMACDExp ( );
__declspec(implementation_key(1678)) ISeriesPtr IMACDFunction::GetHistogram ( );
__declspec(implementation_key(1679)) long IMACDFunction::GetPeriod3 ( );
__declspec(implementation_key(1680)) void IMACDFunction::PutPeriod3 ( long Value );
__declspec(implementation_key(1681)) double IBollingerFunction::GetDeviation ( );
__declspec(implementation_key(1682)) void IBollingerFunction::PutDeviation ( double Value );
__declspec(implementation_key(1683)) VARIANT_BOOL IBollingerFunction::GetExponential ( );
__declspec(implementation_key(1684)) void IBollingerFunction::PutExponential ( VARIANT_BOOL Value );
__declspec(implementation_key(1685)) ISeriesPtr IBollingerFunction::GetLowBand ( );
__declspec(implementation_key(1686)) ISeriesPtr IADXFunction::GetDMDown ( );
__declspec(implementation_key(1687)) ISeriesPtr IADXFunction::GetDMUp ( );
__declspec(implementation_key(1688)) double ITeeFunction::GetPeriod ( );
__declspec(implementation_key(1689)) void ITeeFunction::PutPeriod ( double Period );
__declspec(implementation_key(1690)) ICurveFittingFunctionPtr ITeeFunction::GetasCurveFit ( );
__declspec(implementation_key(1691)) IExpAvgFunctionPtr ITeeFunction::GetasExpAvg ( );
__declspec(implementation_key(1692)) IMovingAvgFunctionPtr ITeeFunction::GetasMovAvg ( );
__declspec(implementation_key(1693)) enum EFunctionPeriodStyle ITeeFunction::GetPeriodStyle ( );
__declspec(implementation_key(1694)) void ITeeFunction::PutPeriodStyle ( enum EFunctionPeriodStyle Value );
__declspec(implementation_key(1695)) enum EFunctionPeriodAlign ITeeFunction::GetPeriodAlign ( );
__declspec(implementation_key(1696)) void ITeeFunction::PutPeriodAlign ( enum EFunctionPeriodAlign Value );
__declspec(implementation_key(1697)) IStdDeviationFunctionPtr ITeeFunction::GetasStdDeviation ( );
__declspec(implementation_key(1698)) HRESULT ITeeFunction::BeginUpdate ( );
__declspec(implementation_key(1699)) HRESULT ITeeFunction::EndUpdate ( );
__declspec(implementation_key(1700)) IRSIFunctionPtr ITeeFunction::GetasRSI ( );
__declspec(implementation_key(1701)) IBollingerFunctionPtr ITeeFunction::GetasBollinger ( );
__declspec(implementation_key(1702)) IADXFunctionPtr ITeeFunction::GetasADX ( );
__declspec(implementation_key(1703)) IMACDFunctionPtr ITeeFunction::GetasMACD ( );
__declspec(implementation_key(1704)) IRMSFunctionPtr ITeeFunction::GetasRMS ( );
__declspec(implementation_key(1705)) IAverageFunctionPtr ITeeFunction::GetasAverage ( );
#pragma stop_map_region

#pragma pack(pop)
