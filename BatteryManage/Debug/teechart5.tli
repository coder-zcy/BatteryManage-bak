// Created by Microsoft (R) C/C++ Compiler Version 12.00.21005.1 (9b6a5078).
//
// d:\work\batterymanage\batterymanage\debug\teechart5.tli
//
// Wrapper implementations for Win32 type library C:\\Program Files (x86)\\TeeChart Pro v5 ActiveX Control\\TeeChart5.ocx
// compiler-generated file created 05/06/18 at 20:34:00 - DO NOT EDIT!


//
// dispinterface ITChartEvents wrapper method implementations
//

#pragma implementation_key(1)
inline HRESULT ITChartEvents::OnAfterDraw ( ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(2)
inline HRESULT ITChartEvents::OnBeforeDrawSeries ( ) {
    return _com_dispatch_method(this, 0x1d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(3)
inline HRESULT ITChartEvents::OnBeforeDrawAxes ( ) {
    return _com_dispatch_method(this, 0x1e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(4)
inline HRESULT ITChartEvents::OnClick ( ) {
    return _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(5)
inline HRESULT ITChartEvents::OnClickAxis ( long Axis, enum EMouseButton Button, enum EShiftState Shift, long X, long Y ) {
    return _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0003\x0003", Axis, Button, Shift, X, Y);
}

#pragma implementation_key(6)
inline HRESULT ITChartEvents::OnClickBackground ( enum EMouseButton Button, enum EShiftState Shift, long X, long Y ) {
    return _com_dispatch_method(this, 0x5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0003", Button, Shift, X, Y);
}

#pragma implementation_key(7)
inline HRESULT ITChartEvents::OnClickLegend ( enum EMouseButton Button, enum EShiftState Shift, long X, long Y ) {
    return _com_dispatch_method(this, 0x6, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0003", Button, Shift, X, Y);
}

#pragma implementation_key(8)
inline HRESULT ITChartEvents::OnClickSeries ( long SeriesIndex, long ValueIndex, enum EMouseButton Button, enum EShiftState Shift, long X, long Y ) {
    return _com_dispatch_method(this, 0x7, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0003\x0003\x0003", SeriesIndex, ValueIndex, Button, Shift, X, Y);
}

#pragma implementation_key(9)
inline HRESULT ITChartEvents::OnDblClick ( ) {
    return _com_dispatch_method(this, 0x8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(10)
inline HRESULT ITChartEvents::OnDragDrop ( long X, long Y ) {
    return _com_dispatch_method(this, 0x9, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003", X, Y);
}

#pragma implementation_key(11)
inline HRESULT ITChartEvents::OnDragOver ( long X, long Y, enum EDragState State, VARIANT_BOOL * Accept ) {
    return _com_dispatch_method(this, 0xa, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x400b", X, Y, State, Accept);
}

#pragma implementation_key(12)
inline HRESULT ITChartEvents::OnEndDrag ( long X, long Y ) {
    return _com_dispatch_method(this, 0xb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003", X, Y);
}

#pragma implementation_key(13)
inline HRESULT ITChartEvents::OnEnter ( ) {
    return _com_dispatch_method(this, 0xc, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(14)
inline HRESULT ITChartEvents::OnExit ( ) {
    return _com_dispatch_method(this, 0xd, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(15)
inline HRESULT ITChartEvents::OnGetAxisLabel ( long Axis, long SeriesIndex, long ValueIndex, BSTR * LabelText ) {
    return _com_dispatch_method(this, 0xe, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x4008", Axis, SeriesIndex, ValueIndex, LabelText);
}

#pragma implementation_key(16)
inline HRESULT ITChartEvents::OnGetLegendRect ( long * Left, long * Top, long * Right, long * Bottom ) {
    return _com_dispatch_method(this, 0x10, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003\x4003\x4003\x4003", Left, Top, Right, Bottom);
}

#pragma implementation_key(17)
inline HRESULT ITChartEvents::OnGetNextAxisLabel ( long Axis, long LabelIndex, double * LabelValue, VARIANT_BOOL * MoreLabels ) {
    return _com_dispatch_method(this, 0x12, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x4005\x400b", Axis, LabelIndex, LabelValue, MoreLabels);
}

#pragma implementation_key(18)
inline HRESULT ITChartEvents::OnMouseDown ( enum EMouseButton Button, enum EShiftState Shift, long X, long Y ) {
    return _com_dispatch_method(this, 0x13, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0003", Button, Shift, X, Y);
}

#pragma implementation_key(19)
inline HRESULT ITChartEvents::OnMouseMove ( enum EShiftState Shift, long X, long Y ) {
    return _com_dispatch_method(this, 0x14, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003", Shift, X, Y);
}

#pragma implementation_key(20)
inline HRESULT ITChartEvents::OnMouseUp ( enum EMouseButton Button, enum EShiftState Shift, long X, long Y ) {
    return _com_dispatch_method(this, 0x15, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0003", Button, Shift, X, Y);
}

#pragma implementation_key(21)
inline HRESULT ITChartEvents::OnPageChange ( ) {
    return _com_dispatch_method(this, 0x16, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(22)
inline HRESULT ITChartEvents::OnResize ( ) {
    return _com_dispatch_method(this, 0x17, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(23)
inline HRESULT ITChartEvents::OnScroll ( ) {
    return _com_dispatch_method(this, 0x18, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(24)
inline HRESULT ITChartEvents::OnStartDrag ( ) {
    return _com_dispatch_method(this, 0x19, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(25)
inline HRESULT ITChartEvents::OnUndoZoom ( ) {
    return _com_dispatch_method(this, 0x1a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(26)
inline HRESULT ITChartEvents::OnZoom ( ) {
    return _com_dispatch_method(this, 0x1b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(27)
inline HRESULT ITChartEvents::OnAllowScroll ( enum EAxisType Axis, double * AMin, double * AMax, VARIANT_BOOL * AllowScroll ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x4005\x4005\x400b", Axis, AMin, AMax, AllowScroll);
}

#pragma implementation_key(28)
inline HRESULT ITChartEvents::OnGetLegendPos ( long ItemIndex, long * X, long * Y, long * XColor ) {
    return _com_dispatch_method(this, 0xf, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x4003\x4003\x4003", ItemIndex, X, Y, XColor);
}

#pragma implementation_key(29)
inline HRESULT ITChartEvents::OnGetLegendText ( long LegendStyle, long ValueIndex, BSTR * LegendText ) {
    return _com_dispatch_method(this, 0x11, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x4008", LegendStyle, ValueIndex, LegendText);
}

#pragma implementation_key(30)
inline HRESULT ITChartEvents::OnDatabaseRecord ( long SeriesIndex, long Index, VARIANT_BOOL * StopRetrieve ) {
    return _com_dispatch_method(this, 0x1c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x400b", SeriesIndex, Index, StopRetrieve);
}

#pragma implementation_key(31)
inline HRESULT ITChartEvents::OnTimer ( ) {
    return _com_dispatch_method(this, 0x1f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(32)
inline HRESULT ITChartEvents::OnGetSeriesMark ( long SeriesIndex, long ValueIndex, BSTR * MarkText ) {
    return _com_dispatch_method(this, 0x20, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x4008", SeriesIndex, ValueIndex, MarkText);
}

#pragma implementation_key(33)
inline HRESULT ITChartEvents::OnGetSeriesPointerStyle ( long SeriesIndex, long ValueIndex, enum EPointerStyle * AStyle ) {
    return _com_dispatch_method(this, 0x21, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x4003", SeriesIndex, ValueIndex, AStyle);
}

#pragma implementation_key(34)
inline HRESULT ITChartEvents::OnGetSeriesContourLevel ( long SeriesIndex, long LevelIndex, double * LevelValue, OLE_COLOR * LevelColor ) {
    return _com_dispatch_method(this, 0x22, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x4005\x4003", SeriesIndex, LevelIndex, LevelValue, LevelColor);
}

#pragma implementation_key(35)
inline HRESULT ITChartEvents::OnBeforeDrawChart ( ) {
    return _com_dispatch_method(this, 0x27, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(36)
inline HRESULT ITChartEvents::OnSeriesBeforeDrawValues ( long SeriesIndex ) {
    return _com_dispatch_method(this, 0x24, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", SeriesIndex);
}

#pragma implementation_key(37)
inline HRESULT ITChartEvents::OnSeriesAfterDrawValues ( long SeriesIndex ) {
    return _com_dispatch_method(this, 0x23, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", SeriesIndex);
}

#pragma implementation_key(38)
inline HRESULT ITChartEvents::OnMarkTipToolGetText ( long Tool, BSTR * Text ) {
    return _com_dispatch_method(this, 0x25, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x4008", Tool, Text);
}

#pragma implementation_key(39)
inline HRESULT ITChartEvents::OnCursorToolChange ( long Tool, long X, long Y, double XVal, double YVal, long Series, long ValueIndex ) {
    return _com_dispatch_method(this, 0x28, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0005\x0005\x0003\x0003", Tool, X, Y, XVal, YVal, Series, ValueIndex);
}

#pragma implementation_key(40)
inline HRESULT ITChartEvents::OnDrawLineToolLineDrag ( ) {
    return _com_dispatch_method(this, 0x29, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(41)
inline HRESULT ITChartEvents::OnDrawLineToolNewLine ( ) {
    return _com_dispatch_method(this, 0x2a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(42)
inline HRESULT ITChartEvents::OnDrawLineToolDraggedLine ( ) {
    return _com_dispatch_method(this, 0x2b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(43)
inline HRESULT ITChartEvents::OnDrawLineToolSelectLine ( ) {
    return _com_dispatch_method(this, 0x2c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(44)
inline HRESULT ITChartEvents::OnCalendarSeriesChange ( long Series, double Value ) {
    return _com_dispatch_method(this, 0x26, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0005", Series, Value);
}

#pragma implementation_key(45)
inline HRESULT ITChartEvents::OnSeriesBeforeAdd ( long SeriesIndex, VARIANT_BOOL * MoreValues ) {
    return _com_dispatch_method(this, 0x2d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x400b", SeriesIndex, MoreValues);
}

//
// interface IBrush wrapper method implementations
//

#pragma implementation_key(46)
inline OLE_COLOR IBrush::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(47)
inline void IBrush::PutColor ( OLE_COLOR Color ) {
    HRESULT _hr = put_Color(Color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(48)
inline enum EBrushStyle IBrush::GetStyle ( ) {
    enum EBrushStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(49)
inline void IBrush::PutStyle ( enum EBrushStyle Style ) {
    HRESULT _hr = put_Style(Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(50)
inline HRESULT IBrush::LoadImage ( _bstr_t FileName ) {
    HRESULT _hr = raw_LoadImage(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(51)
inline HRESULT IBrush::AssignImage ( long ImageHandle ) {
    HRESULT _hr = raw_AssignImage(ImageHandle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(52)
inline HRESULT IBrush::ClearImage ( ) {
    HRESULT _hr = raw_ClearImage();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IStrings wrapper method implementations
//

#pragma implementation_key(53)
inline _variant_t IStrings::GetControlDefault ( long Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ControlDefault(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(54)
inline void IStrings::PutControlDefault ( long Index, const _variant_t & Value ) {
    HRESULT _hr = put_ControlDefault(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(55)
inline long IStrings::Count ( ) {
    long _result = 0;
    HRESULT _hr = raw_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(56)
inline _variant_t IStrings::GetItem ( long Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(57)
inline void IStrings::PutItem ( long Index, const _variant_t & Value ) {
    HRESULT _hr = put_Item(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(58)
inline HRESULT IStrings::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(59)
inline HRESULT IStrings::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(60)
inline long IStrings::Add ( const _variant_t & AItem ) {
    long _result = 0;
    HRESULT _hr = raw_Add(AItem, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(61)
inline IUnknownPtr IStrings::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IImport wrapper method implementations
//

#pragma implementation_key(62)
inline HRESULT IImport::LoadFromFile ( _bstr_t FileName ) {
    HRESULT _hr = raw_LoadFromFile(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(63)
inline HRESULT IImport::LoadFromURL ( _bstr_t URL ) {
    HRESULT _hr = raw_LoadFromURL(URL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(64)
inline HRESULT IImport::LoadFromStream ( const _variant_t & AStream ) {
    HRESULT _hr = raw_LoadFromStream(AStream);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IScroll wrapper method implementations
//

#pragma implementation_key(65)
inline enum EChartScroll IScroll::GetEnable ( ) {
    enum EChartScroll _result;
    HRESULT _hr = get_Enable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(66)
inline void IScroll::PutEnable ( enum EChartScroll Enable ) {
    HRESULT _hr = put_Enable(Enable);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(67)
inline enum EMouseButton IScroll::GetMouseButton ( ) {
    enum EMouseButton _result;
    HRESULT _hr = get_MouseButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(68)
inline void IScroll::PutMouseButton ( enum EMouseButton Value ) {
    HRESULT _hr = put_MouseButton(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPrinter wrapper method implementations
//

#pragma implementation_key(69)
inline long IPrinter::GetDetail ( ) {
    long _result = 0;
    HRESULT _hr = get_Detail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(70)
inline void IPrinter::PutDetail ( long Value ) {
    HRESULT _hr = put_Detail(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(71)
inline long IPrinter::GetMarginBottom ( ) {
    long _result = 0;
    HRESULT _hr = get_MarginBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(72)
inline void IPrinter::PutMarginBottom ( long Value ) {
    HRESULT _hr = put_MarginBottom(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(73)
inline long IPrinter::GetMarginLeft ( ) {
    long _result = 0;
    HRESULT _hr = get_MarginLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(74)
inline void IPrinter::PutMarginLeft ( long Value ) {
    HRESULT _hr = put_MarginLeft(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(75)
inline long IPrinter::GetMarginTop ( ) {
    long _result = 0;
    HRESULT _hr = get_MarginTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(76)
inline void IPrinter::PutMarginTop ( long Value ) {
    HRESULT _hr = put_MarginTop(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(77)
inline long IPrinter::GetMarginRight ( ) {
    long _result = 0;
    HRESULT _hr = get_MarginRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(78)
inline void IPrinter::PutMarginRight ( long Value ) {
    HRESULT _hr = put_MarginRight(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(79)
inline enum EPrinterOrientation IPrinter::GetOrientation ( ) {
    enum EPrinterOrientation _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(80)
inline void IPrinter::PutOrientation ( enum EPrinterOrientation Value ) {
    HRESULT _hr = put_Orientation(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(81)
inline HRESULT IPrinter::Print ( ) {
    HRESULT _hr = raw_Print();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(82)
inline HRESULT IPrinter::PrintLandscape ( ) {
    HRESULT _hr = raw_PrintLandscape();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(83)
inline HRESULT IPrinter::PrintPortrait ( ) {
    HRESULT _hr = raw_PrintPortrait();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(84)
inline HRESULT IPrinter::ShowPreview ( ) {
    HRESULT _hr = raw_ShowPreview();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(85)
inline HRESULT IPrinter::PrintPartial ( long Left, long Top, long Right, long Bottom ) {
    HRESULT _hr = raw_PrintPartial(Left, Top, Right, Bottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(86)
inline HRESULT IPrinter::BeginDoc ( ) {
    HRESULT _hr = raw_BeginDoc();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(87)
inline HRESULT IPrinter::EndDoc ( ) {
    HRESULT _hr = raw_EndDoc();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(88)
inline long IPrinter::GetPrinterIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_PrinterIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(89)
inline void IPrinter::PutPrinterIndex ( long Value ) {
    HRESULT _hr = put_PrinterIndex(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(90)
inline long IPrinter::GetPrinterCount ( ) {
    long _result = 0;
    HRESULT _hr = get_PrinterCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(91)
inline _bstr_t IPrinter::GetPrinterDescription ( long Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_PrinterDescription(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(92)
inline HRESULT IPrinter::PrintChart ( ) {
    HRESULT _hr = raw_PrintChart();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(93)
inline long IPrinter::GetPageHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_PageHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(94)
inline long IPrinter::GetPageWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_PageWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(95)
inline _bstr_t IPrinter::GetJobTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_JobTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(96)
inline void IPrinter::PutJobTitle ( _bstr_t Value ) {
    HRESULT _hr = put_JobTitle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(97)
inline VARIANT_BOOL IPrinter::GetPrintProportional ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintProportional(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(98)
inline void IPrinter::PutPrintProportional ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_PrintProportional(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(99)
inline HRESULT IPrinter::PrintPartialHandle ( const _variant_t & DC, long Left, long Top, long Right, long Bottom ) {
    HRESULT _hr = raw_PrintPartialHandle(DC, Left, Top, Right, Bottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(100)
inline HRESULT IPrinter::PrintPages ( long FromPage, long ToPage ) {
    HRESULT _hr = raw_PrintPages(FromPage, ToPage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGradient wrapper method implementations
//

#pragma implementation_key(101)
inline enum EGradientDirection IGradient::GetDirection ( ) {
    enum EGradientDirection _result;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(102)
inline void IGradient::PutDirection ( enum EGradientDirection Direction ) {
    HRESULT _hr = put_Direction(Direction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(103)
inline OLE_COLOR IGradient::GetStartColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_StartColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(104)
inline void IGradient::PutStartColor ( OLE_COLOR StartColor ) {
    HRESULT _hr = put_StartColor(StartColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(105)
inline OLE_COLOR IGradient::GetEndColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_EndColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(106)
inline void IGradient::PutEndColor ( OLE_COLOR EndColor ) {
    HRESULT _hr = put_EndColor(EndColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(107)
inline VARIANT_BOOL IGradient::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(108)
inline void IGradient::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(109)
inline OLE_COLOR IGradient::GetMidColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_MidColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(110)
inline void IGradient::PutMidColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_MidColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPage wrapper method implementations
//

#pragma implementation_key(111)
inline HRESULT IPage::Next ( ) {
    HRESULT _hr = raw_Next();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(112)
inline HRESULT IPage::Previous ( ) {
    HRESULT _hr = raw_Previous();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(113)
inline long IPage::GetMaxPointsPerPage ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxPointsPerPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(114)
inline void IPage::PutMaxPointsPerPage ( long MaxPointsPerPage ) {
    HRESULT _hr = put_MaxPointsPerPage(MaxPointsPerPage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(115)
inline long IPage::GetCurrent ( ) {
    long _result = 0;
    HRESULT _hr = get_Current(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(116)
inline void IPage::PutCurrent ( long Current ) {
    HRESULT _hr = put_Current(Current);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(117)
inline VARIANT_BOOL IPage::GetScaleLastPage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ScaleLastPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(118)
inline void IPage::PutScaleLastPage ( VARIANT_BOOL ScaleLastPage ) {
    HRESULT _hr = put_ScaleLastPage(ScaleLastPage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(119)
inline long IPage::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPanel wrapper method implementations
//

#pragma implementation_key(120)
inline VARIANT_BOOL IPanel::GetBackImageInside ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BackImageInside(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(121)
inline void IPanel::PutBackImageInside ( VARIANT_BOOL BackImageInside ) {
    HRESULT _hr = put_BackImageInside(BackImageInside);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(122)
inline enum EBackImageMode IPanel::GetBackImageMode ( ) {
    enum EBackImageMode _result;
    HRESULT _hr = get_BackImageMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(123)
inline void IPanel::PutBackImageMode ( enum EBackImageMode BackImageMode ) {
    HRESULT _hr = put_BackImageMode(BackImageMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(124)
inline enum EPanelBevel IPanel::GetBevelInner ( ) {
    enum EPanelBevel _result;
    HRESULT _hr = get_BevelInner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(125)
inline void IPanel::PutBevelInner ( enum EPanelBevel BevelInner ) {
    HRESULT _hr = put_BevelInner(BevelInner);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(126)
inline enum EPanelBevel IPanel::GetBevelOuter ( ) {
    enum EPanelBevel _result;
    HRESULT _hr = get_BevelOuter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(127)
inline void IPanel::PutBevelOuter ( enum EPanelBevel BevelOuter ) {
    HRESULT _hr = put_BevelOuter(BevelOuter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(128)
inline long IPanel::GetBevelWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_BevelWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(129)
inline void IPanel::PutBevelWidth ( long BevelWidth ) {
    HRESULT _hr = put_BevelWidth(BevelWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(130)
inline long IPanel::GetBevelOffset ( ) {
    long _result = 0;
    HRESULT _hr = get_BevelOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(131)
inline void IPanel::PutBevelOffset ( long BevelOffset ) {
    HRESULT _hr = put_BevelOffset(BevelOffset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(132)
inline enum EBorderStyle IPanel::GetBorderStyle ( ) {
    enum EBorderStyle _result;
    HRESULT _hr = get_BorderStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(133)
inline void IPanel::PutBorderStyle ( enum EBorderStyle BorderStyle ) {
    HRESULT _hr = put_BorderStyle(BorderStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(134)
inline OLE_COLOR IPanel::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(135)
inline void IPanel::PutColor ( OLE_COLOR Color ) {
    HRESULT _hr = put_Color(Color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(136)
inline IGradientPtr IPanel::GetGradient ( ) {
    struct IGradient * _result = 0;
    HRESULT _hr = get_Gradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGradientPtr(_result, false);
}

#pragma implementation_key(137)
inline long IPanel::GetMarginLeft ( ) {
    long _result = 0;
    HRESULT _hr = get_MarginLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(138)
inline void IPanel::PutMarginLeft ( long MarginLeft ) {
    HRESULT _hr = put_MarginLeft(MarginLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(139)
inline long IPanel::GetMarginTop ( ) {
    long _result = 0;
    HRESULT _hr = get_MarginTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(140)
inline void IPanel::PutMarginTop ( long MarginTop ) {
    HRESULT _hr = put_MarginTop(MarginTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(141)
inline long IPanel::GetMarginRight ( ) {
    long _result = 0;
    HRESULT _hr = get_MarginRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(142)
inline void IPanel::PutMarginRight ( long MarginRight ) {
    HRESULT _hr = put_MarginRight(MarginRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(143)
inline long IPanel::GetMarginBottom ( ) {
    long _result = 0;
    HRESULT _hr = get_MarginBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(144)
inline void IPanel::PutMarginBottom ( long MarginBottom ) {
    HRESULT _hr = put_MarginBottom(MarginBottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(145)
inline HRESULT IPanel::BackImageClear ( ) {
    HRESULT _hr = raw_BackImageClear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(146)
inline HRESULT IPanel::BackImageLoad ( _bstr_t FileName ) {
    HRESULT _hr = raw_BackImageLoad(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IValueList wrapper method implementations
//

#pragma implementation_key(147)
inline long IValueList::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(148)
inline VARIANT_BOOL IValueList::GetDateTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DateTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(149)
inline void IValueList::PutDateTime ( VARIANT_BOOL DateTime ) {
    HRESULT _hr = put_DateTime(DateTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(150)
inline double IValueList::GetFirst ( ) {
    double _result = 0;
    HRESULT _hr = get_First(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(151)
inline double IValueList::GetLast ( ) {
    double _result = 0;
    HRESULT _hr = get_Last(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(152)
inline double IValueList::GetMaximum ( ) {
    double _result = 0;
    HRESULT _hr = get_Maximum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(153)
inline double IValueList::GetMinimum ( ) {
    double _result = 0;
    HRESULT _hr = get_Minimum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(154)
inline enum EValueListOrder IValueList::GetOrder ( ) {
    enum EValueListOrder _result;
    HRESULT _hr = get_Order(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(155)
inline void IValueList::PutOrder ( enum EValueListOrder Order ) {
    HRESULT _hr = put_Order(Order);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(156)
inline double IValueList::GetTotal ( ) {
    double _result = 0;
    HRESULT _hr = get_Total(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(157)
inline double IValueList::GetTotalABS ( ) {
    double _result = 0;
    HRESULT _hr = get_TotalABS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(158)
inline double IValueList::GetValue ( long Index ) {
    double _result = 0;
    HRESULT _hr = get_Value(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(159)
inline void IValueList::PutValue ( long Index, double Value ) {
    HRESULT _hr = put_Value(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(160)
inline _bstr_t IValueList::GetValueSource ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ValueSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(161)
inline void IValueList::PutValueSource ( _bstr_t ValueSource ) {
    HRESULT _hr = put_ValueSource(ValueSource);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(162)
inline HRESULT IValueList::Delete ( long Index ) {
    HRESULT _hr = raw_Delete(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(163)
inline HRESULT IValueList::FillSequence ( ) {
    HRESULT _hr = raw_FillSequence();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(164)
inline long IValueList::Locate ( double SomeValue ) {
    long _result = 0;
    HRESULT _hr = raw_Locate(SomeValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(165)
inline HRESULT IValueList::Sort ( ) {
    HRESULT _hr = raw_Sort();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(166)
inline VARIANT_BOOL IValueList::GetModified ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Modified(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(167)
inline void IValueList::PutModified ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Modified(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(168)
inline double IValueList::GetTempValue ( ) {
    double _result = 0;
    HRESULT _hr = get_TempValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(169)
inline void IValueList::PutTempValue ( double Value ) {
    HRESULT _hr = put_TempValue(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(170)
inline _bstr_t IValueList::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IAverageFunction wrapper method implementations
//

#pragma implementation_key(171)
inline VARIANT_BOOL IAverageFunction::GetIncludeNulls ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeNulls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(172)
inline void IAverageFunction::PutIncludeNulls ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_IncludeNulls(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICurveFittingFunction wrapper method implementations
//

#pragma implementation_key(173)
inline long ICurveFittingFunction::GetPolyDegree ( ) {
    long _result = 0;
    HRESULT _hr = get_PolyDegree(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(174)
inline void ICurveFittingFunction::PutPolyDegree ( long PolyDegree ) {
    HRESULT _hr = put_PolyDegree(PolyDegree);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(175)
inline enum ETypeFitting ICurveFittingFunction::GetTypeFitting ( ) {
    enum ETypeFitting _result;
    HRESULT _hr = get_TypeFitting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(176)
inline void ICurveFittingFunction::PutTypeFitting ( enum ETypeFitting TypeFitting ) {
    HRESULT _hr = put_TypeFitting(TypeFitting);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(177)
inline long ICurveFittingFunction::GetFirstPoint ( ) {
    long _result = 0;
    HRESULT _hr = get_FirstPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(178)
inline void ICurveFittingFunction::PutFirstPoint ( long FirstPoint ) {
    HRESULT _hr = put_FirstPoint(FirstPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(179)
inline long ICurveFittingFunction::GetLastPoint ( ) {
    long _result = 0;
    HRESULT _hr = get_LastPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(180)
inline void ICurveFittingFunction::PutLastPoint ( long LastPoint ) {
    HRESULT _hr = put_LastPoint(LastPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(181)
inline long ICurveFittingFunction::GetFirstCalcPoint ( ) {
    long _result = 0;
    HRESULT _hr = get_FirstCalcPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(182)
inline void ICurveFittingFunction::PutFirstCalcPoint ( long FirstCalcPoint ) {
    HRESULT _hr = put_FirstCalcPoint(FirstCalcPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(183)
inline long ICurveFittingFunction::GetLastCalcPoint ( ) {
    long _result = 0;
    HRESULT _hr = get_LastCalcPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(184)
inline void ICurveFittingFunction::PutLastCalcPoint ( long LastCalcPoint ) {
    HRESULT _hr = put_LastCalcPoint(LastCalcPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(185)
inline double ICurveFittingFunction::GetAnswerVector ( long Index ) {
    double _result = 0;
    HRESULT _hr = get_AnswerVector(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(186)
inline double ICurveFittingFunction::GetCurveYValue ( double X ) {
    double _result = 0;
    HRESULT _hr = raw_GetCurveYValue(X, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IExpAvgFunction wrapper method implementations
//

#pragma implementation_key(187)
inline double IExpAvgFunction::GetWeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Weight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(188)
inline void IExpAvgFunction::PutWeight ( double Weight ) {
    HRESULT _hr = put_Weight(Weight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IMovingAvgFunction wrapper method implementations
//

#pragma implementation_key(189)
inline VARIANT_BOOL IMovingAvgFunction::GetWeighted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Weighted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(190)
inline void IMovingAvgFunction::PutWeighted ( VARIANT_BOOL Weighted ) {
    HRESULT _hr = put_Weighted(Weighted);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IChartFont wrapper method implementations
//

#pragma implementation_key(191)
inline _bstr_t IChartFont::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(192)
inline void IChartFont::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(193)
inline long IChartFont::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(194)
inline void IChartFont::PutSize ( long Size ) {
    HRESULT _hr = put_Size(Size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(195)
inline VARIANT_BOOL IChartFont::GetBold ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Bold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(196)
inline void IChartFont::PutBold ( VARIANT_BOOL Bold ) {
    HRESULT _hr = put_Bold(Bold);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(197)
inline VARIANT_BOOL IChartFont::GetItalic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Italic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(198)
inline void IChartFont::PutItalic ( VARIANT_BOOL Italic ) {
    HRESULT _hr = put_Italic(Italic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(199)
inline VARIANT_BOOL IChartFont::GetUnderline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Underline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(200)
inline void IChartFont::PutUnderline ( VARIANT_BOOL Underline ) {
    HRESULT _hr = put_Underline(Underline);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(201)
inline VARIANT_BOOL IChartFont::GetStrikethrough ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Strikethrough(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(202)
inline void IChartFont::PutStrikethrough ( VARIANT_BOOL Strikethrough ) {
    HRESULT _hr = put_Strikethrough(Strikethrough);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(203)
inline short IChartFont::GetCharset ( ) {
    short _result = 0;
    HRESULT _hr = get_Charset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(204)
inline void IChartFont::PutCharset ( short Charset ) {
    HRESULT _hr = put_Charset(Charset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(205)
inline OLE_COLOR IChartFont::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(206)
inline void IChartFont::PutColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_Color(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(207)
inline long IChartFont::GetHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(208)
inline void IChartFont::PutHeight ( long Value ) {
    HRESULT _hr = put_Height(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(209)
inline long IChartFont::GetPixelsPerInch ( ) {
    long _result = 0;
    HRESULT _hr = get_PixelsPerInch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPieOtherSlice wrapper method implementations
//

#pragma implementation_key(210)
inline enum EPieOtherStyle IPieOtherSlice::GetStyle ( ) {
    enum EPieOtherStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(211)
inline void IPieOtherSlice::PutStyle ( enum EPieOtherStyle Value ) {
    HRESULT _hr = put_Style(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(212)
inline _bstr_t IPieOtherSlice::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(213)
inline void IPieOtherSlice::PutText ( _bstr_t Value ) {
    HRESULT _hr = put_Text(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(214)
inline double IPieOtherSlice::GetValue ( ) {
    double _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(215)
inline void IPieOtherSlice::PutValue ( double Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IExplodedSlices wrapper method implementations
//

#pragma implementation_key(216)
inline long IExplodedSlices::GetValue ( long Index ) {
    long _result = 0;
    HRESULT _hr = get_Value(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(217)
inline void IExplodedSlices::PutValue ( long Index, long Value ) {
    HRESULT _hr = put_Value(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICircleLabels wrapper method implementations
//

#pragma implementation_key(218)
inline VARIANT_BOOL ICircleLabels::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(219)
inline void ICircleLabels::PutVisible ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Visible(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(220)
inline IChartFontPtr ICircleLabels::GetFont ( ) {
    struct IChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChartFontPtr(_result, false);
}

#pragma implementation_key(221)
inline VARIANT_BOOL ICircleLabels::GetRotated ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Rotated(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(222)
inline void ICircleLabels::PutRotated ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Rotated(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(223)
inline _bstr_t ICircleLabels::GetDegreeSymbol ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DegreeSymbol(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(224)
inline void ICircleLabels::PutDegreeSymbol ( _bstr_t Value ) {
    HRESULT _hr = put_DegreeSymbol(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IStdDeviationFunction wrapper method implementations
//

#pragma implementation_key(225)
inline VARIANT_BOOL IStdDeviationFunction::GetComplete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Complete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(226)
inline void IStdDeviationFunction::PutComplete ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Complete(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IEnvironment wrapper method implementations
//

#pragma implementation_key(227)
inline VARIANT_BOOL IEnvironment::GetNoPromptDBConnect ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NoPromptDBConnect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(228)
inline void IEnvironment::PutNoPromptDBConnect ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_NoPromptDBConnect(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(229)
inline VARIANT_BOOL IEnvironment::GetIEPrintWithPage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IEPrintWithPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(230)
inline void IEnvironment::PutIEPrintWithPage ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_IEPrintWithPage(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(231)
inline HRESULT IEnvironment::InternalRepaint ( ) {
    HRESULT _hr = raw_InternalRepaint();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(232)
inline VARIANT_BOOL IEnvironment::GetMouseWheelScroll ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MouseWheelScroll(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(233)
inline void IEnvironment::PutMouseWheelScroll ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_MouseWheelScroll(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(234)
inline _bstr_t IEnvironment::GetDecimalSeparator ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DecimalSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// dispinterface ITeeCommanderEvents wrapper method implementations
//

#pragma implementation_key(235)
inline HRESULT ITeeCommanderEvents::OnEditedChart ( ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface ITeeListBoxEvents wrapper method implementations
//

#pragma implementation_key(236)
inline HRESULT ITeeListBoxEvents::OnDblClickSeries ( long SeriesIndex ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", SeriesIndex);
}

//
// interface ITeePoint2D wrapper method implementations
//

#pragma implementation_key(237)
inline double ITeePoint2D::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(238)
inline void ITeePoint2D::PutX ( double Value ) {
    HRESULT _hr = put_X(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(239)
inline double ITeePoint2D::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(240)
inline void ITeePoint2D::PutY ( double Value ) {
    HRESULT _hr = put_Y(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISeriesMarkPosition wrapper method implementations
//

#pragma implementation_key(241)
inline ITeePoint2DPtr ISeriesMarkPosition::GetArrowFrom ( ) {
    struct ITeePoint2D * _result = 0;
    HRESULT _hr = get_ArrowFrom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeePoint2DPtr(_result, false);
}

#pragma implementation_key(242)
inline ITeePoint2DPtr ISeriesMarkPosition::GetArrowTo ( ) {
    struct ITeePoint2D * _result = 0;
    HRESULT _hr = get_ArrowTo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeePoint2DPtr(_result, false);
}

#pragma implementation_key(243)
inline VARIANT_BOOL ISeriesMarkPosition::GetCustom ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Custom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(244)
inline void ISeriesMarkPosition::PutCustom ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Custom(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(245)
inline long ISeriesMarkPosition::GetHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(246)
inline void ISeriesMarkPosition::PutHeight ( long Value ) {
    HRESULT _hr = put_Height(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(247)
inline ITeePoint2DPtr ISeriesMarkPosition::GetLeftTop ( ) {
    struct ITeePoint2D * _result = 0;
    HRESULT _hr = get_LeftTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeePoint2DPtr(_result, false);
}

#pragma implementation_key(248)
inline long ISeriesMarkPosition::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(249)
inline void ISeriesMarkPosition::PutWidth ( long Value ) {
    HRESULT _hr = put_Width(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISeriesMarksPositions wrapper method implementations
//

#pragma implementation_key(250)
inline ISeriesMarkPositionPtr ISeriesMarksPositions::GetPosition ( long Index ) {
    struct ISeriesMarkPosition * _result = 0;
    HRESULT _hr = get_Position(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISeriesMarkPositionPtr(_result, false);
}

#pragma implementation_key(251)
inline HRESULT ISeriesMarksPositions::Automatic ( long Index ) {
    HRESULT _hr = raw_Automatic(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ITeePoint3D wrapper method implementations
//

#pragma implementation_key(252)
inline double ITeePoint3D::GetZ ( ) {
    double _result = 0;
    HRESULT _hr = get_Z(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(253)
inline void ITeePoint3D::PutZ ( double Value ) {
    HRESULT _hr = put_Z(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITeeEditorShowPages wrapper method implementations
//

#pragma implementation_key(254)
inline VARIANT_BOOL ITeeEditorShowPages::GetMain ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Main(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(255)
inline void ITeeEditorShowPages::PutMain ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Main(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(256)
inline VARIANT_BOOL ITeeEditorShowPages::GetGeneral ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_General(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(257)
inline void ITeeEditorShowPages::PutGeneral ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_General(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(258)
inline VARIANT_BOOL ITeeEditorShowPages::GetAxis ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Axis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(259)
inline void ITeeEditorShowPages::PutAxis ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Axis(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(260)
inline VARIANT_BOOL ITeeEditorShowPages::GetTitles ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Titles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(261)
inline void ITeeEditorShowPages::PutTitles ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Titles(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(262)
inline VARIANT_BOOL ITeeEditorShowPages::GetLegend ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Legend(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(263)
inline void ITeeEditorShowPages::PutLegend ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Legend(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(264)
inline VARIANT_BOOL ITeeEditorShowPages::GetPanel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Panel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(265)
inline void ITeeEditorShowPages::PutPanel ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Panel(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(266)
inline VARIANT_BOOL ITeeEditorShowPages::GetPaging ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Paging(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(267)
inline void ITeeEditorShowPages::PutPaging ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Paging(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(268)
inline VARIANT_BOOL ITeeEditorShowPages::GetWalls ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Walls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(269)
inline void ITeeEditorShowPages::PutWalls ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Walls(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(270)
inline VARIANT_BOOL ITeeEditorShowPages::GetAspect ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Aspect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(271)
inline void ITeeEditorShowPages::PutAspect ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Aspect(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(272)
inline VARIANT_BOOL ITeeEditorShowPages::GetSeriesGeneral ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SeriesGeneral(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(273)
inline void ITeeEditorShowPages::PutSeriesGeneral ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_SeriesGeneral(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(274)
inline VARIANT_BOOL ITeeEditorShowPages::GetSeriesMarks ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SeriesMarks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(275)
inline void ITeeEditorShowPages::PutSeriesMarks ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_SeriesMarks(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(276)
inline VARIANT_BOOL ITeeEditorShowPages::GetTools ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Tools(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(277)
inline void ITeeEditorShowPages::PutTools ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Tools(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(278)
inline VARIANT_BOOL ITeeEditorShowPages::GetSeriesData ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SeriesData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(279)
inline void ITeeEditorShowPages::PutSeriesData ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_SeriesData(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(280)
inline VARIANT_BOOL ITeeEditorShowPages::GetExportDialog ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExportDialog(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(281)
inline void ITeeEditorShowPages::PutExportDialog ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ExportDialog(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(282)
inline VARIANT_BOOL ITeeEditorShowPages::GetPrintPreview ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintPreview(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(283)
inline void ITeeEditorShowPages::PutPrintPreview ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_PrintPreview(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(284)
inline VARIANT_BOOL ITeeEditorShowPages::GetOpenGL ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OpenGL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(285)
inline void ITeeEditorShowPages::PutOpenGL ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_OpenGL(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITeeEditorOptions wrapper method implementations
//

#pragma implementation_key(286)
inline VARIANT_BOOL ITeeEditorOptions::GetAdd ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(287)
inline void ITeeEditorOptions::PutAdd ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Add(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(288)
inline VARIANT_BOOL ITeeEditorOptions::GetDelete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(289)
inline void ITeeEditorOptions::PutDelete ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Delete(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(290)
inline VARIANT_BOOL ITeeEditorOptions::GetChange ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Change(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(291)
inline void ITeeEditorOptions::PutChange ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Change(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(292)
inline VARIANT_BOOL ITeeEditorOptions::GetClone ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(293)
inline void ITeeEditorOptions::PutClone ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Clone(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(294)
inline VARIANT_BOOL ITeeEditorOptions::GetDataSource ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DataSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(295)
inline void ITeeEditorOptions::PutDataSource ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_DataSource(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(296)
inline VARIANT_BOOL ITeeEditorOptions::GetTitle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(297)
inline void ITeeEditorOptions::PutTitle ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Title(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(298)
inline VARIANT_BOOL ITeeEditorOptions::GetHelp ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Help(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(299)
inline void ITeeEditorOptions::PutHelp ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Help(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITeePreviewerOptions wrapper method implementations
//

#pragma implementation_key(300)
inline VARIANT_BOOL ITeePreviewerOptions::GetChangePrinter ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ChangePrinter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(301)
inline void ITeePreviewerOptions::PutChangePrinter ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ChangePrinter(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(302)
inline VARIANT_BOOL ITeePreviewerOptions::GetSetupPrinter ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SetupPrinter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(303)
inline void ITeePreviewerOptions::PutSetupPrinter ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_SetupPrinter(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(304)
inline VARIANT_BOOL ITeePreviewerOptions::GetResizeImage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ResizeImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(305)
inline void ITeePreviewerOptions::PutResizeImage ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ResizeImage(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(306)
inline VARIANT_BOOL ITeePreviewerOptions::GetMoveImage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MoveImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(307)
inline void ITeePreviewerOptions::PutMoveImage ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_MoveImage(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(308)
inline VARIANT_BOOL ITeePreviewerOptions::GetChangeDetail ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ChangeDetail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(309)
inline void ITeePreviewerOptions::PutChangeDetail ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ChangeDetail(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(310)
inline VARIANT_BOOL ITeePreviewerOptions::GetChangePaperOrientation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ChangePaperOrientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(311)
inline void ITeePreviewerOptions::PutChangePaperOrientation ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ChangePaperOrientation(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(312)
inline VARIANT_BOOL ITeePreviewerOptions::GetChangeMargins ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ChangeMargins(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(313)
inline void ITeePreviewerOptions::PutChangeMargins ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ChangeMargins(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(314)
inline VARIANT_BOOL ITeePreviewerOptions::GetDragImage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DragImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(315)
inline void ITeePreviewerOptions::PutDragImage ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_DragImage(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(316)
inline VARIANT_BOOL ITeePreviewerOptions::GetPrintPanel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintPanel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(317)
inline void ITeePreviewerOptions::PutPrintPanel ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_PrintPanel(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(318)
inline VARIANT_BOOL ITeePreviewerOptions::GetAsBitmap ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AsBitmap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(319)
inline void ITeePreviewerOptions::PutAsBitmap ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AsBitmap(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITeeOpenGL wrapper method implementations
//

#pragma implementation_key(320)
inline VARIANT_BOOL ITeeOpenGL::GetActive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(321)
inline void ITeeOpenGL::PutActive ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Active(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(322)
inline long ITeeOpenGL::GetAmbientLight ( ) {
    long _result = 0;
    HRESULT _hr = get_AmbientLight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(323)
inline void ITeeOpenGL::PutAmbientLight ( long Value ) {
    HRESULT _hr = put_AmbientLight(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(324)
inline ITeePoint3DPtr ITeeOpenGL::GetLightPosition ( ) {
    struct ITeePoint3D * _result = 0;
    HRESULT _hr = get_LightPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeePoint3DPtr(_result, false);
}

#pragma implementation_key(325)
inline OLE_COLOR ITeeOpenGL::GetLightColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_LightColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(326)
inline void ITeeOpenGL::PutLightColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_LightColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(327)
inline VARIANT_BOOL ITeeOpenGL::GetFontOutlines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FontOutlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(328)
inline void ITeeOpenGL::PutFontOutlines ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_FontOutlines(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(329)
inline VARIANT_BOOL ITeeOpenGL::GetShadeQuality ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShadeQuality(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(330)
inline void ITeeOpenGL::PutShadeQuality ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ShadeQuality(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAspect wrapper method implementations
//

#pragma implementation_key(331)
inline VARIANT_BOOL IAspect::GetApplyZOrder ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ApplyZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(332)
inline void IAspect::PutApplyZOrder ( VARIANT_BOOL ApplyZOrder ) {
    HRESULT _hr = put_ApplyZOrder(ApplyZOrder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(333)
inline long IAspect::GetChart3DPercent ( ) {
    long _result = 0;
    HRESULT _hr = get_Chart3DPercent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(334)
inline void IAspect::PutChart3DPercent ( long Chart3DPercent ) {
    HRESULT _hr = put_Chart3DPercent(Chart3DPercent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(335)
inline long IAspect::GetHeight3D ( ) {
    long _result = 0;
    HRESULT _hr = get_Height3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(336)
inline VARIANT_BOOL IAspect::GetView3D ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_View3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(337)
inline void IAspect::PutView3D ( VARIANT_BOOL View3D ) {
    HRESULT _hr = put_View3D(View3D);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(338)
inline long IAspect::GetWidth3D ( ) {
    long _result = 0;
    HRESULT _hr = get_Width3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(339)
inline long IAspect::GetRotation ( ) {
    long _result = 0;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(340)
inline void IAspect::PutRotation ( long RotationX ) {
    HRESULT _hr = put_Rotation(RotationX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(341)
inline long IAspect::GetElevation ( ) {
    long _result = 0;
    HRESULT _hr = get_Elevation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(342)
inline void IAspect::PutElevation ( long RotationY ) {
    HRESULT _hr = put_Elevation(RotationY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(343)
inline long IAspect::GetZoom ( ) {
    long _result = 0;
    HRESULT _hr = get_Zoom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(344)
inline void IAspect::PutZoom ( long Zoom ) {
    HRESULT _hr = put_Zoom(Zoom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(345)
inline VARIANT_BOOL IAspect::GetZoomText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ZoomText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(346)
inline void IAspect::PutZoomText ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ZoomText(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(347)
inline long IAspect::GetHorizOffset ( ) {
    long _result = 0;
    HRESULT _hr = get_HorizOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(348)
inline void IAspect::PutHorizOffset ( long Value ) {
    HRESULT _hr = put_HorizOffset(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(349)
inline long IAspect::GetVertOffset ( ) {
    long _result = 0;
    HRESULT _hr = get_VertOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(350)
inline void IAspect::PutVertOffset ( long Value ) {
    HRESULT _hr = put_VertOffset(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(351)
inline long IAspect::GetTilt ( ) {
    long _result = 0;
    HRESULT _hr = get_Tilt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(352)
inline void IAspect::PutTilt ( long Value ) {
    HRESULT _hr = put_Tilt(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(353)
inline VARIANT_BOOL IAspect::GetOrthogonal ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Orthogonal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(354)
inline void IAspect::PutOrthogonal ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Orthogonal(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(355)
inline long IAspect::GetPerspective ( ) {
    long _result = 0;
    HRESULT _hr = get_Perspective(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(356)
inline void IAspect::PutPerspective ( long Value ) {
    HRESULT _hr = put_Perspective(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(357)
inline ITeeOpenGLPtr IAspect::GetOpenGL ( ) {
    struct ITeeOpenGL * _result = 0;
    HRESULT _hr = get_OpenGL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeOpenGLPtr(_result, false);
}

#pragma implementation_key(358)
inline long IAspect::GetOrthoAngle ( ) {
    long _result = 0;
    HRESULT _hr = get_OrthoAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(359)
inline void IAspect::PutOrthoAngle ( long Value ) {
    HRESULT _hr = put_OrthoAngle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICustomToolSeries wrapper method implementations
//

#pragma implementation_key(360)
inline _variant_t ICustomToolSeries::GetSeries ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Series(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(361)
inline void ICustomToolSeries::PutSeries ( const _variant_t & Value ) {
    HRESULT _hr = put_Series(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICustomToolAxis wrapper method implementations
//

#pragma implementation_key(362)
inline _variant_t ICustomToolAxis::GetAxis ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Axis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(363)
inline void ICustomToolAxis::PutAxis ( const _variant_t & Value ) {
    HRESULT _hr = put_Axis(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IRotateTool wrapper method implementations
//

#pragma implementation_key(364)
inline VARIANT_BOOL IRotateTool::GetActive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(365)
inline void IRotateTool::PutActive ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Active(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(366)
inline enum EMouseButton IRotateTool::GetButton ( ) {
    enum EMouseButton _result;
    HRESULT _hr = get_Button(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(367)
inline void IRotateTool::PutButton ( enum EMouseButton Value ) {
    HRESULT _hr = put_Button(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(368)
inline _bstr_t IRotateTool::Description ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ILegendSymbol wrapper method implementations
//

#pragma implementation_key(369)
inline VARIANT_BOOL ILegendSymbol::GetContinuous ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Continuous(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(370)
inline void ILegendSymbol::PutContinuous ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Continuous(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(371)
inline enum ELegendSymbolPosition ILegendSymbol::GetPosition ( ) {
    enum ELegendSymbolPosition _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(372)
inline void ILegendSymbol::PutPosition ( enum ELegendSymbolPosition Value ) {
    HRESULT _hr = put_Position(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(373)
inline long ILegendSymbol::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(374)
inline void ILegendSymbol::PutWidth ( long Value ) {
    HRESULT _hr = put_Width(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(375)
inline enum ELegendSymbolSize ILegendSymbol::GetWidthUnits ( ) {
    enum ELegendSymbolSize _result;
    HRESULT _hr = get_WidthUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(376)
inline void ILegendSymbol::PutWidthUnits ( enum ELegendSymbolSize Value ) {
    HRESULT _hr = put_WidthUnits(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITeeShadow wrapper method implementations
//

#pragma implementation_key(377)
inline long ITeeShadow::GetHorizSize ( ) {
    long _result = 0;
    HRESULT _hr = get_HorizSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(378)
inline void ITeeShadow::PutHorizSize ( long Value ) {
    HRESULT _hr = put_HorizSize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(379)
inline long ITeeShadow::GetVertSize ( ) {
    long _result = 0;
    HRESULT _hr = get_VertSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(380)
inline void ITeeShadow::PutVertSize ( long Value ) {
    HRESULT _hr = put_VertSize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(381)
inline OLE_COLOR ITeeShadow::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(382)
inline void ITeeShadow::PutColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_Color(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITeeFont wrapper method implementations
//

#pragma implementation_key(383)
inline long ITeeFont::GetInterCharSize ( ) {
    long _result = 0;
    HRESULT _hr = get_InterCharSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(384)
inline void ITeeFont::PutInterCharSize ( long Value ) {
    HRESULT _hr = put_InterCharSize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(385)
inline ITeeShadowPtr ITeeFont::GetShadow ( ) {
    struct ITeeShadow * _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeShadowPtr(_result, false);
}

//
// interface IAxisTitle wrapper method implementations
//

#pragma implementation_key(386)
inline long IAxisTitle::GetAngle ( ) {
    long _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(387)
inline void IAxisTitle::PutAngle ( long Angle ) {
    HRESULT _hr = put_Angle(Angle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(388)
inline _bstr_t IAxisTitle::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(389)
inline void IAxisTitle::PutCaption ( _bstr_t Caption ) {
    HRESULT _hr = put_Caption(Caption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(390)
inline ITeeFontPtr IAxisTitle::GetFont ( ) {
    struct ITeeFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeFontPtr(_result, false);
}

#pragma implementation_key(391)
inline VARIANT_BOOL IAxisTitle::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(392)
inline void IAxisTitle::PutVisible ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Visible(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// dispinterface ITeePreviewPanelEvents wrapper method implementations
//

#pragma implementation_key(393)
inline HRESULT ITeePreviewPanelEvents::OnChangeMargins ( VARIANT_BOOL DisableProportional, long Left, long Top, long Right, long Bottom ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x000b\x0003\x0003\x0003\x0003", DisableProportional, Left, Top, Right, Bottom);
    return _result;
}

//
// dispinterface IChartGridEvents wrapper method implementations
//

#pragma implementation_key(394)
inline HRESULT IChartGridEvents::OnClick ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

//
// interface IRSIFunction wrapper method implementations
//

#pragma implementation_key(395)
inline enum ERSIStyle IRSIFunction::GetStyle ( ) {
    enum ERSIStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(396)
inline void IRSIFunction::PutStyle ( enum ERSIStyle Value ) {
    HRESULT _hr = put_Style(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAxisLabels wrapper method implementations
//

#pragma implementation_key(397)
inline long IAxisLabels::GetAngle ( ) {
    long _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(398)
inline void IAxisLabels::PutAngle ( long Angle ) {
    HRESULT _hr = put_Angle(Angle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(399)
inline VARIANT_BOOL IAxisLabels::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(400)
inline void IAxisLabels::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(401)
inline _bstr_t IAxisLabels::GetDateTimeFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DateTimeFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(402)
inline void IAxisLabels::PutDateTimeFormat ( _bstr_t DateTimeFormat ) {
    HRESULT _hr = put_DateTimeFormat(DateTimeFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(403)
inline ITeeFontPtr IAxisLabels::GetFont ( ) {
    struct ITeeFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeFontPtr(_result, false);
}

#pragma implementation_key(404)
inline _bstr_t IAxisLabels::FormattedValue ( double SomeValue ) {
    BSTR _result = 0;
    HRESULT _hr = raw_FormattedValue(SomeValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(405)
inline long IAxisLabels::GetPos ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetPos(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(406)
inline long IAxisLabels::Height ( double SomeValue ) {
    long _result = 0;
    HRESULT _hr = raw_Height(SomeValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(407)
inline long IAxisLabels::MaxWidth ( ) {
    long _result = 0;
    HRESULT _hr = raw_MaxWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(408)
inline VARIANT_BOOL IAxisLabels::GetOnAxis ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OnAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(409)
inline void IAxisLabels::PutOnAxis ( VARIANT_BOOL OnAxis ) {
    HRESULT _hr = put_OnAxis(OnAxis);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(410)
inline VARIANT_BOOL IAxisLabels::GetRoundFirstLabel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RoundFirstLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(411)
inline void IAxisLabels::PutRoundFirstLabel ( VARIANT_BOOL RoundFirstLabel ) {
    HRESULT _hr = put_RoundFirstLabel(RoundFirstLabel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(412)
inline long IAxisLabels::GetSeparation ( ) {
    long _result = 0;
    HRESULT _hr = get_Separation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(413)
inline void IAxisLabels::PutSeparation ( long Separation ) {
    HRESULT _hr = put_Separation(Separation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(414)
inline long IAxisLabels::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(415)
inline void IAxisLabels::PutSize ( long Size ) {
    HRESULT _hr = put_Size(Size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(416)
inline enum EAxisLabelStyle IAxisLabels::GetStyle ( ) {
    enum EAxisLabelStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(417)
inline void IAxisLabels::PutStyle ( enum EAxisLabelStyle Style ) {
    HRESULT _hr = put_Style(Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(418)
inline _bstr_t IAxisLabels::GetValueFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ValueFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(419)
inline void IAxisLabels::PutValueFormat ( _bstr_t ValueFormat ) {
    HRESULT _hr = put_ValueFormat(ValueFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(420)
inline long IAxisLabels::Width ( double SomeValue ) {
    long _result = 0;
    HRESULT _hr = raw_Width(SomeValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(421)
inline VARIANT_BOOL IAxisLabels::GetMultiline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Multiline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(422)
inline void IAxisLabels::PutMultiline ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Multiline(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(423)
inline HRESULT IAxisLabels::TeeSplitInLines ( BSTR * St, _bstr_t Separator ) {
    HRESULT _hr = raw_TeeSplitInLines(St, Separator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(424)
inline VARIANT_BOOL IAxisLabels::GetExponent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Exponent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(425)
inline void IAxisLabels::PutExponent ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Exponent(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(426)
inline enum EAxisLabelAlign IAxisLabels::GetAlign ( ) {
    enum EAxisLabelAlign _result;
    HRESULT _hr = get_Align(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(427)
inline void IAxisLabels::PutAlign ( enum EAxisLabelAlign Value ) {
    HRESULT _hr = put_Align(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IContourLevel wrapper method implementations
//

#pragma implementation_key(428)
inline OLE_COLOR IContourLevel::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(429)
inline void IContourLevel::PutColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_Color(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(430)
inline double IContourLevel::GetUpToValue ( ) {
    double _result = 0;
    HRESULT _hr = get_UpToValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(431)
inline void IContourLevel::PutUpToValue ( double Value ) {
    HRESULT _hr = put_UpToValue(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IContourLevels wrapper method implementations
//

#pragma implementation_key(432)
inline IContourLevelPtr IContourLevels::GetItems ( long Index ) {
    struct IContourLevel * _result = 0;
    HRESULT _hr = get_Items(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IContourLevelPtr(_result, false);
}

//
// interface IPyramidSeries wrapper method implementations
//

#pragma implementation_key(433)
inline long IPyramidSeries::GetSizePercent ( ) {
    long _result = 0;
    HRESULT _hr = get_SizePercent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(434)
inline void IPyramidSeries::PutSizePercent ( long Value ) {
    HRESULT _hr = put_SizePercent(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITeePanelsList wrapper method implementations
//

#pragma implementation_key(435)
inline HRESULT ITeePanelsList::Delete ( long Index ) {
    HRESULT _hr = raw_Delete(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(436)
inline HRESULT ITeePanelsList::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(437)
inline long ITeePanelsList::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ITeeCustomShape wrapper method implementations
//

#pragma implementation_key(438)
inline OLE_COLOR ITeeCustomShape::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(439)
inline void ITeeCustomShape::PutColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_Color(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(440)
inline ITeeFontPtr ITeeCustomShape::GetFont ( ) {
    struct ITeeFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeFontPtr(_result, false);
}

#pragma implementation_key(441)
inline IGradientPtr ITeeCustomShape::GetGradient ( ) {
    struct IGradient * _result = 0;
    HRESULT _hr = get_Gradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGradientPtr(_result, false);
}

#pragma implementation_key(442)
inline long ITeeCustomShape::GetShadowSize ( ) {
    long _result = 0;
    HRESULT _hr = get_ShadowSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(443)
inline void ITeeCustomShape::PutShadowSize ( long Value ) {
    HRESULT _hr = put_ShadowSize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(444)
inline OLE_COLOR ITeeCustomShape::GetShadowColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ShadowColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(445)
inline void ITeeCustomShape::PutShadowColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_ShadowColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(446)
inline VARIANT_BOOL ITeeCustomShape::GetTransparent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Transparent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(447)
inline void ITeeCustomShape::PutTransparent ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Transparent(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(448)
inline enum EChartObjectShapeStyle ITeeCustomShape::GetShapeStyle ( ) {
    enum EChartObjectShapeStyle _result;
    HRESULT _hr = get_ShapeStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(449)
inline void ITeeCustomShape::PutShapeStyle ( enum EChartObjectShapeStyle Value ) {
    HRESULT _hr = put_ShapeStyle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(450)
inline long ITeeCustomShape::GetTransparency ( ) {
    long _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(451)
inline void ITeeCustomShape::PutTransparency ( long Value ) {
    HRESULT _hr = put_Transparency(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(452)
inline struct TeeRect ITeeCustomShape::GetShapeBounds ( ) {
    struct TeeRect _result;
    HRESULT _hr = get_ShapeBounds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(453)
inline enum EPanelBevel ITeeCustomShape::GetBevel ( ) {
    enum EPanelBevel _result;
    HRESULT _hr = get_Bevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(454)
inline void ITeeCustomShape::PutBevel ( enum EPanelBevel Value ) {
    HRESULT _hr = put_Bevel(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(455)
inline long ITeeCustomShape::GetBevelWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_BevelWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(456)
inline void ITeeCustomShape::PutBevelWidth ( long Value ) {
    HRESULT _hr = put_BevelWidth(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITeeShapePosition wrapper method implementations
//

#pragma implementation_key(457)
inline VARIANT_BOOL ITeeShapePosition::GetCustomPosition ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CustomPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(458)
inline void ITeeShapePosition::PutCustomPosition ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_CustomPosition(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(459)
inline long ITeeShapePosition::GetLeft ( ) {
    long _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(460)
inline void ITeeShapePosition::PutLeft ( long Value ) {
    HRESULT _hr = put_Left(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(461)
inline long ITeeShapePosition::GetTop ( ) {
    long _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(462)
inline void ITeeShapePosition::PutTop ( long Value ) {
    HRESULT _hr = put_Top(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IExportFormat wrapper method implementations
//

#pragma implementation_key(463)
inline long IExportFormat::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(464)
inline void IExportFormat::PutWidth ( long Value ) {
    HRESULT _hr = put_Width(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(465)
inline long IExportFormat::GetHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(466)
inline void IExportFormat::PutHeight ( long Value ) {
    HRESULT _hr = put_Height(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(467)
inline HRESULT IExportFormat::SaveToFile ( _bstr_t FileName ) {
    HRESULT _hr = raw_SaveToFile(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(468)
inline _variant_t IExportFormat::SaveToStream ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SaveToStream(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IJPEGExport wrapper method implementations
//

#pragma implementation_key(469)
inline VARIANT_BOOL IJPEGExport::GetGrayScale ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GrayScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(470)
inline void IJPEGExport::PutGrayScale ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_GrayScale(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(471)
inline long IJPEGExport::GetCompressionQuality ( ) {
    long _result = 0;
    HRESULT _hr = get_CompressionQuality(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(472)
inline void IJPEGExport::PutCompressionQuality ( long Value ) {
    HRESULT _hr = put_CompressionQuality(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPNGExport wrapper method implementations
//

#pragma implementation_key(473)
inline long IPNGExport::GetCompressionLevel ( ) {
    long _result = 0;
    HRESULT _hr = get_CompressionLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(474)
inline void IPNGExport::PutCompressionLevel ( long Value ) {
    HRESULT _hr = put_CompressionLevel(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGIFExport wrapper method implementations
//

#pragma implementation_key(475)
inline enum EGIFCompression IGIFExport::GetCompression ( ) {
    enum EGIFCompression _result;
    HRESULT _hr = get_Compression(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(476)
inline void IGIFExport::PutCompression ( enum EGIFCompression Value ) {
    HRESULT _hr = put_Compression(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(477)
inline enum EGIFDitherMode IGIFExport::GetDitherMode ( ) {
    enum EGIFDitherMode _result;
    HRESULT _hr = get_DitherMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(478)
inline void IGIFExport::PutDitherMode ( enum EGIFDitherMode Value ) {
    HRESULT _hr = put_DitherMode(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(479)
inline enum EGIFColorReduction IGIFExport::GetColorReduction ( ) {
    enum EGIFColorReduction _result;
    HRESULT _hr = get_ColorReduction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(480)
inline void IGIFExport::PutColorReduction ( enum EGIFColorReduction Value ) {
    HRESULT _hr = put_ColorReduction(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IMetafileExport wrapper method implementations
//

#pragma implementation_key(481)
inline VARIANT_BOOL IMetafileExport::GetEnhanced ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enhanced(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(482)
inline void IMetafileExport::PutEnhanced ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Enhanced(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IBMPExport wrapper method implementations
//

#pragma implementation_key(483)
inline enum EPixelFormat IBMPExport::GetColors ( ) {
    enum EPixelFormat _result;
    HRESULT _hr = get_Colors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(484)
inline void IBMPExport::PutColors ( enum EPixelFormat Value ) {
    HRESULT _hr = put_Colors(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(485)
inline VARIANT_BOOL IBMPExport::GetMonochrome ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Monochrome(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(486)
inline void IBMPExport::PutMonochrome ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Monochrome(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IChartImageTool wrapper method implementations
//

#pragma implementation_key(487)
inline HRESULT IChartImageTool::ImageLoad ( _bstr_t FileName ) {
    HRESULT _hr = raw_ImageLoad(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(488)
inline HRESULT IChartImageTool::ImageClear ( ) {
    HRESULT _hr = raw_ImageClear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IMarksTipTool wrapper method implementations
//

#pragma implementation_key(489)
inline enum EMarkToolMouseAction IMarksTipTool::GetMouseAction ( ) {
    enum EMarkToolMouseAction _result;
    HRESULT _hr = get_MouseAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(490)
inline void IMarksTipTool::PutMouseAction ( enum EMarkToolMouseAction Value ) {
    HRESULT _hr = put_MouseAction(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(491)
inline enum EMarkStyle IMarksTipTool::GetStyle ( ) {
    enum EMarkStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(492)
inline void IMarksTipTool::PutStyle ( enum EMarkStyle Value ) {
    HRESULT _hr = put_Style(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(493)
inline long IMarksTipTool::GetDelay ( ) {
    long _result = 0;
    HRESULT _hr = get_Delay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(494)
inline void IMarksTipTool::PutDelay ( long Value ) {
    HRESULT _hr = put_Delay(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IRMSFunction wrapper method implementations
//

#pragma implementation_key(495)
inline VARIANT_BOOL IRMSFunction::GetComplete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Complete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(496)
inline void IRMSFunction::PutComplete ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Complete(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface INativeExport wrapper method implementations
//

#pragma implementation_key(497)
inline HRESULT INativeExport::SaveToFile ( _bstr_t FileName, VARIANT_BOOL IncludeData ) {
    HRESULT _hr = raw_SaveToFile(FileName, IncludeData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(498)
inline _variant_t INativeExport::SaveToStream ( VARIANT_BOOL IncludeData ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SaveToStream(IncludeData, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IDataExport wrapper method implementations
//

#pragma implementation_key(499)
inline VARIANT_BOOL IDataExport::GetIncludeHeader ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeHeader(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(500)
inline void IDataExport::PutIncludeHeader ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_IncludeHeader(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(501)
inline VARIANT_BOOL IDataExport::GetIncludeLabels ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(502)
inline void IDataExport::PutIncludeLabels ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_IncludeLabels(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(503)
inline VARIANT_BOOL IDataExport::GetIncludeIndex ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(504)
inline void IDataExport::PutIncludeIndex ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_IncludeIndex(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(505)
inline _variant_t IDataExport::GetSeries ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Series(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(506)
inline void IDataExport::PutSeries ( const _variant_t & Value ) {
    HRESULT _hr = put_Series(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(507)
inline HRESULT IDataExport::SaveToFile ( _bstr_t FileName ) {
    HRESULT _hr = raw_SaveToFile(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(508)
inline _variant_t IDataExport::SaveToStream ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SaveToStream(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(509)
inline _bstr_t IDataExport::AsString ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_AsString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ITextExport wrapper method implementations
//

#pragma implementation_key(510)
inline _bstr_t ITextExport::GetTextDelimiter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextDelimiter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(511)
inline void ITextExport::PutTextDelimiter ( _bstr_t Value ) {
    HRESULT _hr = put_TextDelimiter(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IExport wrapper method implementations
//

#pragma implementation_key(512)
inline HRESULT IExport::CopyToClipboardBitmap ( ) {
    HRESULT _hr = raw_CopyToClipboardBitmap();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(513)
inline HRESULT IExport::CopyToClipboardMetafile ( VARIANT_BOOL Enhanced ) {
    HRESULT _hr = raw_CopyToClipboardMetafile(Enhanced);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(514)
inline HRESULT IExport::SaveToBitmapFile ( _bstr_t FileName ) {
    HRESULT _hr = raw_SaveToBitmapFile(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(515)
inline HRESULT IExport::SaveToFile ( _bstr_t FileName ) {
    HRESULT _hr = raw_SaveToFile(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(516)
inline HRESULT IExport::SaveToJPEGFile ( _bstr_t FileName, VARIANT_BOOL Gray, enum EJPEGPerformance Performance, long Quality, long Width, long Height ) {
    HRESULT _hr = raw_SaveToJPEGFile(FileName, Gray, Performance, Quality, Width, Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(517)
inline HRESULT IExport::SaveToMetafile ( _bstr_t FileName ) {
    HRESULT _hr = raw_SaveToMetafile(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(518)
inline HRESULT IExport::SaveToMetafileEnh ( _bstr_t FileName ) {
    HRESULT _hr = raw_SaveToMetafileEnh(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(519)
inline HRESULT IExport::ShowExport ( ) {
    HRESULT _hr = raw_ShowExport();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(520)
inline _bstr_t IExport::SaveChartDialog ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_SaveChartDialog(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(521)
inline HRESULT IExport::ConvertTeeFileToText ( _bstr_t InputFile, _bstr_t OutputFile ) {
    HRESULT _hr = raw_ConvertTeeFileToText(InputFile, OutputFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(522)
inline _variant_t IExport::Stream ( enum EStreamType StreamType ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Stream(StreamType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(523)
inline IJPEGExportPtr IExport::GetasJPEG ( ) {
    struct IJPEGExport * _result = 0;
    HRESULT _hr = get_asJPEG(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IJPEGExportPtr(_result, false);
}

#pragma implementation_key(524)
inline IPNGExportPtr IExport::GetasPNG ( ) {
    struct IPNGExport * _result = 0;
    HRESULT _hr = get_asPNG(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPNGExportPtr(_result, false);
}

#pragma implementation_key(525)
inline IGIFExportPtr IExport::GetasGIF ( ) {
    struct IGIFExport * _result = 0;
    HRESULT _hr = get_asGIF(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGIFExportPtr(_result, false);
}

#pragma implementation_key(526)
inline IBMPExportPtr IExport::GetasBMP ( ) {
    struct IBMPExport * _result = 0;
    HRESULT _hr = get_asBMP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBMPExportPtr(_result, false);
}

#pragma implementation_key(527)
inline IPCXExportPtr IExport::GetasPCX ( ) {
    struct IPCXExport * _result = 0;
    HRESULT _hr = get_asPCX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPCXExportPtr(_result, false);
}

#pragma implementation_key(528)
inline IMetafileExportPtr IExport::GetasMetafile ( ) {
    struct IMetafileExport * _result = 0;
    HRESULT _hr = get_asMetafile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMetafileExportPtr(_result, false);
}

#pragma implementation_key(529)
inline INativeExportPtr IExport::GetasNative ( ) {
    struct INativeExport * _result = 0;
    HRESULT _hr = get_asNative(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return INativeExportPtr(_result, false);
}

#pragma implementation_key(530)
inline IXMLExportPtr IExport::GetasXML ( ) {
    struct IXMLExport * _result = 0;
    HRESULT _hr = get_asXML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLExportPtr(_result, false);
}

#pragma implementation_key(531)
inline IXLSExportPtr IExport::GetasXLS ( ) {
    struct IXLSExport * _result = 0;
    HRESULT _hr = get_asXLS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXLSExportPtr(_result, false);
}

#pragma implementation_key(532)
inline IHTMLExportPtr IExport::GetasHTML ( ) {
    struct IHTMLExport * _result = 0;
    HRESULT _hr = get_asHTML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IHTMLExportPtr(_result, false);
}

#pragma implementation_key(533)
inline ITextExportPtr IExport::GetasText ( ) {
    struct ITextExport * _result = 0;
    HRESULT _hr = get_asText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextExportPtr(_result, false);
}

#pragma implementation_key(534)
inline HRESULT IExport::EmailFile ( _bstr_t FileName ) {
    HRESULT _hr = raw_EmailFile(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ICalendarCell wrapper method implementations
//

#pragma implementation_key(535)
inline VARIANT_BOOL ICalendarCell::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(536)
inline void ICalendarCell::PutVisible ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Visible(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICalendarCellUpper wrapper method implementations
//

#pragma implementation_key(537)
inline _bstr_t ICalendarCellUpper::GetFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(538)
inline void ICalendarCellUpper::PutFormat ( _bstr_t Value ) {
    HRESULT _hr = put_Format(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(539)
inline VARIANT_BOOL ICalendarCellUpper::GetUpperCase ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UpperCase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(540)
inline void ICalendarCellUpper::PutUpperCase ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_UpperCase(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICalendarSeries wrapper method implementations
//

#pragma implementation_key(541)
inline double ICalendarSeries::GetDate ( ) {
    double _result = 0;
    HRESULT _hr = get_Date(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(542)
inline void ICalendarSeries::PutDate ( double Value ) {
    HRESULT _hr = put_Date(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(543)
inline ICalendarCellPtr ICalendarSeries::GetDays ( ) {
    struct ICalendarCell * _result = 0;
    HRESULT _hr = get_Days(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICalendarCellPtr(_result, false);
}

#pragma implementation_key(544)
inline ICalendarCellUpperPtr ICalendarSeries::GetMonths ( ) {
    struct ICalendarCellUpper * _result = 0;
    HRESULT _hr = get_Months(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICalendarCellUpperPtr(_result, false);
}

#pragma implementation_key(545)
inline ICalendarCellPtr ICalendarSeries::GetTrailing ( ) {
    struct ICalendarCell * _result = 0;
    HRESULT _hr = get_Trailing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICalendarCellPtr(_result, false);
}

#pragma implementation_key(546)
inline ICalendarCellPtr ICalendarSeries::GetSunday ( ) {
    struct ICalendarCell * _result = 0;
    HRESULT _hr = get_Sunday(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICalendarCellPtr(_result, false);
}

#pragma implementation_key(547)
inline ICalendarCellPtr ICalendarSeries::GetToday ( ) {
    struct ICalendarCell * _result = 0;
    HRESULT _hr = get_Today(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICalendarCellPtr(_result, false);
}

#pragma implementation_key(548)
inline ICalendarCellUpperPtr ICalendarSeries::GetWeekdays ( ) {
    struct ICalendarCellUpper * _result = 0;
    HRESULT _hr = get_Weekdays(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICalendarCellUpperPtr(_result, false);
}

#pragma implementation_key(549)
inline HRESULT ICalendarSeries::NextMonth ( ) {
    HRESULT _hr = raw_NextMonth();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(550)
inline HRESULT ICalendarSeries::PreviousMonth ( ) {
    HRESULT _hr = raw_PreviousMonth();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(551)
inline struct TeeRect ICalendarSeries::RectCell ( long Column, long Row ) {
    struct TeeRect _result;
    HRESULT _hr = raw_RectCell(Column, Row, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(552)
inline long ICalendarSeries::Rows ( ) {
    long _result = 0;
    HRESULT _hr = raw_Rows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(553)
inline struct TeeRect ICalendarSeries::SeriesRect ( ) {
    struct TeeRect _result;
    HRESULT _hr = raw_SeriesRect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(554)
inline VARIANT_BOOL ICalendarSeries::GetNextButtonVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NextButtonVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(555)
inline void ICalendarSeries::PutNextButtonVisible ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_NextButtonVisible(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(556)
inline VARIANT_BOOL ICalendarSeries::GetPreviousButtonVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PreviousButtonVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(557)
inline void ICalendarSeries::PutPreviousButtonVisible ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_PreviousButtonVisible(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISeriesTextField wrapper method implementations
//

#pragma implementation_key(558)
inline long ISeriesTextField::GetFieldIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_FieldIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(559)
inline void ISeriesTextField::PutFieldIndex ( long Value ) {
    HRESULT _hr = put_FieldIndex(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(560)
inline _bstr_t ISeriesTextField::GetFieldName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FieldName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(561)
inline void ISeriesTextField::PutFieldName ( _bstr_t Value ) {
    HRESULT _hr = put_FieldName(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISeriesTextFields wrapper method implementations
//

#pragma implementation_key(562)
inline ISeriesTextFieldPtr ISeriesTextFields::GetItems ( long Index ) {
    struct ISeriesTextField * _result = 0;
    HRESULT _hr = get_Items(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISeriesTextFieldPtr(_result, false);
}

#pragma implementation_key(563)
inline HRESULT ISeriesTextFields::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(564)
inline HRESULT ISeriesTextFields::Delete ( long Index ) {
    HRESULT _hr = raw_Delete(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(565)
inline long ISeriesTextFields::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IValueLists wrapper method implementations
//

#pragma implementation_key(566)
inline long IValueLists::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(567)
inline IValueListPtr IValueLists::GetItems ( long Index ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_Items(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

//
// interface IChartGridRows wrapper method implementations
//

#pragma implementation_key(568)
inline long IChartGridRows::GetRow ( ) {
    long _result = 0;
    HRESULT _hr = get_Row(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(569)
inline void IChartGridRows::PutRow ( long Value ) {
    HRESULT _hr = put_Row(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(570)
inline long IChartGridRows::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(571)
inline long IChartGridRows::GetHeights ( long Index ) {
    long _result = 0;
    HRESULT _hr = get_Heights(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(572)
inline void IChartGridRows::PutHeights ( long Index, long Value ) {
    HRESULT _hr = put_Heights(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IChartGridCols wrapper method implementations
//

#pragma implementation_key(573)
inline long IChartGridCols::GetCol ( ) {
    long _result = 0;
    HRESULT _hr = get_Col(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(574)
inline void IChartGridCols::PutCol ( long Value ) {
    HRESULT _hr = put_Col(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(575)
inline long IChartGridCols::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(576)
inline long IChartGridCols::GetWidths ( long Index ) {
    long _result = 0;
    HRESULT _hr = get_Widths(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(577)
inline void IChartGridCols::PutWidths ( long Index, long Value ) {
    HRESULT _hr = put_Widths(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPen wrapper method implementations
//

#pragma implementation_key(578)
inline OLE_COLOR IPen::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(579)
inline void IPen::PutColor ( OLE_COLOR Color ) {
    HRESULT _hr = put_Color(Color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(580)
inline long IPen::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(581)
inline void IPen::PutWidth ( long Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(582)
inline enum EChartPenStyle IPen::GetStyle ( ) {
    enum EChartPenStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(583)
inline void IPen::PutStyle ( enum EChartPenStyle Style ) {
    HRESULT _hr = put_Style(Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(584)
inline VARIANT_BOOL IPen::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(585)
inline void IPen::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(586)
inline enum EPenEndStyle IPen::GetEndStyle ( ) {
    enum EPenEndStyle _result;
    HRESULT _hr = get_EndStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(587)
inline void IPen::PutEndStyle ( enum EPenEndStyle Value ) {
    HRESULT _hr = put_EndStyle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICanvas wrapper method implementations
//

#pragma implementation_key(588)
inline IBrushPtr ICanvas::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(589)
inline IPenPtr ICanvas::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(590)
inline HRESULT ICanvas::LineTo ( long X, long Y ) {
    HRESULT _hr = raw_LineTo(X, Y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(591)
inline HRESULT ICanvas::MoveTo ( long X, long Y ) {
    HRESULT _hr = raw_MoveTo(X, Y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(592)
inline HRESULT ICanvas::Rectangle ( long Left, long Top, long Right, long Bottom ) {
    HRESULT _hr = raw_Rectangle(Left, Top, Right, Bottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(593)
inline IChartFontPtr ICanvas::GetFont ( ) {
    struct IChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChartFontPtr(_result, false);
}

#pragma implementation_key(594)
inline HRESULT ICanvas::Arc ( long X1, long Y1, long X2, long Y2, long X3, long Y3, long X4, long Y4 ) {
    HRESULT _hr = raw_Arc(X1, Y1, X2, Y2, X3, Y3, X4, Y4);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(595)
inline HRESULT ICanvas::Ellipse ( long X1, long Y1, long X2, long Y2 ) {
    HRESULT _hr = raw_Ellipse(X1, Y1, X2, Y2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(596)
inline HRESULT ICanvas::TextOut ( long X, long Y, _bstr_t Text ) {
    HRESULT _hr = raw_TextOut(X, Y, Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(597)
inline long ICanvas::TextHeight ( _bstr_t SomeText ) {
    long _result = 0;
    HRESULT _hr = raw_TextHeight(SomeText, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(598)
inline long ICanvas::TextWidth ( _bstr_t SomeText ) {
    long _result = 0;
    HRESULT _hr = raw_TextWidth(SomeText, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(599)
inline HRESULT ICanvas::ClipRectangle ( long Left, long Top, long Right, long Bottom ) {
    HRESULT _hr = raw_ClipRectangle(Left, Top, Right, Bottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(600)
inline HRESULT ICanvas::UnClipRectangle ( ) {
    HRESULT _hr = raw_UnClipRectangle();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(601)
inline HRESULT ICanvas::RotateLabel ( long X, long Y, _bstr_t St, long RotDegree ) {
    HRESULT _hr = raw_RotateLabel(X, Y, St, RotDegree);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(602)
inline VARIANT_BOOL ICanvas::IsScreenHighColor ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsScreenHighColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(603)
inline long ICanvas::GetTop ( ) {
    long _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(604)
inline long ICanvas::GetLeft ( ) {
    long _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(605)
inline long ICanvas::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(606)
inline long ICanvas::GetHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(607)
inline enum ECanvasBackMode ICanvas::GetBackMode ( ) {
    enum ECanvasBackMode _result;
    HRESULT _hr = get_BackMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(608)
inline void ICanvas::PutBackMode ( enum ECanvasBackMode Value ) {
    HRESULT _hr = put_BackMode(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(609)
inline OLE_COLOR ICanvas::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(610)
inline void ICanvas::PutBackColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_BackColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(611)
inline VARIANT_BOOL ICanvas::GetSupportsFullRotation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SupportsFullRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(612)
inline VARIANT_BOOL ICanvas::GetUseBuffer ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseBuffer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(613)
inline void ICanvas::PutUseBuffer ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_UseBuffer(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(614)
inline HRESULT ICanvas::Pie3D ( long XCenter, long YCenter, long XRadius, long YRadius, long Z0, long Z1, double StartAngle, double EndAngle, VARIANT_BOOL DarkSides, VARIANT_BOOL DrawSides ) {
    HRESULT _hr = raw_Pie3D(XCenter, YCenter, XRadius, YRadius, Z0, Z1, StartAngle, EndAngle, DarkSides, DrawSides);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(615)
inline HRESULT ICanvas::LineWithZ ( long X0, long Y0, long X1, long Y1, long Z ) {
    HRESULT _hr = raw_LineWithZ(X0, Y0, X1, Y1, Z);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(616)
inline HRESULT ICanvas::MoveTo3D ( long X, long Y, long Z ) {
    HRESULT _hr = raw_MoveTo3D(X, Y, Z);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(617)
inline HRESULT ICanvas::LineTo3D ( long X, long Y, long Z ) {
    HRESULT _hr = raw_LineTo3D(X, Y, Z);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(618)
inline HRESULT ICanvas::Plane3D ( long X0, long Y0, long X1, long Y1, long Z0, long Z1 ) {
    HRESULT _hr = raw_Plane3D(X0, Y0, X1, Y1, Z0, Z1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(619)
inline HRESULT ICanvas::ZLine3D ( long X, long Y, long Z0, long Z1 ) {
    HRESULT _hr = raw_ZLine3D(X, Y, Z0, Z1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(620)
inline HRESULT ICanvas::RotateLabel3D ( long X, long Y, long Z, _bstr_t St, long RotDegree ) {
    HRESULT _hr = raw_RotateLabel3D(X, Y, Z, St, RotDegree);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(621)
inline enum ECanvasTextAlign ICanvas::GetTextAlign ( ) {
    enum ECanvasTextAlign _result;
    HRESULT _hr = get_TextAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(622)
inline void ICanvas::PutTextAlign ( enum ECanvasTextAlign Value ) {
    HRESULT _hr = put_TextAlign(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(623)
inline HRESULT ICanvas::VertLine3D ( long X, long Top, long Bottom, long Z ) {
    HRESULT _hr = raw_VertLine3D(X, Top, Bottom, Z);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(624)
inline HRESULT ICanvas::HorizLine3D ( long Left, long Right, long Y, long Z ) {
    HRESULT _hr = raw_HorizLine3D(Left, Right, Y, Z);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(625)
inline HRESULT ICanvas::Cylinder ( VARIANT_BOOL Vertical, long Left, long Top, long Right, long Bottom, long Z0, long Z1, VARIANT_BOOL DarkCover ) {
    HRESULT _hr = raw_Cylinder(Vertical, Left, Top, Right, Bottom, Z0, Z1, DarkCover);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(626)
inline HRESULT ICanvas::Cube ( long Left, long Right, long Top, long Bottom, long Z0, long Z1, VARIANT_BOOL DarkSides ) {
    HRESULT _hr = raw_Cube(Left, Right, Top, Bottom, Z0, Z1, DarkSides);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(627)
inline HRESULT ICanvas::EllipseWithZ ( long X1, long Y1, long X2, long Y2, long Z ) {
    HRESULT _hr = raw_EllipseWithZ(X1, Y1, X2, Y2, Z);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(628)
inline HRESULT ICanvas::PlaneWithZ ( long X1, long Y1, long X2, long Y2, long X3, long Y3, long X4, long Y4, long Z ) {
    HRESULT _hr = raw_PlaneWithZ(X1, Y1, X2, Y2, X3, Y3, X4, Y4, Z);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(629)
inline HRESULT ICanvas::PlaneFour3D ( long X1, long Y1, long X2, long Y2, long X3, long Y3, long X4, long Y4, long Z0, long Z1 ) {
    HRESULT _hr = raw_PlaneFour3D(X1, Y1, X2, Y2, X3, Y3, X4, Y4, Z0, Z1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(630)
inline HRESULT ICanvas::RectangleWithZ ( long Left, long Top, long Right, long Bottom, long Z ) {
    HRESULT _hr = raw_RectangleWithZ(Left, Top, Right, Bottom, Z);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(631)
inline HRESULT ICanvas::RectangleZ ( long Left, long Top, long Bottom, long Z0, long Z1 ) {
    HRESULT _hr = raw_RectangleZ(Left, Top, Bottom, Z0, Z1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(632)
inline HRESULT ICanvas::TextOut3D ( long X, long Y, long Z, _bstr_t Text ) {
    HRESULT _hr = raw_TextOut3D(X, Y, Z, Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(633)
inline HRESULT ICanvas::TriangleWithZ ( long X1, long Y1, long X2, long Y2, long X3, long Y3, long Z ) {
    HRESULT _hr = raw_TriangleWithZ(X1, Y1, X2, Y2, X3, Y3, Z);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(634)
inline HRESULT ICanvas::Frame3D ( long Left, long Top, long Right, long Bottom, OLE_COLOR TopColor, OLE_COLOR BottomColor, long Width ) {
    HRESULT _hr = raw_Frame3D(Left, Top, Right, Bottom, TopColor, BottomColor, Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(635)
inline HRESULT ICanvas::EraseBackground ( long Left, long Top, long Right, long Bottom ) {
    HRESULT _hr = raw_EraseBackground(Left, Top, Right, Bottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(636)
inline HRESULT ICanvas::GradientFill ( long Left, long Top, long Right, long Bottom, OLE_COLOR StartColor, OLE_COLOR EndColor, enum EGradientDirection Direction ) {
    HRESULT _hr = raw_GradientFill(Left, Top, Right, Bottom, StartColor, EndColor, Direction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(637)
inline HRESULT ICanvas::Line ( long X0, long Y0, long X1, long Y1 ) {
    HRESULT _hr = raw_Line(X0, Y0, X1, Y1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(638)
inline HRESULT ICanvas::RectangleY ( long Left, long Top, long Right, long Z0, long Z1 ) {
    HRESULT _hr = raw_RectangleY(Left, Top, Right, Z0, Z1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(639)
inline HRESULT ICanvas::Pixels3D ( long X, long Y, long Z, OLE_COLOR Value ) {
    HRESULT _hr = raw_Pixels3D(X, Y, Z, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(640)
inline long ICanvas::GetHandleDC ( ) {
    long _result = 0;
    HRESULT _hr = get_HandleDC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(641)
inline HRESULT ICanvas::Cone ( VARIANT_BOOL Vertical, long Left, long Top, long Right, long Bottom, long Z0, long Z1, VARIANT_BOOL Dark3D, long ConePercent ) {
    HRESULT _hr = raw_Cone(Vertical, Left, Top, Right, Bottom, Z0, Z1, Dark3D, ConePercent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(642)
inline HRESULT ICanvas::Sphere ( long X, long Y, long Z, double Radius ) {
    HRESULT _hr = raw_Sphere(X, Y, Z, Radius);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(643)
inline HRESULT ICanvas::Arrow ( VARIANT_BOOL Filled, long X0, long Y0, long X1, long Y1, long HeadWidth, long HeadHeight, long Z ) {
    HRESULT _hr = raw_Arrow(Filled, X0, Y0, X1, Y1, HeadWidth, HeadHeight, Z);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(644)
inline HRESULT ICanvas::Draw ( long X, long Y, struct IPicture * Image ) {
    HRESULT _hr = raw_Draw(X, Y, Image);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(645)
inline ITeePoint3DPtr ICanvas::GetRotationCenter ( ) {
    struct ITeePoint3D * _result = 0;
    HRESULT _hr = get_RotationCenter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeePoint3DPtr(_result, false);
}

#pragma implementation_key(646)
inline long ICanvas::GetChartXCenter ( ) {
    long _result = 0;
    HRESULT _hr = get_ChartXCenter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(647)
inline long ICanvas::GetChartYCenter ( ) {
    long _result = 0;
    HRESULT _hr = get_ChartYCenter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(648)
inline HRESULT ICanvas::GrayScale ( VARIANT_BOOL Inverted ) {
    HRESULT _hr = raw_GrayScale(Inverted);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAxis wrapper method implementations
//

#pragma implementation_key(649)
inline VARIANT_BOOL IAxis::GetAutomatic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Automatic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(650)
inline void IAxis::PutAutomatic ( VARIANT_BOOL Automatic ) {
    HRESULT _hr = put_Automatic(Automatic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(651)
inline VARIANT_BOOL IAxis::GetAutomaticMaximum ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutomaticMaximum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(652)
inline void IAxis::PutAutomaticMaximum ( VARIANT_BOOL AutomaticMaximum ) {
    HRESULT _hr = put_AutomaticMaximum(AutomaticMaximum);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(653)
inline VARIANT_BOOL IAxis::GetAutomaticMinimum ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutomaticMinimum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(654)
inline void IAxis::PutAutomaticMinimum ( VARIANT_BOOL AutomaticMinimum ) {
    HRESULT _hr = put_AutomaticMinimum(AutomaticMinimum);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(655)
inline IPenPtr IAxis::GetAxisPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_AxisPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(656)
inline enum EAxisType IAxis::GetAxisType ( ) {
    enum EAxisType _result;
    HRESULT _hr = get_AxisType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(657)
inline VARIANT_BOOL IAxis::GetExactDateTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExactDateTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(658)
inline void IAxis::PutExactDateTime ( VARIANT_BOOL ExactDateTime ) {
    HRESULT _hr = put_ExactDateTime(ExactDateTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(659)
inline IPenPtr IAxis::GetGridPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_GridPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(660)
inline double IAxis::GetIncrement ( ) {
    double _result = 0;
    HRESULT _hr = get_Increment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(661)
inline void IAxis::PutIncrement ( double Increment ) {
    HRESULT _hr = put_Increment(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(662)
inline VARIANT_BOOL IAxis::GetInverted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Inverted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(663)
inline void IAxis::PutInverted ( VARIANT_BOOL Inverted ) {
    HRESULT _hr = put_Inverted(Inverted);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(664)
inline IAxisLabelsPtr IAxis::GetLabels ( ) {
    struct IAxisLabels * _result = 0;
    HRESULT _hr = get_Labels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAxisLabelsPtr(_result, false);
}

#pragma implementation_key(665)
inline VARIANT_BOOL IAxis::GetLogarithmic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Logarithmic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(666)
inline void IAxis::PutLogarithmic ( VARIANT_BOOL Logarithmic ) {
    HRESULT _hr = put_Logarithmic(Logarithmic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(667)
inline double IAxis::GetMaximum ( ) {
    double _result = 0;
    HRESULT _hr = get_Maximum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(668)
inline void IAxis::PutMaximum ( double Maximum ) {
    HRESULT _hr = put_Maximum(Maximum);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(669)
inline double IAxis::GetMinimum ( ) {
    double _result = 0;
    HRESULT _hr = get_Minimum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(670)
inline void IAxis::PutMinimum ( double Minimum ) {
    HRESULT _hr = put_Minimum(Minimum);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(671)
inline long IAxis::GetMinorTickCount ( ) {
    long _result = 0;
    HRESULT _hr = get_MinorTickCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(672)
inline void IAxis::PutMinorTickCount ( long MinorTickCount ) {
    HRESULT _hr = put_MinorTickCount(MinorTickCount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(673)
inline long IAxis::GetMinorTickLength ( ) {
    long _result = 0;
    HRESULT _hr = get_MinorTickLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(674)
inline void IAxis::PutMinorTickLength ( long MinorTickLength ) {
    HRESULT _hr = put_MinorTickLength(MinorTickLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(675)
inline IPenPtr IAxis::GetMinorTicks ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_MinorTicks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(676)
inline long IAxis::GetPosition ( ) {
    long _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(677)
inline long IAxis::GetTickInnerLength ( ) {
    long _result = 0;
    HRESULT _hr = get_TickInnerLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(678)
inline void IAxis::PutTickInnerLength ( long TickInnerLength ) {
    HRESULT _hr = put_TickInnerLength(TickInnerLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(679)
inline long IAxis::GetTickLength ( ) {
    long _result = 0;
    HRESULT _hr = get_TickLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(680)
inline void IAxis::PutTickLength ( long TickLength ) {
    HRESULT _hr = put_TickLength(TickLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(681)
inline VARIANT_BOOL IAxis::GetTickOnLabelsOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TickOnLabelsOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(682)
inline void IAxis::PutTickOnLabelsOnly ( VARIANT_BOOL TickOnLabelsOnly ) {
    HRESULT _hr = put_TickOnLabelsOnly(TickOnLabelsOnly);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(683)
inline IPenPtr IAxis::GetTicks ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Ticks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(684)
inline IPenPtr IAxis::GetTicksInner ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_TicksInner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(685)
inline IAxisTitlePtr IAxis::GetTitle ( ) {
    struct IAxisTitle * _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAxisTitlePtr(_result, false);
}

#pragma implementation_key(686)
inline long IAxis::GetTitleSize ( ) {
    long _result = 0;
    HRESULT _hr = get_TitleSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(687)
inline void IAxis::PutTitleSize ( long TitleSize ) {
    HRESULT _hr = put_TitleSize(TitleSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(688)
inline VARIANT_BOOL IAxis::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(689)
inline void IAxis::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(690)
inline HRESULT IAxis::AdjustMaxMin ( ) {
    HRESULT _hr = raw_AdjustMaxMin();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(691)
inline long IAxis::CalcXPosValue ( double SomeValue ) {
    long _result = 0;
    HRESULT _hr = raw_CalcXPosValue(SomeValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(692)
inline long IAxis::CalcYPosValue ( double SomeValue ) {
    long _result = 0;
    HRESULT _hr = raw_CalcYPosValue(SomeValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(693)
inline long IAxis::CalcXSizeValue ( double SomeValue ) {
    long _result = 0;
    HRESULT _hr = raw_CalcXSizeValue(SomeValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(694)
inline long IAxis::CalcYSizeValue ( double SomeValue ) {
    long _result = 0;
    HRESULT _hr = raw_CalcYSizeValue(SomeValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(695)
inline double IAxis::CalcPosPoint ( long SomeValue ) {
    double _result = 0;
    HRESULT _hr = raw_CalcPosPoint(SomeValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(696)
inline VARIANT_BOOL IAxis::Clicked ( long XCoord, long YCoord ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Clicked(XCoord, YCoord, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(697)
inline HRESULT IAxis::CustomDraw ( long APosLabels, long APosTitle, long APosAxis, VARIANT_BOOL GridVisible ) {
    HRESULT _hr = raw_CustomDraw(APosLabels, APosTitle, APosAxis, GridVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(698)
inline VARIANT_BOOL IAxis::IsDateTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsDateTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(699)
inline double IAxis::MaxXValue ( ) {
    double _result = 0;
    HRESULT _hr = raw_MaxXValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(700)
inline double IAxis::MaxYValue ( ) {
    double _result = 0;
    HRESULT _hr = raw_MaxYValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(701)
inline double IAxis::MinXValue ( ) {
    double _result = 0;
    HRESULT _hr = raw_MinXValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(702)
inline double IAxis::MinYValue ( ) {
    double _result = 0;
    HRESULT _hr = raw_MinYValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(703)
inline HRESULT IAxis::Scroll ( double Offset, VARIANT_BOOL CheckLimits ) {
    HRESULT _hr = raw_Scroll(Offset, CheckLimits);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(704)
inline HRESULT IAxis::SetMinMax ( double AMin, double AMax ) {
    HRESULT _hr = raw_SetMinMax(AMin, AMax);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(705)
inline VARIANT_BOOL IAxis::GetGridCentered ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GridCentered(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(706)
inline void IAxis::PutGridCentered ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_GridCentered(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(707)
inline double IAxis::GetPositionPercent ( ) {
    double _result = 0;
    HRESULT _hr = get_PositionPercent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(708)
inline void IAxis::PutPositionPercent ( double Value ) {
    HRESULT _hr = put_PositionPercent(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(709)
inline double IAxis::GetStartPosition ( ) {
    double _result = 0;
    HRESULT _hr = get_StartPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(710)
inline void IAxis::PutStartPosition ( double Value ) {
    HRESULT _hr = put_StartPosition(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(711)
inline double IAxis::GetEndPosition ( ) {
    double _result = 0;
    HRESULT _hr = get_EndPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(712)
inline void IAxis::PutEndPosition ( double Value ) {
    HRESULT _hr = put_EndPosition(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(713)
inline long IAxis::GetLogarithmicBase ( ) {
    long _result = 0;
    HRESULT _hr = get_LogarithmicBase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(714)
inline void IAxis::PutLogarithmicBase ( long Value ) {
    HRESULT _hr = put_LogarithmicBase(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(715)
inline HRESULT IAxis::CustomDrawMinMax ( long APosLabels, long APosTitle, long APosAxis, VARIANT_BOOL GridVisible, double AMinimum, double AMaximum, long AStartPosition, long AEndPosition ) {
    HRESULT _hr = raw_CustomDrawMinMax(APosLabels, APosTitle, APosAxis, GridVisible, AMinimum, AMaximum, AStartPosition, AEndPosition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(716)
inline IPenPtr IAxis::GetMinorGrid ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_MinorGrid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(717)
inline VARIANT_BOOL IAxis::GetOtherside ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Otherside(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(718)
inline void IAxis::PutOtherside ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Otherside(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(719)
inline long IAxis::GetAxisLink ( ) {
    long _result = 0;
    HRESULT _hr = get_AxisLink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(720)
inline double IAxis::MaxVisibleSeriesValue ( VARIANT_BOOL AllSeries, long SeriesIndex ) {
    double _result = 0;
    HRESULT _hr = raw_MaxVisibleSeriesValue(AllSeries, SeriesIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(721)
inline double IAxis::MinVisibleSeriesValue ( VARIANT_BOOL AllSeries, long SeriesIndex ) {
    double _result = 0;
    HRESULT _hr = raw_MinVisibleSeriesValue(AllSeries, SeriesIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(722)
inline double IAxis::CalcIncrement ( ) {
    double _result = 0;
    HRESULT _hr = raw_CalcIncrement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAxes wrapper method implementations
//

#pragma implementation_key(723)
inline IAxisPtr IAxes::GetLeft ( ) {
    struct IAxis * _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAxisPtr(_result, false);
}

#pragma implementation_key(724)
inline IAxisPtr IAxes::GetRight ( ) {
    struct IAxis * _result = 0;
    HRESULT _hr = get_Right(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAxisPtr(_result, false);
}

#pragma implementation_key(725)
inline IAxisPtr IAxes::GetTop ( ) {
    struct IAxis * _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAxisPtr(_result, false);
}

#pragma implementation_key(726)
inline IAxisPtr IAxes::GetBottom ( ) {
    struct IAxis * _result = 0;
    HRESULT _hr = get_Bottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAxisPtr(_result, false);
}

#pragma implementation_key(727)
inline VARIANT_BOOL IAxes::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(728)
inline void IAxes::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(729)
inline IAxisPtr IAxes::GetDepth ( ) {
    struct IAxis * _result = 0;
    HRESULT _hr = get_Depth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAxisPtr(_result, false);
}

#pragma implementation_key(730)
inline VARIANT_BOOL IAxes::GetDrawAxesBeforeSeries ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DrawAxesBeforeSeries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(731)
inline void IAxes::PutDrawAxesBeforeSeries ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_DrawAxesBeforeSeries(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(732)
inline long IAxes::AddCustom ( VARIANT_BOOL IsHorizontal ) {
    long _result = 0;
    HRESULT _hr = raw_AddCustom(IsHorizontal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(733)
inline IAxisPtr IAxes::GetCustom ( long CustomAxisIndex ) {
    struct IAxis * _result = 0;
    HRESULT _hr = get_Custom(CustomAxisIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAxisPtr(_result, false);
}

#pragma implementation_key(734)
inline long IAxes::GetCustomCount ( ) {
    long _result = 0;
    HRESULT _hr = get_CustomCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(735)
inline HRESULT IAxes::RemoveCustom ( long CustomAxisIndex ) {
    HRESULT _hr = raw_RemoveCustom(CustomAxisIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(736)
inline HRESULT IAxes::RemoveAllCustom ( ) {
    HRESULT _hr = raw_RemoveAllCustom();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IZoom wrapper method implementations
//

#pragma implementation_key(737)
inline VARIANT_BOOL IZoom::GetEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(738)
inline void IZoom::PutEnable ( VARIANT_BOOL Enable ) {
    HRESULT _hr = put_Enable(Enable);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(739)
inline VARIANT_BOOL IZoom::GetAnimated ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Animated(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(740)
inline void IZoom::PutAnimated ( VARIANT_BOOL Animated ) {
    HRESULT _hr = put_Animated(Animated);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(741)
inline long IZoom::GetAnimatedSteps ( ) {
    long _result = 0;
    HRESULT _hr = get_AnimatedSteps(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(742)
inline void IZoom::PutAnimatedSteps ( long AnimatedSteps ) {
    HRESULT _hr = put_AnimatedSteps(AnimatedSteps);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(743)
inline HRESULT IZoom::Undo ( ) {
    HRESULT _hr = raw_Undo();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(744)
inline HRESULT IZoom::ZoomRect ( long Left, long Top, long Right, long Bottom ) {
    HRESULT _hr = raw_ZoomRect(Left, Top, Right, Bottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(745)
inline VARIANT_BOOL IZoom::GetZoomed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Zoomed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(746)
inline IPenPtr IZoom::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(747)
inline long IZoom::GetMinimumPixels ( ) {
    long _result = 0;
    HRESULT _hr = get_MinimumPixels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(748)
inline void IZoom::PutMinimumPixels ( long Value ) {
    HRESULT _hr = put_MinimumPixels(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(749)
inline enum EMouseButton IZoom::GetMouseButton ( ) {
    enum EMouseButton _result;
    HRESULT _hr = get_MouseButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(750)
inline void IZoom::PutMouseButton ( enum EMouseButton Value ) {
    HRESULT _hr = put_MouseButton(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(751)
inline enum ETeeZoomDirection IZoom::GetDirection ( ) {
    enum ETeeZoomDirection _result;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(752)
inline void IZoom::PutDirection ( enum ETeeZoomDirection Value ) {
    HRESULT _hr = put_Direction(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(753)
inline IBrushPtr IZoom::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(754)
inline HRESULT IZoom::ZoomPercent ( double PercentZoom ) {
    HRESULT _hr = raw_ZoomPercent(PercentZoom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWall wrapper method implementations
//

#pragma implementation_key(755)
inline IBrushPtr IWall::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(756)
inline OLE_COLOR IWall::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(757)
inline void IWall::PutColor ( OLE_COLOR Color ) {
    HRESULT _hr = put_Color(Color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(758)
inline IPenPtr IWall::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(759)
inline long IWall::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(760)
inline void IWall::PutSize ( long Size ) {
    HRESULT _hr = put_Size(Size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(761)
inline VARIANT_BOOL IWall::GetTransparent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Transparent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(762)
inline void IWall::PutTransparent ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Transparent(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(763)
inline VARIANT_BOOL IWall::GetDark3D ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Dark3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(764)
inline void IWall::PutDark3D ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Dark3D(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(765)
inline IGradientPtr IWall::GetGradient ( ) {
    struct IGradient * _result = 0;
    HRESULT _hr = get_Gradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGradientPtr(_result, false);
}

#pragma implementation_key(766)
inline VARIANT_BOOL IWall::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(767)
inline void IWall::PutVisible ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Visible(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(768)
inline long IWall::GetTransparency ( ) {
    long _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(769)
inline void IWall::PutTransparency ( long Value ) {
    HRESULT _hr = put_Transparency(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IWalls wrapper method implementations
//

#pragma implementation_key(770)
inline IWallPtr IWalls::GetBottom ( ) {
    struct IWall * _result = 0;
    HRESULT _hr = get_Bottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWallPtr(_result, false);
}

#pragma implementation_key(771)
inline IWallPtr IWalls::GetLeft ( ) {
    struct IWall * _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWallPtr(_result, false);
}

#pragma implementation_key(772)
inline VARIANT_BOOL IWalls::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(773)
inline void IWalls::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(774)
inline OLE_COLOR IWalls::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(775)
inline void IWalls::PutBackColor ( OLE_COLOR BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(776)
inline IWallPtr IWalls::GetBack ( ) {
    struct IWall * _result = 0;
    HRESULT _hr = get_Back(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWallPtr(_result, false);
}

#pragma implementation_key(777)
inline IWallPtr IWalls::GetRight ( ) {
    struct IWall * _result = 0;
    HRESULT _hr = get_Right(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWallPtr(_result, false);
}

//
// interface IMarks wrapper method implementations
//

#pragma implementation_key(778)
inline IPenPtr IMarks::GetArrow ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Arrow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(779)
inline long IMarks::GetArrowLength ( ) {
    long _result = 0;
    HRESULT _hr = get_ArrowLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(780)
inline void IMarks::PutArrowLength ( long ArrowLength ) {
    HRESULT _hr = put_ArrowLength(ArrowLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(781)
inline OLE_COLOR IMarks::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(782)
inline void IMarks::PutBackColor ( OLE_COLOR BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(783)
inline VARIANT_BOOL IMarks::GetClip ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Clip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(784)
inline void IMarks::PutClip ( VARIANT_BOOL Clip ) {
    HRESULT _hr = put_Clip(Clip);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(785)
inline IPenPtr IMarks::GetFrame ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Frame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(786)
inline enum EMarkStyle IMarks::GetStyle ( ) {
    enum EMarkStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(787)
inline void IMarks::PutStyle ( enum EMarkStyle Style ) {
    HRESULT _hr = put_Style(Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(788)
inline VARIANT_BOOL IMarks::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(789)
inline void IMarks::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(790)
inline ISeriesMarksPositionsPtr IMarks::GetPositions ( ) {
    struct ISeriesMarksPositions * _result = 0;
    HRESULT _hr = get_Positions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISeriesMarksPositionsPtr(_result, false);
}

#pragma implementation_key(791)
inline long IMarks::Clicked ( long X, long Y ) {
    long _result = 0;
    HRESULT _hr = raw_Clicked(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(792)
inline long IMarks::GetZPosition ( ) {
    long _result = 0;
    HRESULT _hr = get_ZPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(793)
inline void IMarks::PutZPosition ( long Value ) {
    HRESULT _hr = put_ZPosition(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(794)
inline long IMarks::GetAngle ( ) {
    long _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(795)
inline void IMarks::PutAngle ( long Value ) {
    HRESULT _hr = put_Angle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(796)
inline long IMarks::GetDrawEvery ( ) {
    long _result = 0;
    HRESULT _hr = get_DrawEvery(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(797)
inline void IMarks::PutDrawEvery ( long Value ) {
    HRESULT _hr = put_DrawEvery(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(798)
inline VARIANT_BOOL IMarks::GetMultiline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Multiline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(799)
inline void IMarks::PutMultiline ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Multiline(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(800)
inline HRESULT IMarks::ResetPositions ( ) {
    HRESULT _hr = raw_ResetPositions();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IPointer wrapper method implementations
//

#pragma implementation_key(801)
inline IBrushPtr IPointer::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(802)
inline VARIANT_BOOL IPointer::GetDraw3D ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Draw3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(803)
inline void IPointer::PutDraw3D ( VARIANT_BOOL Draw3D ) {
    HRESULT _hr = put_Draw3D(Draw3D);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(804)
inline long IPointer::GetHorizontalSize ( ) {
    long _result = 0;
    HRESULT _hr = get_HorizontalSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(805)
inline void IPointer::PutHorizontalSize ( long HorizontalSize ) {
    HRESULT _hr = put_HorizontalSize(HorizontalSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(806)
inline long IPointer::GetVerticalSize ( ) {
    long _result = 0;
    HRESULT _hr = get_VerticalSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(807)
inline void IPointer::PutVerticalSize ( long VerticalSize ) {
    HRESULT _hr = put_VerticalSize(VerticalSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(808)
inline VARIANT_BOOL IPointer::GetInflateMargins ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InflateMargins(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(809)
inline void IPointer::PutInflateMargins ( VARIANT_BOOL InflateMargins ) {
    HRESULT _hr = put_InflateMargins(InflateMargins);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(810)
inline IPenPtr IPointer::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(811)
inline enum EPointerStyle IPointer::GetStyle ( ) {
    enum EPointerStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(812)
inline void IPointer::PutStyle ( enum EPointerStyle Style ) {
    HRESULT _hr = put_Style(Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(813)
inline VARIANT_BOOL IPointer::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(814)
inline void IPointer::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(815)
inline VARIANT_BOOL IPointer::GetDark3D ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Dark3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(816)
inline void IPointer::PutDark3D ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Dark3D(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(817)
inline HRESULT IPointer::DrawPointer ( long DC, VARIANT_BOOL Is3D, long px, long py, long tmpHoriz, long tmpVert, OLE_COLOR AColor, enum EPointerStyle AStyle ) {
    HRESULT _hr = raw_DrawPointer(DC, Is3D, px, py, tmpHoriz, tmpVert, AColor, AStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ICustomSeries wrapper method implementations
//

#pragma implementation_key(818)
inline IPointerPtr ICustomSeries::GetPointer ( ) {
    struct IPointer * _result = 0;
    HRESULT _hr = get_Pointer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPointerPtr(_result, false);
}

#pragma implementation_key(819)
inline VARIANT_BOOL ICustomSeries::GetStairs ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Stairs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(820)
inline void ICustomSeries::PutStairs ( VARIANT_BOOL Stairs ) {
    HRESULT _hr = put_Stairs(Stairs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(821)
inline VARIANT_BOOL ICustomSeries::GetInvertedStairs ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InvertedStairs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(822)
inline void ICustomSeries::PutInvertedStairs ( VARIANT_BOOL InvertedStairs ) {
    HRESULT _hr = put_InvertedStairs(InvertedStairs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(823)
inline IPenPtr ICustomSeries::GetLinePen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_LinePen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(824)
inline enum EBrushStyle ICustomSeries::GetLineBrush ( ) {
    enum EBrushStyle _result;
    HRESULT _hr = get_LineBrush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(825)
inline void ICustomSeries::PutLineBrush ( enum EBrushStyle LineBrush ) {
    HRESULT _hr = put_LineBrush(LineBrush);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(826)
inline VARIANT_BOOL ICustomSeries::GetClickableLine ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ClickableLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(827)
inline void ICustomSeries::PutClickableLine ( VARIANT_BOOL ClickableLine ) {
    HRESULT _hr = put_ClickableLine(ClickableLine);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(828)
inline long ICustomSeries::GetLineHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_LineHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(829)
inline void ICustomSeries::PutLineHeight ( long Value ) {
    HRESULT _hr = put_LineHeight(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(830)
inline VARIANT_BOOL ICustomSeries::GetDark3D ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Dark3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(831)
inline void ICustomSeries::PutDark3D ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Dark3D(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(832)
inline IBrushPtr ICustomSeries::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(833)
inline VARIANT_BOOL ICustomSeries::GetColorEachLine ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ColorEachLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(834)
inline void ICustomSeries::PutColorEachLine ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ColorEachLine(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(835)
inline IPenPtr ICustomSeries::GetOutline ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Outline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(836)
inline long ICustomSeries::GetTransparency ( ) {
    long _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(837)
inline void ICustomSeries::PutTransparency ( long Value ) {
    HRESULT _hr = put_Transparency(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAreaSeries wrapper method implementations
//

#pragma implementation_key(838)
inline enum EBrushStyle IAreaSeries::GetAreaBrush ( ) {
    enum EBrushStyle _result;
    HRESULT _hr = get_AreaBrush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(839)
inline void IAreaSeries::PutAreaBrush ( enum EBrushStyle AreaBrush ) {
    HRESULT _hr = put_AreaBrush(AreaBrush);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(840)
inline IPenPtr IAreaSeries::GetAreaPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_AreaPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(841)
inline enum EMultiArea IAreaSeries::GetMultiArea ( ) {
    enum EMultiArea _result;
    HRESULT _hr = get_MultiArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(842)
inline void IAreaSeries::PutMultiArea ( enum EMultiArea MultiArea ) {
    HRESULT _hr = put_MultiArea(MultiArea);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(843)
inline long IAreaSeries::GetOriginPos ( long AValueIndex ) {
    long _result = 0;
    HRESULT _hr = raw_GetOriginPos(AValueIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(844)
inline VARIANT_BOOL IAreaSeries::GetUseYOrigin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseYOrigin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(845)
inline void IAreaSeries::PutUseYOrigin ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_UseYOrigin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(846)
inline double IAreaSeries::GetYOrigin ( ) {
    double _result = 0;
    HRESULT _hr = get_YOrigin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(847)
inline void IAreaSeries::PutYOrigin ( double Value ) {
    HRESULT _hr = put_YOrigin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPointSeries wrapper method implementations
//

#pragma implementation_key(848)
inline IPointerPtr IPointSeries::GetPointer ( ) {
    struct IPointer * _result = 0;
    HRESULT _hr = get_Pointer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPointerPtr(_result, false);
}

#pragma implementation_key(849)
inline VARIANT_BOOL IPointSeries::GetDark3D ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Dark3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(850)
inline void IPointSeries::PutDark3D ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Dark3D(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ILineSeries wrapper method implementations
//

#pragma implementation_key(851)
inline enum ECustomSeriesStack ILineSeries::GetStacked ( ) {
    enum ECustomSeriesStack _result;
    HRESULT _hr = get_Stacked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(852)
inline void ILineSeries::PutStacked ( enum ECustomSeriesStack Value ) {
    HRESULT _hr = put_Stacked(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IFastLineSeries wrapper method implementations
//

#pragma implementation_key(853)
inline IPenPtr IFastLineSeries::GetLinePen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_LinePen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(854)
inline long IFastLineSeries::AddRealTime ( double X, double Y, _bstr_t SomeLabel, OLE_COLOR SomeColor ) {
    long _result = 0;
    HRESULT _hr = raw_AddRealTime(X, Y, SomeLabel, SomeColor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(855)
inline VARIANT_BOOL IFastLineSeries::GetDrawAllPoints ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DrawAllPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(856)
inline void IFastLineSeries::PutDrawAllPoints ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_DrawAllPoints(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IBubbleSeries wrapper method implementations
//

#pragma implementation_key(857)
inline IValueListPtr IBubbleSeries::GetRadiusValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_RadiusValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(858)
inline VARIANT_BOOL IBubbleSeries::GetSquared ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Squared(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(859)
inline void IBubbleSeries::PutSquared ( VARIANT_BOOL Squared ) {
    HRESULT _hr = put_Squared(Squared);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(860)
inline long IBubbleSeries::AddBubble ( double AX, double AY, double ARadius, _bstr_t AXLabel, OLE_COLOR Value ) {
    long _result = 0;
    HRESULT _hr = raw_AddBubble(AX, AY, ARadius, AXLabel, Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IGanttSeries wrapper method implementations
//

#pragma implementation_key(861)
inline IPenPtr IGanttSeries::GetConnectingPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_ConnectingPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(862)
inline IValueListPtr IGanttSeries::GetEndValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_EndValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(863)
inline IValueListPtr IGanttSeries::GetStartValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_StartValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(864)
inline IValueListPtr IGanttSeries::GetNextTask ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_NextTask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(865)
inline long IGanttSeries::AddGantt ( double AStart, double AEnd, double AY, _bstr_t SomeLabel ) {
    long _result = 0;
    HRESULT _hr = raw_AddGantt(AStart, AEnd, AY, SomeLabel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(866)
inline long IGanttSeries::AddGanttColor ( double AStart, double AEnd, double AY, _bstr_t AXLabel, OLE_COLOR Value ) {
    long _result = 0;
    HRESULT _hr = raw_AddGanttColor(AStart, AEnd, AY, AXLabel, Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IShapeSeries wrapper method implementations
//

#pragma implementation_key(867)
inline enum ETextAlignment IShapeSeries::GetAlignment ( ) {
    enum ETextAlignment _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(868)
inline void IShapeSeries::PutAlignment ( enum ETextAlignment Alignment ) {
    HRESULT _hr = put_Alignment(Alignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(869)
inline IBrushPtr IShapeSeries::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(870)
inline IChartFontPtr IShapeSeries::GetFont ( ) {
    struct IChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChartFontPtr(_result, false);
}

#pragma implementation_key(871)
inline IPenPtr IShapeSeries::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(872)
inline VARIANT_BOOL IShapeSeries::GetRoundRectangle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RoundRectangle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(873)
inline void IShapeSeries::PutRoundRectangle ( VARIANT_BOOL RoundRectangle ) {
    HRESULT _hr = put_RoundRectangle(RoundRectangle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(874)
inline enum EShapeStyle IShapeSeries::GetStyle ( ) {
    enum EShapeStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(875)
inline void IShapeSeries::PutStyle ( enum EShapeStyle Style ) {
    HRESULT _hr = put_Style(Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(876)
inline IStringsPtr IShapeSeries::GetText ( ) {
    struct IStrings * _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IStringsPtr(_result, false);
}

#pragma implementation_key(877)
inline VARIANT_BOOL IShapeSeries::GetTransparent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Transparent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(878)
inline void IShapeSeries::PutTransparent ( VARIANT_BOOL Transparent ) {
    HRESULT _hr = put_Transparent(Transparent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(879)
inline double IShapeSeries::GetX0 ( ) {
    double _result = 0;
    HRESULT _hr = get_X0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(880)
inline void IShapeSeries::PutX0 ( double X0 ) {
    HRESULT _hr = put_X0(X0);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(881)
inline double IShapeSeries::GetX1 ( ) {
    double _result = 0;
    HRESULT _hr = get_X1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(882)
inline void IShapeSeries::PutX1 ( double X1 ) {
    HRESULT _hr = put_X1(X1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(883)
inline enum EShapeXYStyle IShapeSeries::GetXYStyle ( ) {
    enum EShapeXYStyle _result;
    HRESULT _hr = get_XYStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(884)
inline void IShapeSeries::PutXYStyle ( enum EShapeXYStyle XYStyle ) {
    HRESULT _hr = put_XYStyle(XYStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(885)
inline double IShapeSeries::GetY0 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(886)
inline void IShapeSeries::PutY0 ( double Y0 ) {
    HRESULT _hr = put_Y0(Y0);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(887)
inline double IShapeSeries::GetY1 ( ) {
    double _result = 0;
    HRESULT _hr = get_Y1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(888)
inline void IShapeSeries::PutY1 ( double Y1 ) {
    HRESULT _hr = put_Y1(Y1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(889)
inline HRESULT IShapeSeries::ShapeImageLoad ( _bstr_t FileName ) {
    HRESULT _hr = raw_ShapeImageLoad(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(890)
inline HRESULT IShapeSeries::ShapeImageClear ( ) {
    HRESULT _hr = raw_ShapeImageClear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(891)
inline enum ETeeVertAlign IShapeSeries::GetVertAlign ( ) {
    enum ETeeVertAlign _result;
    HRESULT _hr = get_VertAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(892)
inline void IShapeSeries::PutVertAlign ( enum ETeeVertAlign Value ) {
    HRESULT _hr = put_VertAlign(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(893)
inline IGradientPtr IShapeSeries::GetGradient ( ) {
    struct IGradient * _result = 0;
    HRESULT _hr = get_Gradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGradientPtr(_result, false);
}

//
// interface IArrowSeries wrapper method implementations
//

#pragma implementation_key(894)
inline long IArrowSeries::GetArrowHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_ArrowHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(895)
inline void IArrowSeries::PutArrowHeight ( long ArrowHeight ) {
    HRESULT _hr = put_ArrowHeight(ArrowHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(896)
inline long IArrowSeries::GetArrowWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_ArrowWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(897)
inline void IArrowSeries::PutArrowWidth ( long ArrowWidth ) {
    HRESULT _hr = put_ArrowWidth(ArrowWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(898)
inline IValueListPtr IArrowSeries::GetEndXValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_EndXValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(899)
inline IValueListPtr IArrowSeries::GetEndYValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_EndYValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(900)
inline IValueListPtr IArrowSeries::GetStartXValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_StartXValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(901)
inline IValueListPtr IArrowSeries::GetStartYValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_StartYValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(902)
inline long IArrowSeries::AddArrow ( double X0, double Y0, double X1, double Y1, _bstr_t ALabel, OLE_COLOR Value ) {
    long _result = 0;
    HRESULT _hr = raw_AddArrow(X0, Y0, X1, Y1, ALabel, Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ICustomBarSeries wrapper method implementations
//

#pragma implementation_key(903)
inline enum EMultiBar ICustomBarSeries::GetMultiBar ( ) {
    enum EMultiBar _result;
    HRESULT _hr = get_MultiBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(904)
inline void ICustomBarSeries::PutMultiBar ( enum EMultiBar MultiBar ) {
    HRESULT _hr = put_MultiBar(MultiBar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(905)
inline VARIANT_BOOL ICustomBarSeries::GetAutoMarkPosition ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoMarkPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(906)
inline void ICustomBarSeries::PutAutoMarkPosition ( VARIANT_BOOL AutoMarkPosition ) {
    HRESULT _hr = put_AutoMarkPosition(AutoMarkPosition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(907)
inline IBrushPtr ICustomBarSeries::GetBarBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_BarBrush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(908)
inline IPenPtr ICustomBarSeries::GetBarPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_BarPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(909)
inline enum EBarStyle ICustomBarSeries::GetBarStyle ( ) {
    enum EBarStyle _result;
    HRESULT _hr = get_BarStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(910)
inline void ICustomBarSeries::PutBarStyle ( enum EBarStyle BarStyle ) {
    HRESULT _hr = put_BarStyle(BarStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(911)
inline long ICustomBarSeries::GetBarWidthPercent ( ) {
    long _result = 0;
    HRESULT _hr = get_BarWidthPercent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(912)
inline void ICustomBarSeries::PutBarWidthPercent ( long BarWidthPercent ) {
    HRESULT _hr = put_BarWidthPercent(BarWidthPercent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(913)
inline VARIANT_BOOL ICustomBarSeries::GetDark3D ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Dark3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(914)
inline void ICustomBarSeries::PutDark3D ( VARIANT_BOOL Dark3D ) {
    HRESULT _hr = put_Dark3D(Dark3D);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(915)
inline long ICustomBarSeries::GetOffsetPercent ( ) {
    long _result = 0;
    HRESULT _hr = get_OffsetPercent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(916)
inline void ICustomBarSeries::PutOffsetPercent ( long OffsetPercent ) {
    HRESULT _hr = put_OffsetPercent(OffsetPercent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(917)
inline VARIANT_BOOL ICustomBarSeries::GetSideMargins ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SideMargins(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(918)
inline void ICustomBarSeries::PutSideMargins ( VARIANT_BOOL SideMargins ) {
    HRESULT _hr = put_SideMargins(SideMargins);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(919)
inline VARIANT_BOOL ICustomBarSeries::GetUseOrigin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseOrigin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(920)
inline void ICustomBarSeries::PutUseOrigin ( VARIANT_BOOL UseOrigin ) {
    HRESULT _hr = put_UseOrigin(UseOrigin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(921)
inline double ICustomBarSeries::GetOrigin ( ) {
    double _result = 0;
    HRESULT _hr = get_Origin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(922)
inline void ICustomBarSeries::PutOrigin ( double Origin ) {
    HRESULT _hr = put_Origin(Origin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(923)
inline long ICustomBarSeries::GetOriginPos ( long SomeValueIndex ) {
    long _result = 0;
    HRESULT _hr = raw_GetOriginPos(SomeValueIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(924)
inline VARIANT_BOOL ICustomBarSeries::GetAutoBarSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoBarSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(925)
inline void ICustomBarSeries::PutAutoBarSize ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AutoBarSize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(926)
inline HRESULT ICustomBarSeries::BarImageLoad ( _bstr_t FileName ) {
    HRESULT _hr = raw_BarImageLoad(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(927)
inline HRESULT ICustomBarSeries::BarImageClear ( ) {
    HRESULT _hr = raw_BarImageClear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(928)
inline IGradientPtr ICustomBarSeries::GetGradient ( ) {
    struct IGradient * _result = 0;
    HRESULT _hr = get_Gradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGradientPtr(_result, false);
}

#pragma implementation_key(929)
inline long ICustomBarSeries::GetStackGroup ( ) {
    long _result = 0;
    HRESULT _hr = get_StackGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(930)
inline void ICustomBarSeries::PutStackGroup ( long Value ) {
    HRESULT _hr = put_StackGroup(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(931)
inline long ICustomBarSeries::GetConePercent ( ) {
    long _result = 0;
    HRESULT _hr = get_ConePercent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(932)
inline void ICustomBarSeries::PutConePercent ( long Value ) {
    HRESULT _hr = put_ConePercent(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IBarSeries wrapper method implementations
//

#pragma implementation_key(933)
inline long IBarSeries::GetBarWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_BarWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(934)
inline void IBarSeries::PutBarWidth ( long BarWidth ) {
    HRESULT _hr = put_BarWidth(BarWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IHorizBarSeries wrapper method implementations
//

#pragma implementation_key(935)
inline long IHorizBarSeries::GetBarHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_BarHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(936)
inline void IHorizBarSeries::PutBarHeight ( long BarHeight ) {
    HRESULT _hr = put_BarHeight(BarHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICandleSeries wrapper method implementations
//

#pragma implementation_key(937)
inline enum ECandleStyle ICandleSeries::GetCandleStyle ( ) {
    enum ECandleStyle _result;
    HRESULT _hr = get_CandleStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(938)
inline void ICandleSeries::PutCandleStyle ( enum ECandleStyle CandleStyle ) {
    HRESULT _hr = put_CandleStyle(CandleStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(939)
inline long ICandleSeries::GetCandleWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_CandleWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(940)
inline void ICandleSeries::PutCandleWidth ( long CandleWidth ) {
    HRESULT _hr = put_CandleWidth(CandleWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(941)
inline IValueListPtr ICandleSeries::GetCloseValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_CloseValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(942)
inline IValueListPtr ICandleSeries::GetDateValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_DateValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(943)
inline OLE_COLOR ICandleSeries::GetDownCloseColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_DownCloseColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(944)
inline void ICandleSeries::PutDownCloseColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_DownCloseColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(945)
inline IValueListPtr ICandleSeries::GetHighValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_HighValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(946)
inline IValueListPtr ICandleSeries::GetLowValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_LowValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(947)
inline IValueListPtr ICandleSeries::GetOpenValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_OpenValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(948)
inline VARIANT_BOOL ICandleSeries::GetShowCloseTick ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowCloseTick(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(949)
inline void ICandleSeries::PutShowCloseTick ( VARIANT_BOOL ShowCloseTick ) {
    HRESULT _hr = put_ShowCloseTick(ShowCloseTick);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(950)
inline VARIANT_BOOL ICandleSeries::GetShowOpenTick ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowOpenTick(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(951)
inline void ICandleSeries::PutShowOpenTick ( VARIANT_BOOL ShowOpenTick ) {
    HRESULT _hr = put_ShowOpenTick(ShowOpenTick);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(952)
inline OLE_COLOR ICandleSeries::GetUpCloseColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_UpCloseColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(953)
inline void ICandleSeries::PutUpCloseColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_UpCloseColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(954)
inline long ICandleSeries::AddCandle ( double DateValue, double OpenValue, double HighValue, double LowValue, double CloseValue ) {
    long _result = 0;
    HRESULT _hr = raw_AddCandle(DateValue, OpenValue, HighValue, LowValue, CloseValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ICustom3DSeries wrapper method implementations
//

#pragma implementation_key(955)
inline long ICustom3DSeries::AddXYZ ( double AX, double AY, double AZ, _bstr_t AXLabel, OLE_COLOR Value ) {
    long _result = 0;
    HRESULT _hr = raw_AddXYZ(AX, AY, AZ, AXLabel, Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(956)
inline double ICustom3DSeries::MaxZValue ( ) {
    double _result = 0;
    HRESULT _hr = raw_MaxZValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(957)
inline double ICustom3DSeries::MinZValue ( ) {
    double _result = 0;
    HRESULT _hr = raw_MinZValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(958)
inline long ICustom3DSeries::GetTimesZOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_TimesZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(959)
inline void ICustom3DSeries::PutTimesZOrder ( long TimesZOrder ) {
    HRESULT _hr = put_TimesZOrder(TimesZOrder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(960)
inline IValueListPtr ICustom3DSeries::GetZValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_ZValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(961)
inline double ICustom3DSeries::GetZValue ( long Index ) {
    double _result = 0;
    HRESULT _hr = get_ZValue(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(962)
inline void ICustom3DSeries::PutZValue ( long Index, double Value ) {
    HRESULT _hr = put_ZValue(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(963)
inline IBrushPtr ICustom3DSeries::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(964)
inline IPenPtr ICustom3DSeries::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(965)
inline HRESULT ICustom3DSeries::AddArrayXYZ ( const _variant_t & XArray, const _variant_t & YArray, const _variant_t & ZArray ) {
    HRESULT _hr = raw_AddArrayXYZ(XArray, YArray, ZArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IErrorBarSeries wrapper method implementations
//

#pragma implementation_key(966)
inline IPenPtr IErrorBarSeries::GetErrorPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_ErrorPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(967)
inline IValueListPtr IErrorBarSeries::GetErrorValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_ErrorValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(968)
inline long IErrorBarSeries::GetErrorWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_ErrorWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(969)
inline void IErrorBarSeries::PutErrorWidth ( long ErrorWidth ) {
    HRESULT _hr = put_ErrorWidth(ErrorWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(970)
inline enum EErrorWidthUnits IErrorBarSeries::GetErrorWidthUnits ( ) {
    enum EErrorWidthUnits _result;
    HRESULT _hr = get_ErrorWidthUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(971)
inline void IErrorBarSeries::PutErrorWidthUnits ( enum EErrorWidthUnits ErrorWidthUnits ) {
    HRESULT _hr = put_ErrorWidthUnits(ErrorWidthUnits);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(972)
inline long IErrorBarSeries::AddErrorBar ( double AX, double AY, double AError, _bstr_t AXLabel, OLE_COLOR Value ) {
    long _result = 0;
    HRESULT _hr = raw_AddErrorBar(AX, AY, AError, AXLabel, Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVolumeSeries wrapper method implementations
//

#pragma implementation_key(973)
inline IValueListPtr IVolumeSeries::GetVolumeValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_VolumeValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(974)
inline IPenPtr IVolumeSeries::GetLinePen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_LinePen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(975)
inline VARIANT_BOOL IVolumeSeries::GetUseYOrigin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseYOrigin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(976)
inline void IVolumeSeries::PutUseYOrigin ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_UseYOrigin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(977)
inline double IVolumeSeries::GetYOrigin ( ) {
    double _result = 0;
    HRESULT _hr = get_YOrigin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(978)
inline void IVolumeSeries::PutYOrigin ( double Value ) {
    HRESULT _hr = put_YOrigin(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICustom3DPaletteSeries wrapper method implementations
//

#pragma implementation_key(979)
inline long ICustom3DPaletteSeries::AddPalette ( double Value, OLE_COLOR Color ) {
    long _result = 0;
    HRESULT _hr = raw_AddPalette(Value, Color, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(980)
inline OLE_COLOR ICustom3DPaletteSeries::GetStartColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_StartColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(981)
inline void ICustom3DPaletteSeries::PutStartColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_StartColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(982)
inline OLE_COLOR ICustom3DPaletteSeries::GetEndColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_EndColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(983)
inline void ICustom3DPaletteSeries::PutEndColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_EndColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(984)
inline long ICustom3DPaletteSeries::GetPaletteSteps ( ) {
    long _result = 0;
    HRESULT _hr = get_PaletteSteps(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(985)
inline void ICustom3DPaletteSeries::PutPaletteSteps ( long Value ) {
    HRESULT _hr = put_PaletteSteps(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(986)
inline VARIANT_BOOL ICustom3DPaletteSeries::GetUsePalette ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UsePalette(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(987)
inline void ICustom3DPaletteSeries::PutUsePalette ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_UsePalette(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(988)
inline VARIANT_BOOL ICustom3DPaletteSeries::GetUseColorRange ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseColorRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(989)
inline void ICustom3DPaletteSeries::PutUseColorRange ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_UseColorRange(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(990)
inline HRESULT ICustom3DPaletteSeries::ClearPalette ( ) {
    HRESULT _hr = raw_ClearPalette();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(991)
inline HRESULT ICustom3DPaletteSeries::CreateDefaultPalette ( long NumSteps ) {
    HRESULT _hr = raw_CreateDefaultPalette(NumSteps);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(992)
inline OLE_COLOR ICustom3DPaletteSeries::GetSurfacePaletteColor ( double Y ) {
    OLE_COLOR _result;
    HRESULT _hr = raw_GetSurfacePaletteColor(Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(993)
inline OLE_COLOR ICustom3DPaletteSeries::GetMidColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_MidColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(994)
inline void ICustom3DPaletteSeries::PutMidColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_MidColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(995)
inline HRESULT ICustom3DPaletteSeries::CreateRangePalette ( ) {
    HRESULT _hr = raw_CreateRangePalette();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(996)
inline enum EPaletteStyle ICustom3DPaletteSeries::GetPaletteStyle ( ) {
    enum EPaletteStyle _result;
    HRESULT _hr = get_PaletteStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(997)
inline void ICustom3DPaletteSeries::PutPaletteStyle ( enum EPaletteStyle Value ) {
    HRESULT _hr = put_PaletteStyle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICustom3DGridSeries wrapper method implementations
//

#pragma implementation_key(998)
inline long ICustom3DGridSeries::GetNumXValues ( ) {
    long _result = 0;
    HRESULT _hr = get_NumXValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(999)
inline void ICustom3DGridSeries::PutNumXValues ( long Value ) {
    HRESULT _hr = put_NumXValues(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1000)
inline long ICustom3DGridSeries::GetNumZValues ( ) {
    long _result = 0;
    HRESULT _hr = get_NumZValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1001)
inline void ICustom3DGridSeries::PutNumZValues ( long Value ) {
    HRESULT _hr = put_NumZValues(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1002)
inline double ICustom3DGridSeries::GetXZValue ( long X, long Z ) {
    double _result = 0;
    HRESULT _hr = raw_GetXZValue(X, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1003)
inline VARIANT_BOOL ICustom3DGridSeries::GetIrregularGrid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IrregularGrid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1004)
inline void ICustom3DGridSeries::PutIrregularGrid ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_IrregularGrid(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IBezierSeries wrapper method implementations
//

#pragma implementation_key(1005)
inline long IBezierSeries::GetNumBezierPoints ( ) {
    long _result = 0;
    HRESULT _hr = get_NumBezierPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1006)
inline void IBezierSeries::PutNumBezierPoints ( long Value ) {
    HRESULT _hr = put_NumBezierPoints(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1007)
inline enum EBezierStyle IBezierSeries::GetBezierStyle ( ) {
    enum EBezierStyle _result;
    HRESULT _hr = get_BezierStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1008)
inline void IBezierSeries::PutBezierStyle ( enum EBezierStyle Value ) {
    HRESULT _hr = put_BezierStyle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IErrorSeries wrapper method implementations
//

#pragma implementation_key(1009)
inline enum EErrorSeriesStyle IErrorSeries::GetErrorStyle ( ) {
    enum EErrorSeriesStyle _result;
    HRESULT _hr = get_ErrorStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1010)
inline void IErrorSeries::PutErrorStyle ( enum EErrorSeriesStyle Value ) {
    HRESULT _hr = put_ErrorStyle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPoint3DSeries wrapper method implementations
//

#pragma implementation_key(1011)
inline double IPoint3DSeries::GetDepthSize ( ) {
    double _result = 0;
    HRESULT _hr = get_DepthSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1012)
inline void IPoint3DSeries::PutDepthSize ( double Value ) {
    HRESULT _hr = put_DepthSize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1013)
inline IPointerPtr IPoint3DSeries::GetPointer ( ) {
    struct IPointer * _result = 0;
    HRESULT _hr = get_Pointer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPointerPtr(_result, false);
}

#pragma implementation_key(1014)
inline IPenPtr IPoint3DSeries::GetLinePen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_LinePen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

//
// interface ISurfaceSeries wrapper method implementations
//

#pragma implementation_key(1015)
inline VARIANT_BOOL ISurfaceSeries::GetDotFrame ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DotFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1016)
inline void ISurfaceSeries::PutDotFrame ( VARIANT_BOOL DotFrame ) {
    HRESULT _hr = put_DotFrame(DotFrame);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1017)
inline VARIANT_BOOL ISurfaceSeries::GetWireFrame ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WireFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1018)
inline void ISurfaceSeries::PutWireFrame ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_WireFrame(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1019)
inline IBrushPtr ISurfaceSeries::GetSideBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_SideBrush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(1020)
inline VARIANT_BOOL ISurfaceSeries::GetSmoothPalette ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SmoothPalette(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1021)
inline void ISurfaceSeries::PutSmoothPalette ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_SmoothPalette(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IBar3DSeries wrapper method implementations
//

#pragma implementation_key(1022)
inline long IBar3DSeries::AddBar ( double AX, double AY, double AOffset, _bstr_t ALabel, OLE_COLOR AColor ) {
    long _result = 0;
    HRESULT _hr = raw_AddBar(AX, AY, AOffset, ALabel, AColor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1023)
inline IValueListPtr IBar3DSeries::GetOffsetValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_OffsetValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

//
// interface IImageBarSeries wrapper method implementations
//

#pragma implementation_key(1024)
inline VARIANT_BOOL IImageBarSeries::LoadImage ( _bstr_t FileName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_LoadImage(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1025)
inline HRESULT IImageBarSeries::ClearImage ( ) {
    HRESULT _hr = raw_ClearImage();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1026)
inline VARIANT_BOOL IImageBarSeries::GetImageTiled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ImageTiled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1027)
inline void IImageBarSeries::PutImageTiled ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ImageTiled(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface INearestTool wrapper method implementations
//

#pragma implementation_key(1028)
inline IBrushPtr INearestTool::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(1029)
inline VARIANT_BOOL INearestTool::GetDrawLine ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DrawLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1030)
inline void INearestTool::PutDrawLine ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_DrawLine(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1031)
inline VARIANT_BOOL INearestTool::GetFullRepaint ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FullRepaint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1032)
inline void INearestTool::PutFullRepaint ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_FullRepaint(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1033)
inline IPenPtr INearestTool::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1034)
inline long INearestTool::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1035)
inline void INearestTool::PutSize ( long Value ) {
    HRESULT _hr = put_Size(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1036)
inline enum ENearestToolStyle INearestTool::GetStyle ( ) {
    enum ENearestToolStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1037)
inline void INearestTool::PutStyle ( enum ENearestToolStyle Value ) {
    HRESULT _hr = put_Style(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IColorBandTool wrapper method implementations
//

#pragma implementation_key(1038)
inline IBrushPtr IColorBandTool::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(1039)
inline IPenPtr IColorBandTool::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1040)
inline double IColorBandTool::GetEndValue ( ) {
    double _result = 0;
    HRESULT _hr = get_EndValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1041)
inline void IColorBandTool::PutEndValue ( double Value ) {
    HRESULT _hr = put_EndValue(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1042)
inline double IColorBandTool::GetStartValue ( ) {
    double _result = 0;
    HRESULT _hr = get_StartValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1043)
inline void IColorBandTool::PutStartValue ( double Value ) {
    HRESULT _hr = put_StartValue(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1044)
inline VARIANT_BOOL IColorBandTool::GetDrawBehind ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DrawBehind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1045)
inline void IColorBandTool::PutDrawBehind ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_DrawBehind(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1046)
inline OLE_COLOR IColorBandTool::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1047)
inline void IColorBandTool::PutColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_Color(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1048)
inline IGradientPtr IColorBandTool::GetGradient ( ) {
    struct IGradient * _result = 0;
    HRESULT _hr = get_Gradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGradientPtr(_result, false);
}

#pragma implementation_key(1049)
inline long IColorBandTool::GetTransparency ( ) {
    long _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1050)
inline void IColorBandTool::PutTransparency ( long Value ) {
    HRESULT _hr = put_Transparency(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IColorLineTool wrapper method implementations
//

#pragma implementation_key(1051)
inline IPenPtr IColorLineTool::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1052)
inline double IColorLineTool::GetValue ( ) {
    double _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1053)
inline void IColorLineTool::PutValue ( double Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1054)
inline VARIANT_BOOL IColorLineTool::GetAllowDrag ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowDrag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1055)
inline void IColorLineTool::PutAllowDrag ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AllowDrag(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1056)
inline VARIANT_BOOL IColorLineTool::Clicked ( long X, long Y ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Clicked(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1057)
inline VARIANT_BOOL IColorLineTool::GetDragRepaint ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DragRepaint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1058)
inline void IColorLineTool::PutDragRepaint ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_DragRepaint(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1059)
inline VARIANT_BOOL IColorLineTool::GetNoLimitDrag ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NoLimitDrag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1060)
inline void IColorLineTool::PutNoLimitDrag ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_NoLimitDrag(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IHighLowSeries wrapper method implementations
//

#pragma implementation_key(1061)
inline long IHighLowSeries::AddHighLow ( double AX, double AHigh, double ALow, _bstr_t AXLabel, OLE_COLOR AColor ) {
    long _result = 0;
    HRESULT _hr = raw_AddHighLow(AX, AHigh, ALow, AXLabel, AColor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1062)
inline IBrushPtr IHighLowSeries::GetHighBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_HighBrush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(1063)
inline IPenPtr IHighLowSeries::GetHighPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_HighPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1064)
inline IValueListPtr IHighLowSeries::GetHighValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_HighValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(1065)
inline IBrushPtr IHighLowSeries::GetLowBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_LowBrush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(1066)
inline IPenPtr IHighLowSeries::GetLowPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_LowPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1067)
inline IValueListPtr IHighLowSeries::GetLowValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_LowValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(1068)
inline IPenPtr IHighLowSeries::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

//
// interface ITitles wrapper method implementations
//

#pragma implementation_key(1069)
inline VARIANT_BOOL ITitles::GetAdjustFrame ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AdjustFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1070)
inline void ITitles::PutAdjustFrame ( VARIANT_BOOL AdjustFrame ) {
    HRESULT _hr = put_AdjustFrame(AdjustFrame);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1071)
inline enum ETitleAlignment ITitles::GetAlignment ( ) {
    enum ETitleAlignment _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1072)
inline void ITitles::PutAlignment ( enum ETitleAlignment Alignment ) {
    HRESULT _hr = put_Alignment(Alignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1073)
inline IBrushPtr ITitles::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(1074)
inline IPenPtr ITitles::GetFrame ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Frame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1075)
inline IStringsPtr ITitles::GetText ( ) {
    struct IStrings * _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IStringsPtr(_result, false);
}

#pragma implementation_key(1076)
inline VARIANT_BOOL ITitles::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1077)
inline void ITitles::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITriSurfaceSeries wrapper method implementations
//

#pragma implementation_key(1078)
inline IPenPtr ITriSurfaceSeries::GetBorder ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1079)
inline VARIANT_BOOL ITriSurfaceSeries::GetHideTriangles ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HideTriangles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1080)
inline void ITriSurfaceSeries::PutHideTriangles ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_HideTriangles(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1081)
inline VARIANT_BOOL ITriSurfaceSeries::GetCacheTriangles ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CacheTriangles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1082)
inline void ITriSurfaceSeries::PutCacheTriangles ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_CacheTriangles(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICustomBoxSeries wrapper method implementations
//

#pragma implementation_key(1083)
inline IPointerPtr ICustomBoxSeries::GetExtrOut ( ) {
    struct IPointer * _result = 0;
    HRESULT _hr = get_ExtrOut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPointerPtr(_result, false);
}

#pragma implementation_key(1084)
inline IPenPtr ICustomBoxSeries::GetMedianPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_MedianPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1085)
inline IPointerPtr ICustomBoxSeries::GetMildOut ( ) {
    struct IPointer * _result = 0;
    HRESULT _hr = get_MildOut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPointerPtr(_result, false);
}

#pragma implementation_key(1086)
inline double ICustomBoxSeries::GetPosition ( ) {
    double _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1087)
inline void ICustomBoxSeries::PutPosition ( double Value ) {
    HRESULT _hr = put_Position(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1088)
inline double ICustomBoxSeries::GetWhiskerLength ( ) {
    double _result = 0;
    HRESULT _hr = get_WhiskerLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1089)
inline void ICustomBoxSeries::PutWhiskerLength ( double Value ) {
    HRESULT _hr = put_WhiskerLength(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1090)
inline IPenPtr ICustomBoxSeries::GetWhiskerPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_WhiskerPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1091)
inline IPointerPtr ICustomBoxSeries::GetBox ( ) {
    struct IPointer * _result = 0;
    HRESULT _hr = get_Box(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPointerPtr(_result, false);
}

//
// interface IHorizBoxPlotSeries wrapper method implementations
//

#pragma implementation_key(1092)
inline double IHorizBoxPlotSeries::MaxYValue ( ) {
    double _result = 0;
    HRESULT _hr = raw_MaxYValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1093)
inline double IHorizBoxPlotSeries::MinYValue ( ) {
    double _result = 0;
    HRESULT _hr = raw_MinYValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IHistogramSeries wrapper method implementations
//

#pragma implementation_key(1094)
inline IPenPtr IHistogramSeries::GetLinesPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_LinesPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1095)
inline long IHistogramSeries::GetTransparency ( ) {
    long _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1096)
inline void IHistogramSeries::PutTransparency ( long Value ) {
    HRESULT _hr = put_Transparency(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1097)
inline IPenPtr IHistogramSeries::GetLinePen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_LinePen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1098)
inline IBrushPtr IHistogramSeries::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

//
// interface IColorGridSeries wrapper method implementations
//

#pragma implementation_key(1099)
inline double IColorGridSeries::MaxXValue ( ) {
    double _result = 0;
    HRESULT _hr = raw_MaxXValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1100)
inline double IColorGridSeries::MaxYValue ( ) {
    double _result = 0;
    HRESULT _hr = raw_MaxYValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1101)
inline double IColorGridSeries::MinYValue ( ) {
    double _result = 0;
    HRESULT _hr = raw_MinYValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IBarJoinSeries wrapper method implementations
//

#pragma implementation_key(1102)
inline IPenPtr IBarJoinSeries::GetJoinPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_JoinPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

//
// interface IWaterfallSeries wrapper method implementations
//

#pragma implementation_key(1103)
inline VARIANT_BOOL IWaterfallSeries::GetWaterfall ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Waterfall(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1104)
inline void IWaterfallSeries::PutWaterfall ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Waterfall(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1105)
inline IPenPtr IWaterfallSeries::GetWaterLines ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_WaterLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

//
// interface IContourSeries wrapper method implementations
//

#pragma implementation_key(1106)
inline long IContourSeries::GetNumLevels ( ) {
    long _result = 0;
    HRESULT _hr = get_NumLevels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1107)
inline void IContourSeries::PutNumLevels ( long Value ) {
    HRESULT _hr = put_NumLevels(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1108)
inline VARIANT_BOOL IContourSeries::GetYPositionLevel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_YPositionLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1109)
inline void IContourSeries::PutYPositionLevel ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_YPositionLevel(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1110)
inline double IContourSeries::GetYPosition ( ) {
    double _result = 0;
    HRESULT _hr = get_YPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1111)
inline void IContourSeries::PutYPosition ( double Value ) {
    HRESULT _hr = put_YPosition(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1112)
inline IContourLevelsPtr IContourSeries::GetLevels ( ) {
    struct IContourLevels * _result = 0;
    HRESULT _hr = get_Levels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IContourLevelsPtr(_result, false);
}

#pragma implementation_key(1113)
inline VARIANT_BOOL IContourSeries::GetAutomaticLevels ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutomaticLevels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1114)
inline void IContourSeries::PutAutomaticLevels ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AutomaticLevels(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1115)
inline HRESULT IContourSeries::CreateAutoLevels ( ) {
    HRESULT _hr = raw_CreateAutoLevels();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IBoxPlotSeries wrapper method implementations
//

#pragma implementation_key(1116)
inline double IBoxPlotSeries::MaxXValue ( ) {
    double _result = 0;
    HRESULT _hr = raw_MaxXValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1117)
inline double IBoxPlotSeries::MinXValue ( ) {
    double _result = 0;
    HRESULT _hr = raw_MinXValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ICursorTool wrapper method implementations
//

#pragma implementation_key(1118)
inline VARIANT_BOOL ICursorTool::GetFollowMouse ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FollowMouse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1119)
inline void ICursorTool::PutFollowMouse ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_FollowMouse(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1120)
inline IPenPtr ICursorTool::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1121)
inline VARIANT_BOOL ICursorTool::GetSnap ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Snap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1122)
inline void ICursorTool::PutSnap ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Snap(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1123)
inline enum ECursorToolStyle ICursorTool::GetStyle ( ) {
    enum ECursorToolStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1124)
inline void ICursorTool::PutStyle ( enum ECursorToolStyle Value ) {
    HRESULT _hr = put_Style(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1125)
inline double ICursorTool::GetXVal ( ) {
    double _result = 0;
    HRESULT _hr = get_XVal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1126)
inline void ICursorTool::PutXVal ( double Value ) {
    HRESULT _hr = put_XVal(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1127)
inline double ICursorTool::GetYVal ( ) {
    double _result = 0;
    HRESULT _hr = get_YVal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1128)
inline void ICursorTool::PutYVal ( double Value ) {
    HRESULT _hr = put_YVal(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IDrawLine wrapper method implementations
//

#pragma implementation_key(1129)
inline ITeePoint2DPtr IDrawLine::GetEndPos ( ) {
    struct ITeePoint2D * _result = 0;
    HRESULT _hr = get_EndPos(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeePoint2DPtr(_result, false);
}

#pragma implementation_key(1130)
inline ITeePoint2DPtr IDrawLine::GetStartPos ( ) {
    struct ITeePoint2D * _result = 0;
    HRESULT _hr = get_StartPos(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeePoint2DPtr(_result, false);
}

#pragma implementation_key(1131)
inline IPenPtr IDrawLine::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1132)
inline HRESULT IDrawLine::DrawHandles ( ) {
    HRESULT _hr = raw_DrawHandles();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1133)
inline struct TeeRect IDrawLine::EndHandle ( ) {
    struct TeeRect _result;
    HRESULT _hr = raw_EndHandle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1134)
inline struct TeeRect IDrawLine::StartHandle ( ) {
    struct TeeRect _result;
    HRESULT _hr = raw_StartHandle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDrawLineList wrapper method implementations
//

#pragma implementation_key(1135)
inline IDrawLinePtr IDrawLineList::GetItems ( long Index ) {
    struct IDrawLine * _result = 0;
    HRESULT _hr = get_Items(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawLinePtr(_result, false);
}

#pragma implementation_key(1136)
inline _variant_t IDrawLineList::GetControlDefault ( long Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ControlDefault(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1137)
inline HRESULT IDrawLineList::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1138)
inline HRESULT IDrawLineList::Delete ( long Index ) {
    HRESULT _hr = raw_Delete(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1139)
inline long IDrawLineList::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDrawLineTool wrapper method implementations
//

#pragma implementation_key(1140)
inline ITeePoint2DPtr IDrawLineTool::GetFromPoint ( ) {
    struct ITeePoint2D * _result = 0;
    HRESULT _hr = get_FromPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeePoint2DPtr(_result, false);
}

#pragma implementation_key(1141)
inline ITeePoint2DPtr IDrawLineTool::GetToPoint ( ) {
    struct ITeePoint2D * _result = 0;
    HRESULT _hr = get_ToPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeePoint2DPtr(_result, false);
}

#pragma implementation_key(1142)
inline ITeePoint2DPtr IDrawLineTool::AxisPoint ( double X, double Y ) {
    struct ITeePoint2D * _result = 0;
    HRESULT _hr = raw_AxisPoint(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeePoint2DPtr(_result, false);
}

#pragma implementation_key(1143)
inline long IDrawLineTool::Clicked ( long X, long Y ) {
    long _result = 0;
    HRESULT _hr = raw_Clicked(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1144)
inline HRESULT IDrawLineTool::DeleteSelected ( ) {
    HRESULT _hr = raw_DeleteSelected();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1145)
inline ITeePoint2DPtr IDrawLineTool::ScreenPoint ( long X, long Y ) {
    struct ITeePoint2D * _result = 0;
    HRESULT _hr = raw_ScreenPoint(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeePoint2DPtr(_result, false);
}

#pragma implementation_key(1146)
inline IDrawLineListPtr IDrawLineTool::GetLines ( ) {
    struct IDrawLineList * _result = 0;
    HRESULT _hr = get_Lines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawLineListPtr(_result, false);
}

#pragma implementation_key(1147)
inline long IDrawLineTool::GetSelected ( ) {
    long _result = 0;
    HRESULT _hr = get_Selected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1148)
inline void IDrawLineTool::PutSelected ( long Index ) {
    HRESULT _hr = put_Selected(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1149)
inline enum EMouseButton IDrawLineTool::GetButton ( ) {
    enum EMouseButton _result;
    HRESULT _hr = get_Button(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1150)
inline void IDrawLineTool::PutButton ( enum EMouseButton Value ) {
    HRESULT _hr = put_Button(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1151)
inline VARIANT_BOOL IDrawLineTool::GetEnableDraw ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableDraw(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1152)
inline void IDrawLineTool::PutEnableDraw ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_EnableDraw(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1153)
inline VARIANT_BOOL IDrawLineTool::GetEnableSelect ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableSelect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1154)
inline void IDrawLineTool::PutEnableSelect ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_EnableSelect(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1155)
inline IPenPtr IDrawLineTool::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1156)
inline long IDrawLineTool::AddLine ( double FromX, double FromY, double ToX, double ToY ) {
    long _result = 0;
    HRESULT _hr = raw_AddLine(FromX, FromY, ToX, ToY, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAxisArrowTool wrapper method implementations
//

#pragma implementation_key(1157)
inline enum EAxisArrowToolPosition IAxisArrowTool::GetPosition ( ) {
    enum EAxisArrowToolPosition _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1158)
inline void IAxisArrowTool::PutPosition ( enum EAxisArrowToolPosition Value ) {
    HRESULT _hr = put_Position(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1159)
inline IBrushPtr IAxisArrowTool::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(1160)
inline long IAxisArrowTool::GetLength ( ) {
    long _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1161)
inline void IAxisArrowTool::PutLength ( long Value ) {
    HRESULT _hr = put_Length(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1162)
inline IPenPtr IAxisArrowTool::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1163)
inline long IAxisArrowTool::GetScrollPercent ( ) {
    long _result = 0;
    HRESULT _hr = get_ScrollPercent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1164)
inline void IAxisArrowTool::PutScrollPercent ( long Value ) {
    HRESULT _hr = put_ScrollPercent(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1165)
inline VARIANT_BOOL IAxisArrowTool::GetScrollInverted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ScrollInverted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1166)
inline void IAxisArrowTool::PutScrollInverted ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ScrollInverted(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IMapPolygon wrapper method implementations
//

#pragma implementation_key(1167)
inline IBrushPtr IMapPolygon::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(1168)
inline OLE_COLOR IMapPolygon::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1169)
inline void IMapPolygon::PutColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_Color(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1170)
inline IGradientPtr IMapPolygon::GetGradient ( ) {
    struct IGradient * _result = 0;
    HRESULT _hr = get_Gradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGradientPtr(_result, false);
}

#pragma implementation_key(1171)
inline VARIANT_BOOL IMapPolygon::GetParentBrush ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ParentBrush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1172)
inline void IMapPolygon::PutParentBrush ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ParentBrush(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1173)
inline VARIANT_BOOL IMapPolygon::GetParentPen ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ParentPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1174)
inline void IMapPolygon::PutParentPen ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ParentPen(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1175)
inline IPenPtr IMapPolygon::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1176)
inline _bstr_t IMapPolygon::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1177)
inline void IMapPolygon::PutText ( _bstr_t Value ) {
    HRESULT _hr = put_Text(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1178)
inline double IMapPolygon::GetZ ( ) {
    double _result = 0;
    HRESULT _hr = get_Z(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1179)
inline void IMapPolygon::PutZ ( double Value ) {
    HRESULT _hr = put_Z(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1180)
inline long IMapPolygon::AddXY ( double X, double Y ) {
    long _result = 0;
    HRESULT _hr = raw_AddXY(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMapPolygonList wrapper method implementations
//

#pragma implementation_key(1181)
inline long IMapPolygonList::Add ( ) {
    long _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1182)
inline IMapPolygonPtr IMapPolygonList::GetPolygon ( long Index ) {
    struct IMapPolygon * _result = 0;
    HRESULT _hr = get_Polygon(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMapPolygonPtr(_result, false);
}

//
// interface IMapSeries wrapper method implementations
//

#pragma implementation_key(1183)
inline IMapPolygonListPtr IMapSeries::GetShapes ( ) {
    struct IMapPolygonList * _result = 0;
    HRESULT _hr = get_Shapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMapPolygonListPtr(_result, false);
}

//
// interface IFunnelSeries wrapper method implementations
//

#pragma implementation_key(1184)
inline long IFunnelSeries::AddSegment ( double AQuote, double AOpportunity, _bstr_t ALabel, OLE_COLOR AColor ) {
    long _result = 0;
    HRESULT _hr = raw_AddSegment(AQuote, AOpportunity, ALabel, AColor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1185)
inline HRESULT IFunnelSeries::Recalc ( ) {
    HRESULT _hr = raw_Recalc();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1186)
inline IBrushPtr IFunnelSeries::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(1187)
inline IPenPtr IFunnelSeries::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1188)
inline IPenPtr IFunnelSeries::GetLinesPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_LinesPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1189)
inline VARIANT_BOOL IFunnelSeries::GetAutoUpdate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoUpdate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1190)
inline void IFunnelSeries::PutAutoUpdate ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AutoUpdate(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1191)
inline VARIANT_BOOL IFunnelSeries::GetQuotesSorted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_QuotesSorted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1192)
inline void IFunnelSeries::PutQuotesSorted ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_QuotesSorted(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1193)
inline double IFunnelSeries::GetDifferenceLimit ( ) {
    double _result = 0;
    HRESULT _hr = get_DifferenceLimit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1194)
inline void IFunnelSeries::PutDifferenceLimit ( double Value ) {
    HRESULT _hr = put_DifferenceLimit(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1195)
inline OLE_COLOR IFunnelSeries::GetAboveColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_AboveColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1196)
inline void IFunnelSeries::PutAboveColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_AboveColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1197)
inline OLE_COLOR IFunnelSeries::GetWithinColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_WithinColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1198)
inline void IFunnelSeries::PutWithinColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_WithinColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1199)
inline OLE_COLOR IFunnelSeries::GetBelowColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BelowColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1200)
inline void IFunnelSeries::PutBelowColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_BelowColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1201)
inline IValueListPtr IFunnelSeries::GetOpportunityValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_OpportunityValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(1202)
inline IValueListPtr IFunnelSeries::GetQuoteValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_QuoteValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

//
// interface ILegend wrapper method implementations
//

#pragma implementation_key(1203)
inline enum ELegendAlignment ILegend::GetAlignment ( ) {
    enum ELegendAlignment _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1204)
inline void ILegend::PutAlignment ( enum ELegendAlignment Alignment ) {
    HRESULT _hr = put_Alignment(Alignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1205)
inline long ILegend::GetColorWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_ColorWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1206)
inline void ILegend::PutColorWidth ( long ColorWidth ) {
    HRESULT _hr = put_ColorWidth(ColorWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1207)
inline IPenPtr ILegend::GetDividingLines ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_DividingLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1208)
inline long ILegend::GetFirstValue ( ) {
    long _result = 0;
    HRESULT _hr = get_FirstValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1209)
inline void ILegend::PutFirstValue ( long FirstValue ) {
    HRESULT _hr = put_FirstValue(FirstValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1210)
inline IPenPtr ILegend::GetFrame ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Frame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1211)
inline long ILegend::GetHorizMargin ( ) {
    long _result = 0;
    HRESULT _hr = get_HorizMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1212)
inline void ILegend::PutHorizMargin ( long HorizMargin ) {
    HRESULT _hr = put_HorizMargin(HorizMargin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1213)
inline VARIANT_BOOL ILegend::GetInverted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Inverted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1214)
inline void ILegend::PutInverted ( VARIANT_BOOL Inverted ) {
    HRESULT _hr = put_Inverted(Inverted);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1215)
inline enum ELegendStyle ILegend::GetLegendStyle ( ) {
    enum ELegendStyle _result;
    HRESULT _hr = get_LegendStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1216)
inline void ILegend::PutLegendStyle ( enum ELegendStyle LegendStyle ) {
    HRESULT _hr = put_LegendStyle(LegendStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1217)
inline VARIANT_BOOL ILegend::GetResizeChart ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ResizeChart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1218)
inline void ILegend::PutResizeChart ( VARIANT_BOOL ResizeChart ) {
    HRESULT _hr = put_ResizeChart(ResizeChart);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1219)
inline enum ELegendTextStyle ILegend::GetTextStyle ( ) {
    enum ELegendTextStyle _result;
    HRESULT _hr = get_TextStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1220)
inline void ILegend::PutTextStyle ( enum ELegendTextStyle TextStyle ) {
    HRESULT _hr = put_TextStyle(TextStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1221)
inline long ILegend::GetTopPos ( ) {
    long _result = 0;
    HRESULT _hr = get_TopPos(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1222)
inline void ILegend::PutTopPos ( long TopPos ) {
    HRESULT _hr = put_TopPos(TopPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1223)
inline long ILegend::GetVertMargin ( ) {
    long _result = 0;
    HRESULT _hr = get_VertMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1224)
inline void ILegend::PutVertMargin ( long VertMargin ) {
    HRESULT _hr = put_VertMargin(VertMargin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1225)
inline VARIANT_BOOL ILegend::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1226)
inline void ILegend::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1227)
inline _bstr_t ILegend::Formatted ( long SomeSeriesOrValueIndex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Formatted(SomeSeriesOrValueIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1228)
inline _bstr_t ILegend::FormattedValue ( long aSeries, long SomeValueIndex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_FormattedValue(aSeries, SomeValueIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1229)
inline long ILegend::Clicked ( long X, long Y ) {
    long _result = 0;
    HRESULT _hr = raw_Clicked(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1230)
inline long ILegend::GetMaxNumRows ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxNumRows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1231)
inline void ILegend::PutMaxNumRows ( long Value ) {
    HRESULT _hr = put_MaxNumRows(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1232)
inline HRESULT ILegend::BackImageLoad ( _bstr_t FileName ) {
    HRESULT _hr = raw_BackImageLoad(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1233)
inline HRESULT ILegend::BackImageClear ( ) {
    HRESULT _hr = raw_BackImageClear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1234)
inline IBrushPtr ILegend::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(1235)
inline _variant_t ILegend::GetSeries ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Series(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1236)
inline void ILegend::PutSeries ( const _variant_t & Value ) {
    HRESULT _hr = put_Series(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1237)
inline HRESULT ILegend::DrawLegend ( ) {
    HRESULT _hr = raw_DrawLegend();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1238)
inline VARIANT_BOOL ILegend::GetFontSeriesColor ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FontSeriesColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1239)
inline void ILegend::PutFontSeriesColor ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_FontSeriesColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1240)
inline VARIANT_BOOL ILegend::GetCurrentPage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CurrentPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1241)
inline void ILegend::PutCurrentPage ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_CurrentPage(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1242)
inline ILegendSymbolPtr ILegend::GetSymbol ( ) {
    struct ILegendSymbol * _result = 0;
    HRESULT _hr = get_Symbol(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILegendSymbolPtr(_result, false);
}

#pragma implementation_key(1243)
inline VARIANT_BOOL ILegend::GetCheckBoxes ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CheckBoxes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1244)
inline void ILegend::PutCheckBoxes ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_CheckBoxes(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1245)
inline VARIANT_BOOL ILegend::GetColumnWidthAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ColumnWidthAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1246)
inline void ILegend::PutColumnWidthAuto ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ColumnWidthAuto(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1247)
inline long ILegend::GetColumnWidths ( long Index ) {
    long _result = 0;
    HRESULT _hr = get_ColumnWidths(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1248)
inline void ILegend::PutColumnWidths ( long Index, long Value ) {
    HRESULT _hr = put_ColumnWidths(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1249)
inline long ILegend::GetVertspacing ( ) {
    long _result = 0;
    HRESULT _hr = get_Vertspacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1250)
inline void ILegend::PutVertspacing ( long Value ) {
    HRESULT _hr = put_Vertspacing(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1251)
inline VARIANT_BOOL ILegend::GetVertical ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Vertical(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ITeeShapePanel wrapper method implementations
//

#pragma implementation_key(1252)
inline IPenPtr ITeeShapePanel::GetFrame ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Frame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

//
// interface IAnnotationTool wrapper method implementations
//

#pragma implementation_key(1253)
inline enum EAnnotationPosition IAnnotationTool::GetPosition ( ) {
    enum EAnnotationPosition _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1254)
inline void IAnnotationTool::PutPosition ( enum EAnnotationPosition Value ) {
    HRESULT _hr = put_Position(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1255)
inline ITeeShapePanelPtr IAnnotationTool::GetShape ( ) {
    struct ITeeShapePanel * _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeShapePanelPtr(_result, false);
}

#pragma implementation_key(1256)
inline _bstr_t IAnnotationTool::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1257)
inline void IAnnotationTool::PutText ( _bstr_t Value ) {
    HRESULT _hr = put_Text(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPageNumTool wrapper method implementations
//

#pragma implementation_key(1258)
inline _bstr_t IPageNumTool::GetFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1259)
inline void IPageNumTool::PutFormat ( _bstr_t Value ) {
    HRESULT _hr = put_Format(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITools wrapper method implementations
//

#pragma implementation_key(1260)
inline ICursorToolPtr ITools::GetasTeeCursor ( ) {
    struct ICursorTool * _result = 0;
    HRESULT _hr = get_asTeeCursor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICursorToolPtr(_result, false);
}

#pragma implementation_key(1261)
inline IDragMarksToolPtr ITools::GetasDragMarks ( ) {
    struct IDragMarksTool * _result = 0;
    HRESULT _hr = get_asDragMarks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDragMarksToolPtr(_result, false);
}

#pragma implementation_key(1262)
inline IAxisArrowToolPtr ITools::GetasAxisArrow ( ) {
    struct IAxisArrowTool * _result = 0;
    HRESULT _hr = get_asAxisArrow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAxisArrowToolPtr(_result, false);
}

#pragma implementation_key(1263)
inline IDrawLineToolPtr ITools::GetasDrawLine ( ) {
    struct IDrawLineTool * _result = 0;
    HRESULT _hr = get_asDrawLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDrawLineToolPtr(_result, false);
}

#pragma implementation_key(1264)
inline INearestToolPtr ITools::GetasNearest ( ) {
    struct INearestTool * _result = 0;
    HRESULT _hr = get_asNearest(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return INearestToolPtr(_result, false);
}

#pragma implementation_key(1265)
inline IColorBandToolPtr ITools::GetasColorband ( ) {
    struct IColorBandTool * _result = 0;
    HRESULT _hr = get_asColorband(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IColorBandToolPtr(_result, false);
}

#pragma implementation_key(1266)
inline IColorLineToolPtr ITools::GetasColorLine ( ) {
    struct IColorLineTool * _result = 0;
    HRESULT _hr = get_asColorLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IColorLineToolPtr(_result, false);
}

#pragma implementation_key(1267)
inline IRotateToolPtr ITools::GetasRotate ( ) {
    struct IRotateTool * _result = 0;
    HRESULT _hr = get_asRotate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRotateToolPtr(_result, false);
}

#pragma implementation_key(1268)
inline IMarksTipToolPtr ITools::GetasMarksTip ( ) {
    struct IMarksTipTool * _result = 0;
    HRESULT _hr = get_asMarksTip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMarksTipToolPtr(_result, false);
}

#pragma implementation_key(1269)
inline IChartImageToolPtr ITools::GetasChartImage ( ) {
    struct IChartImageTool * _result = 0;
    HRESULT _hr = get_asChartImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChartImageToolPtr(_result, false);
}

#pragma implementation_key(1270)
inline IAnnotationToolPtr ITools::GetasAnnotation ( ) {
    struct IAnnotationTool * _result = 0;
    HRESULT _hr = get_asAnnotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAnnotationToolPtr(_result, false);
}

#pragma implementation_key(1271)
inline IPageNumToolPtr ITools::GetasPageNum ( ) {
    struct IPageNumTool * _result = 0;
    HRESULT _hr = get_asPageNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPageNumToolPtr(_result, false);
}

#pragma implementation_key(1272)
inline VARIANT_BOOL ITools::GetActive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1273)
inline void ITools::PutActive ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Active(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1274)
inline _bstr_t ITools::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1275)
inline enum EToolClass ITools::GetToolType ( ) {
    enum EToolClass _result;
    HRESULT _hr = get_ToolType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IToolList wrapper method implementations
//

#pragma implementation_key(1276)
inline long IToolList::Add ( enum EToolClass ToolClass ) {
    long _result = 0;
    HRESULT _hr = raw_Add(ToolClass, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1277)
inline IToolsPtr IToolList::GetItems ( long Index ) {
    struct ITools * _result = 0;
    HRESULT _hr = get_Items(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IToolsPtr(_result, false);
}

#pragma implementation_key(1278)
inline _variant_t IToolList::GetControlDefault ( long Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ControlDefault(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1279)
inline HRESULT IToolList::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1280)
inline HRESULT IToolList::Delete ( long Index ) {
    HRESULT _hr = raw_Delete(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1281)
inline long IToolList::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ICircledSeries wrapper method implementations
//

#pragma implementation_key(1282)
inline long ICircledSeries::GetXRadius ( ) {
    long _result = 0;
    HRESULT _hr = get_XRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1283)
inline void ICircledSeries::PutXRadius ( long XRadius ) {
    HRESULT _hr = put_XRadius(XRadius);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1284)
inline long ICircledSeries::GetYRadius ( ) {
    long _result = 0;
    HRESULT _hr = get_YRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1285)
inline void ICircledSeries::PutYRadius ( long YRadius ) {
    HRESULT _hr = put_YRadius(YRadius);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1286)
inline long ICircledSeries::GetXCenter ( ) {
    long _result = 0;
    HRESULT _hr = get_XCenter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1287)
inline long ICircledSeries::GetYCenter ( ) {
    long _result = 0;
    HRESULT _hr = get_YCenter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1288)
inline long ICircledSeries::GetCircleWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_CircleWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1289)
inline long ICircledSeries::GetCircleHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_CircleHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1290)
inline OLE_COLOR ICircledSeries::GetCircleBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_CircleBackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1291)
inline void ICircledSeries::PutCircleBackColor ( OLE_COLOR CircleBackColor ) {
    HRESULT _hr = put_CircleBackColor(CircleBackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1292)
inline VARIANT_BOOL ICircledSeries::GetCircled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Circled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1293)
inline void ICircledSeries::PutCircled ( VARIANT_BOOL Circled ) {
    HRESULT _hr = put_Circled(Circled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1294)
inline long ICircledSeries::GetRotationAngle ( ) {
    long _result = 0;
    HRESULT _hr = get_RotationAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1295)
inline void ICircledSeries::PutRotationAngle ( long RotationAngle ) {
    HRESULT _hr = put_RotationAngle(RotationAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1296)
inline struct TeePoint2D ICircledSeries::AngleToPoint ( double Angle, double AXRadius, double AYRadius ) {
    struct TeePoint2D _result;
    HRESULT _hr = raw_AngleToPoint(Angle, AXRadius, AYRadius, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1297)
inline double ICircledSeries::PointToAngle ( long XCoord, long YCoord ) {
    double _result = 0;
    HRESULT _hr = raw_PointToAngle(XCoord, YCoord, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPieSeries wrapper method implementations
//

#pragma implementation_key(1298)
inline VARIANT_BOOL IPieSeries::GetUsePatterns ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UsePatterns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1299)
inline void IPieSeries::PutUsePatterns ( VARIANT_BOOL UsePatterns ) {
    HRESULT _hr = put_UsePatterns(UsePatterns);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1300)
inline IValueListPtr IPieSeries::GetPieValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_PieValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(1301)
inline VARIANT_BOOL IPieSeries::GetDark3D ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Dark3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1302)
inline void IPieSeries::PutDark3D ( VARIANT_BOOL Dark3D ) {
    HRESULT _hr = put_Dark3D(Dark3D);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1303)
inline long IPieSeries::GetExplodeBiggest ( ) {
    long _result = 0;
    HRESULT _hr = get_ExplodeBiggest(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1304)
inline void IPieSeries::PutExplodeBiggest ( long Value ) {
    HRESULT _hr = put_ExplodeBiggest(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1305)
inline IPieOtherSlicePtr IPieSeries::GetOtherSlice ( ) {
    struct IPieOtherSlice * _result = 0;
    HRESULT _hr = get_OtherSlice(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPieOtherSlicePtr(_result, false);
}

#pragma implementation_key(1306)
inline IExplodedSlicesPtr IPieSeries::GetExplodedSlice ( ) {
    struct IExplodedSlices * _result = 0;
    HRESULT _hr = get_ExplodedSlice(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExplodedSlicesPtr(_result, false);
}

#pragma implementation_key(1307)
inline IPenPtr IPieSeries::GetPiePen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_PiePen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1308)
inline ITeeShadowPtr IPieSeries::GetShadow ( ) {
    struct ITeeShadow * _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeShadowPtr(_result, false);
}

#pragma implementation_key(1309)
inline long IPieSeries::GetAngleSize ( ) {
    long _result = 0;
    HRESULT _hr = get_AngleSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1310)
inline void IPieSeries::PutAngleSize ( long Value ) {
    HRESULT _hr = put_AngleSize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICustomPolarSeries wrapper method implementations
//

#pragma implementation_key(1311)
inline double ICustomPolarSeries::GetAngleIncrement ( ) {
    double _result = 0;
    HRESULT _hr = get_AngleIncrement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1312)
inline void ICustomPolarSeries::PutAngleIncrement ( double AngleIncrement ) {
    HRESULT _hr = put_AngleIncrement(AngleIncrement);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1313)
inline VARIANT_BOOL ICustomPolarSeries::GetCloseCircle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CloseCircle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1314)
inline void ICustomPolarSeries::PutCloseCircle ( VARIANT_BOOL CloseCircle ) {
    HRESULT _hr = put_CloseCircle(CloseCircle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1315)
inline IPenPtr ICustomPolarSeries::GetPen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Pen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1316)
inline IPointerPtr ICustomPolarSeries::GetPointer ( ) {
    struct IPointer * _result = 0;
    HRESULT _hr = get_Pointer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPointerPtr(_result, false);
}

#pragma implementation_key(1317)
inline double ICustomPolarSeries::GetRadiusIncrement ( ) {
    double _result = 0;
    HRESULT _hr = get_RadiusIncrement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1318)
inline void ICustomPolarSeries::PutRadiusIncrement ( double RadiusIncrement ) {
    HRESULT _hr = put_RadiusIncrement(RadiusIncrement);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1319)
inline IValueListPtr ICustomPolarSeries::GetAngleValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_AngleValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(1320)
inline IValueListPtr ICustomPolarSeries::GetRadiusValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_RadiusValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(1321)
inline HRESULT ICustomPolarSeries::DrawRing ( double Value, long Z ) {
    HRESULT _hr = raw_DrawRing(Value, Z);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1322)
inline IPenPtr ICustomPolarSeries::GetCirclePen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_CirclePen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1323)
inline ICircleLabelsPtr ICustomPolarSeries::GetCircleLabels ( ) {
    struct ICircleLabels * _result = 0;
    HRESULT _hr = get_CircleLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICircleLabelsPtr(_result, false);
}

#pragma implementation_key(1324)
inline IBrushPtr ICustomPolarSeries::GetBrush ( ) {
    struct IBrush * _result = 0;
    HRESULT _hr = get_Brush(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBrushPtr(_result, false);
}

#pragma implementation_key(1325)
inline HRESULT ICustomPolarSeries::LoadBackImage ( _bstr_t FileName ) {
    HRESULT _hr = raw_LoadBackImage(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1326)
inline HRESULT ICustomPolarSeries::ClearBackImage ( ) {
    HRESULT _hr = raw_ClearBackImage();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1327)
inline VARIANT_BOOL ICustomPolarSeries::GetClockWiseLabels ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ClockWiseLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1328)
inline void ICustomPolarSeries::PutClockWiseLabels ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ClockWiseLabels(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1329)
inline VARIANT_BOOL ICustomPolarSeries::GetCircleLabelsInside ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CircleLabelsInside(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1330)
inline void ICustomPolarSeries::PutCircleLabelsInside ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_CircleLabelsInside(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1331)
inline long ICustomPolarSeries::GetTransparency ( ) {
    long _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1332)
inline void ICustomPolarSeries::PutTransparency ( long Value ) {
    HRESULT _hr = put_Transparency(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPolarSeries wrapper method implementations
//

#pragma implementation_key(1333)
inline long IPolarSeries::AddPolar ( double Angle, double Value, _bstr_t ALabel, OLE_COLOR Valu ) {
    long _result = 0;
    HRESULT _hr = raw_AddPolar(Angle, Value, ALabel, Valu, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IClockSeries wrapper method implementations
//

#pragma implementation_key(1334)
inline VARIANT_BOOL IClockSeries::GetRomanNumbers ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RomanNumbers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1335)
inline void IClockSeries::PutRomanNumbers ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_RomanNumbers(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1336)
inline IPenPtr IClockSeries::GetPenHours ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_PenHours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1337)
inline IPenPtr IClockSeries::GetPenMinutes ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_PenMinutes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1338)
inline IPenPtr IClockSeries::GetPenSeconds ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_PenSeconds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

//
// interface IDonutSeries wrapper method implementations
//

#pragma implementation_key(1339)
inline long IDonutSeries::GetDonutPercent ( ) {
    long _result = 0;
    HRESULT _hr = get_DonutPercent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1340)
inline void IDonutSeries::PutDonutPercent ( long Value ) {
    HRESULT _hr = put_DonutPercent(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISmithSeries wrapper method implementations
//

#pragma implementation_key(1341)
inline IPenPtr ISmithSeries::GetCCirclePen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_CCirclePen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1342)
inline IPenPtr ISmithSeries::GetCirclePen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_CirclePen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1343)
inline VARIANT_BOOL ISmithSeries::GetCLabels ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1344)
inline void ISmithSeries::PutCLabels ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_CLabels(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1345)
inline ITeeFontPtr ISmithSeries::GetCLabelsFont ( ) {
    struct ITeeFont * _result = 0;
    HRESULT _hr = get_CLabelsFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeFontPtr(_result, false);
}

#pragma implementation_key(1346)
inline IValueListPtr ISmithSeries::GetResistenceValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_ResistenceValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(1347)
inline IValueListPtr ISmithSeries::GetReactanceValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_ReactanceValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(1348)
inline IPointerPtr ISmithSeries::GetPointer ( ) {
    struct IPointer * _result = 0;
    HRESULT _hr = get_Pointer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPointerPtr(_result, false);
}

#pragma implementation_key(1349)
inline IPenPtr ISmithSeries::GetRCirclePen ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_RCirclePen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1350)
inline VARIANT_BOOL ISmithSeries::GetRLabels ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1351)
inline void ISmithSeries::PutRLabels ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_RLabels(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1352)
inline ITeeFontPtr ISmithSeries::GetRLabelsFont ( ) {
    struct ITeeFont * _result = 0;
    HRESULT _hr = get_RLabelsFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeFontPtr(_result, false);
}

//
// interface ITChart wrapper method implementations
//

#pragma implementation_key(1353)
inline IAspectPtr ITChart::GetAspect ( ) {
    struct IAspect * _result = 0;
    HRESULT _hr = get_Aspect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAspectPtr(_result, false);
}

#pragma implementation_key(1354)
inline IAxesPtr ITChart::GetAxis ( ) {
    struct IAxes * _result = 0;
    HRESULT _hr = get_Axis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAxesPtr(_result, false);
}

#pragma implementation_key(1355)
inline ICanvasPtr ITChart::GetCanvas ( ) {
    struct ICanvas * _result = 0;
    HRESULT _hr = get_Canvas(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICanvasPtr(_result, false);
}

#pragma implementation_key(1356)
inline VARIANT_BOOL ITChart::GetClipPoints ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ClipPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1357)
inline void ITChart::PutClipPoints ( VARIANT_BOOL ClipPoints ) {
    HRESULT _hr = put_ClipPoints(ClipPoints);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1358)
inline short ITChart::GetCursor ( ) {
    short _result = 0;
    HRESULT _hr = get_Cursor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1359)
inline void ITChart::PutCursor ( short Cursor ) {
    HRESULT _hr = put_Cursor(Cursor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1360)
inline short ITChart::GetDragCursor ( ) {
    short _result = 0;
    HRESULT _hr = get_DragCursor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1361)
inline void ITChart::PutDragCursor ( short DragCursor ) {
    HRESULT _hr = put_DragCursor(DragCursor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1362)
inline enum EDragMode ITChart::GetDragMode ( ) {
    enum EDragMode _result;
    HRESULT _hr = get_DragMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1363)
inline void ITChart::PutDragMode ( enum EDragMode DragMode ) {
    HRESULT _hr = put_DragMode(DragMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1364)
inline VARIANT_BOOL ITChart::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1365)
inline void ITChart::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1366)
inline IExportPtr ITChart::GetExport ( ) {
    struct IExport * _result = 0;
    HRESULT _hr = get_Export(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExportPtr(_result, false);
}

#pragma implementation_key(1367)
inline ITitlesPtr ITChart::GetFooter ( ) {
    struct ITitles * _result = 0;
    HRESULT _hr = get_Footer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITitlesPtr(_result, false);
}

#pragma implementation_key(1368)
inline IPenPtr ITChart::GetFrame ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Frame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1369)
inline ITitlesPtr ITChart::GetHeader ( ) {
    struct ITitles * _result = 0;
    HRESULT _hr = get_Header(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITitlesPtr(_result, false);
}

#pragma implementation_key(1370)
inline long ITChart::GetHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1371)
inline void ITChart::PutHeight ( long Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1372)
inline IImportPtr ITChart::GetImport ( ) {
    struct IImport * _result = 0;
    HRESULT _hr = get_Import(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IImportPtr(_result, false);
}

#pragma implementation_key(1373)
inline long ITChart::GetLeft ( ) {
    long _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1374)
inline void ITChart::PutLeft ( long Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1375)
inline ILegendPtr ITChart::GetLegend ( ) {
    struct ILegend * _result = 0;
    HRESULT _hr = get_Legend(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILegendPtr(_result, false);
}

#pragma implementation_key(1376)
inline IPagePtr ITChart::GetPage ( ) {
    struct IPage * _result = 0;
    HRESULT _hr = get_Page(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPagePtr(_result, false);
}

#pragma implementation_key(1377)
inline IPanelPtr ITChart::GetPanel ( ) {
    struct IPanel * _result = 0;
    HRESULT _hr = get_Panel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPanelPtr(_result, false);
}

#pragma implementation_key(1378)
inline IPrinterPtr ITChart::GetPrinter ( ) {
    struct IPrinter * _result = 0;
    HRESULT _hr = get_Printer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPrinterPtr(_result, false);
}

#pragma implementation_key(1379)
inline IScrollPtr ITChart::GetScroll ( ) {
    struct IScroll * _result = 0;
    HRESULT _hr = get_Scroll(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IScrollPtr(_result, false);
}

#pragma implementation_key(1380)
inline ISeriesPtr ITChart::GetaSeries ( long SeriesIndex ) {
    struct ISeries * _result = 0;
    HRESULT _hr = get_aSeries(SeriesIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISeriesPtr(_result, false);
}

#pragma implementation_key(1381)
inline long ITChart::GetSeriesCount ( ) {
    long _result = 0;
    HRESULT _hr = get_SeriesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1382)
inline long ITChart::GetTop ( ) {
    long _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1383)
inline void ITChart::PutTop ( long Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1384)
inline VARIANT_BOOL ITChart::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1385)
inline void ITChart::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1386)
inline IWallsPtr ITChart::GetWalls ( ) {
    struct IWalls * _result = 0;
    HRESULT _hr = get_Walls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWallsPtr(_result, false);
}

#pragma implementation_key(1387)
inline long ITChart::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1388)
inline void ITChart::PutWidth ( long Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1389)
inline IZoomPtr ITChart::GetZoom ( ) {
    struct IZoom * _result = 0;
    HRESULT _hr = get_Zoom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IZoomPtr(_result, false);
}

#pragma implementation_key(1390)
inline HRESULT ITChart::AboutBox ( ) {
    HRESULT _hr = raw_AboutBox();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1391)
inline long ITChart::AddSeries ( enum ESeriesClass SeriesClass ) {
    long _result = 0;
    HRESULT _hr = raw_AddSeries(SeriesClass, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1392)
inline HRESULT ITChart::ChangeSeriesType ( long SeriesIndex, enum ESeriesClass NewSeriesType ) {
    HRESULT _hr = raw_ChangeSeriesType(SeriesIndex, NewSeriesType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1393)
inline long ITChart::CloneSeries ( long SourceSeriesIndex ) {
    long _result = 0;
    HRESULT _hr = raw_CloneSeries(SourceSeriesIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1394)
inline HRESULT ITChart::Draw ( long DC, long Left, long Top, long Right, long Bottom ) {
    HRESULT _hr = raw_Draw(DC, Left, Top, Right, Bottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1395)
inline HRESULT ITChart::ExchangeSeries ( long Series1, long Series2 ) {
    HRESULT _hr = raw_ExchangeSeries(Series1, Series2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1396)
inline double ITChart::GetDateTimeStep ( enum EDateTimeStep DateTimeStep ) {
    double _result = 0;
    HRESULT _hr = raw_GetDateTimeStep(DateTimeStep, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1397)
inline OLE_COLOR ITChart::GetFreeSeriesColor ( VARIANT_BOOL CheckBackgroundColor ) {
    OLE_COLOR _result;
    HRESULT _hr = raw_GetFreeSeriesColor(CheckBackgroundColor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1398)
inline ISeriesPtr ITChart::GetLabelsSeries ( enum EAxisType DestAxis ) {
    struct ISeries * _result = 0;
    HRESULT _hr = raw_GetLabelsSeries(DestAxis, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISeriesPtr(_result, false);
}

#pragma implementation_key(1399)
inline VARIANT_BOOL ITChart::IsFreeSeriesColor ( OLE_COLOR AColor, VARIANT_BOOL CheckBackgroundColor ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsFreeSeriesColor(AColor, CheckBackgroundColor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1400)
inline HRESULT ITChart::RemoveAllSeries ( ) {
    HRESULT _hr = raw_RemoveAllSeries();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1401)
inline HRESULT ITChart::RemoveSeries ( long SeriesIndex ) {
    HRESULT _hr = raw_RemoveSeries(SeriesIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1402)
inline HRESULT ITChart::Repaint ( ) {
    HRESULT _hr = raw_Repaint();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1403)
inline _bstr_t ITChart::SeriesTitleLegend ( long ASeriesIndex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_SeriesTitleLegend(ASeriesIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1404)
inline HRESULT ITChart::ShowEditor ( long SeriesIndex ) {
    HRESULT _hr = raw_ShowEditor(SeriesIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1405)
inline HRESULT ITChart::StopMouse ( ) {
    HRESULT _hr = raw_StopMouse();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1406)
inline VARIANT_BOOL ITChart::GetTimerEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TimerEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1407)
inline void ITChart::PutTimerEnabled ( VARIANT_BOOL TimerEnabled ) {
    HRESULT _hr = put_TimerEnabled(TimerEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1408)
inline long ITChart::GetTimerInterval ( ) {
    long _result = 0;
    HRESULT _hr = get_TimerInterval(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1409)
inline void ITChart::PutTimerInterval ( long TimerInterval ) {
    HRESULT _hr = put_TimerInterval(TimerInterval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1410)
inline VARIANT_BOOL ITChart::GetAutoRepaint ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoRepaint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1411)
inline void ITChart::PutAutoRepaint ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AutoRepaint(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1412)
inline HRESULT ITChart::EditOneSeries ( long SeriesIndex ) {
    HRESULT _hr = raw_EditOneSeries(SeriesIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1413)
inline IEnvironmentPtr ITChart::GetEnvironment ( ) {
    struct IEnvironment * _result = 0;
    HRESULT _hr = get_Environment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnvironmentPtr(_result, false);
}

#pragma implementation_key(1414)
inline long ITChart::GetChartLink ( ) {
    long _result = 0;
    HRESULT _hr = get_ChartLink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1415)
inline ITeePoint2DPtr ITChart::GetMousePosition ( ) {
    struct ITeePoint2D * _result = 0;
    HRESULT _hr = get_MousePosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeePoint2DPtr(_result, false);
}

#pragma implementation_key(1416)
inline HRESULT ITChart::ChartRect ( long Left, long Top, long Right, long Bottom ) {
    HRESULT _hr = raw_ChartRect(Left, Top, Right, Bottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1417)
inline IToolListPtr ITChart::GetTools ( ) {
    struct IToolList * _result = 0;
    HRESULT _hr = get_Tools(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IToolListPtr(_result, false);
}

#pragma implementation_key(1418)
inline ITitlesPtr ITChart::GetSubHeader ( ) {
    struct ITitles * _result = 0;
    HRESULT _hr = get_SubHeader(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITitlesPtr(_result, false);
}

#pragma implementation_key(1419)
inline ITitlesPtr ITChart::GetSubFooter ( ) {
    struct ITitles * _result = 0;
    HRESULT _hr = get_SubFooter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITitlesPtr(_result, false);
}

#pragma implementation_key(1420)
inline HRESULT ITChart::ClearChart ( ) {
    HRESULT _hr = raw_ClearChart();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1421)
inline HRESULT ITChart::RefreshData ( ) {
    HRESULT _hr = raw_RefreshData();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1422)
inline ISeriesPtr ITChart::Series ( long SeriesIndex ) {
    struct ISeries * _result = 0;
    HRESULT _hr = raw_Series(SeriesIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISeriesPtr(_result, false);
}

//
// interface ITeeLinked wrapper method implementations
//

#pragma implementation_key(1423)
inline void ITeeLinked::PutChart ( struct ITChart * _arg1 ) {
    HRESULT _hr = put_Chart(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1424)
inline void ITeeLinked::PutChartLink ( long _arg1 ) {
    HRESULT _hr = put_ChartLink(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1425)
inline HRESULT ITeeLinked::AboutBox ( ) {
    HRESULT _hr = raw_AboutBox();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ITeeListBox wrapper method implementations
//

#pragma implementation_key(1426)
inline OLE_COLOR ITeeListBox::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1427)
inline void ITeeListBox::PutColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_Color(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1428)
inline HRESULT ITeeListBox::UpdateSeries ( ) {
    HRESULT _hr = raw_UpdateSeries();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1429)
inline long ITeeListBox::GetSelectedSeries ( ) {
    long _result = 0;
    HRESULT _hr = get_SelectedSeries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1430)
inline void ITeeListBox::PutSelectedSeries ( long Value ) {
    HRESULT _hr = put_SelectedSeries(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1431)
inline VARIANT_BOOL ITeeListBox::GetShowActive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowActive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1432)
inline void ITeeListBox::PutShowActive ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ShowActive(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1433)
inline VARIANT_BOOL ITeeListBox::GetShowColor ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1434)
inline void ITeeListBox::PutShowColor ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ShowColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1435)
inline VARIANT_BOOL ITeeListBox::GetShowTitle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1436)
inline void ITeeListBox::PutShowTitle ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ShowTitle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1437)
inline VARIANT_BOOL ITeeListBox::GetShowIcon ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowIcon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1438)
inline void ITeeListBox::PutShowIcon ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ShowIcon(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITeeEditor wrapper method implementations
//

#pragma implementation_key(1439)
inline _bstr_t ITeeEditor::GetEditorTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EditorTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1440)
inline void ITeeEditor::PutEditorTitle ( _bstr_t Value ) {
    HRESULT _hr = put_EditorTitle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1441)
inline enum ETeeEditorPage ITeeEditor::GetDefaultPage ( ) {
    enum ETeeEditorPage _result;
    HRESULT _hr = get_DefaultPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1442)
inline void ITeeEditor::PutDefaultPage ( enum ETeeEditorPage Value ) {
    HRESULT _hr = put_DefaultPage(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1443)
inline HRESULT ITeeEditor::ShowEditor ( ) {
    HRESULT _hr = raw_ShowEditor();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1444)
inline VARIANT_BOOL ITeeEditor::GetAutoRepaint ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoRepaint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1445)
inline void ITeeEditor::PutAutoRepaint ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AutoRepaint(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1446)
inline ITeeEditorShowPagesPtr ITeeEditor::GetShowPages ( ) {
    struct ITeeEditorShowPages * _result = 0;
    HRESULT _hr = get_ShowPages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeEditorShowPagesPtr(_result, false);
}

#pragma implementation_key(1447)
inline long ITeeEditor::GetEditorLink ( ) {
    long _result = 0;
    HRESULT _hr = get_EditorLink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1448)
inline ITeeEditorOptionsPtr ITeeEditor::GetOptions ( ) {
    struct ITeeEditorOptions * _result = 0;
    HRESULT _hr = get_Options(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeEditorOptionsPtr(_result, false);
}

//
// interface ITeePreviewer wrapper method implementations
//

#pragma implementation_key(1449)
inline _bstr_t ITeePreviewer::GetPreviewTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PreviewTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1450)
inline void ITeePreviewer::PutPreviewTitle ( _bstr_t Value ) {
    HRESULT _hr = put_PreviewTitle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1451)
inline HRESULT ITeePreviewer::ShowPreview ( ) {
    HRESULT _hr = raw_ShowPreview();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1452)
inline OLE_COLOR ITeePreviewer::GetPaperColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_PaperColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1453)
inline void ITeePreviewer::PutPaperColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_PaperColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1454)
inline long ITeePreviewer::GetPreviewerLink ( ) {
    long _result = 0;
    HRESULT _hr = get_PreviewerLink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1455)
inline VARIANT_BOOL ITeePreviewer::GetMaximized ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Maximized(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1456)
inline void ITeePreviewer::PutMaximized ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Maximized(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1457)
inline ITeePreviewerOptionsPtr ITeePreviewer::GetOptions ( ) {
    struct ITeePreviewerOptions * _result = 0;
    HRESULT _hr = get_Options(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeePreviewerOptionsPtr(_result, false);
}

//
// interface ITeeCommander wrapper method implementations
//

#pragma implementation_key(1458)
inline VARIANT_BOOL ITeeCommander::GetLabelValues ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LabelValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1459)
inline void ITeeCommander::PutLabelValues ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_LabelValues(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1460)
inline OLE_COLOR ITeeCommander::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1461)
inline void ITeeCommander::PutColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_Color(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1462)
inline VARIANT_BOOL ITeeCommander::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1463)
inline void ITeeCommander::PutEnabled ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Enabled(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1464)
inline void ITeeCommander::PutEditor ( struct ITeeEditor * _arg1 ) {
    HRESULT _hr = put_Editor(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1465)
inline void ITeeCommander::PutPreviewer ( struct ITeePreviewer * _arg1 ) {
    HRESULT _hr = put_Previewer(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1466)
inline void ITeeCommander::PutEditorLink ( long _arg1 ) {
    HRESULT _hr = put_EditorLink(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1467)
inline void ITeeCommander::PutPreviewerLink ( long _arg1 ) {
    HRESULT _hr = put_PreviewerLink(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1468)
inline VARIANT_BOOL ITeeCommander::GetVertical ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Vertical(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1469)
inline void ITeeCommander::PutVertical ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Vertical(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1470)
inline _variant_t ITeeCommander::GetControls ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Controls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1471)
inline void ITeeCommander::PutControls ( const _variant_t & Value ) {
    HRESULT _hr = put_Controls(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1472)
inline _variant_t ITeeCommander::GetButtons ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Buttons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1473)
inline void ITeeCommander::PutButtons ( const _variant_t & Value ) {
    HRESULT _hr = put_Buttons(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITeePreviewPanel wrapper method implementations
//

#pragma implementation_key(1474)
inline VARIANT_BOOL ITeePreviewPanel::GetAllowResize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowResize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1475)
inline void ITeePreviewPanel::PutAllowResize ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AllowResize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1476)
inline VARIANT_BOOL ITeePreviewPanel::GetAllowMove ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowMove(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1477)
inline void ITeePreviewPanel::PutAllowMove ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AllowMove(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1478)
inline VARIANT_BOOL ITeePreviewPanel::GetAsBitmap ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AsBitmap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1479)
inline void ITeePreviewPanel::PutAsBitmap ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_AsBitmap(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1480)
inline VARIANT_BOOL ITeePreviewPanel::GetDragImage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DragImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1481)
inline void ITeePreviewPanel::PutDragImage ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_DragImage(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1482)
inline enum ETeePreviewPanelOrientation ITeePreviewPanel::GetOrientation ( ) {
    enum ETeePreviewPanelOrientation _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1483)
inline void ITeePreviewPanel::PutOrientation ( enum ETeePreviewPanelOrientation Value ) {
    HRESULT _hr = put_Orientation(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1484)
inline OLE_COLOR ITeePreviewPanel::GetPaperColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_PaperColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1485)
inline void ITeePreviewPanel::PutPaperColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_PaperColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1486)
inline OLE_COLOR ITeePreviewPanel::GetShadowColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ShadowColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1487)
inline void ITeePreviewPanel::PutShadowColor ( OLE_COLOR Value ) {
    HRESULT _hr = put_ShadowColor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1488)
inline long ITeePreviewPanel::GetShadowSize ( ) {
    long _result = 0;
    HRESULT _hr = get_ShadowSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1489)
inline void ITeePreviewPanel::PutShadowSize ( long Value ) {
    HRESULT _hr = put_ShadowSize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1490)
inline VARIANT_BOOL ITeePreviewPanel::GetShowImage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1491)
inline void ITeePreviewPanel::PutShowImage ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ShowImage(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1492)
inline _bstr_t ITeePreviewPanel::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1493)
inline void ITeePreviewPanel::PutTitle ( _bstr_t Value ) {
    HRESULT _hr = put_Title(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1494)
inline HRESULT ITeePreviewPanel::Repaint ( ) {
    HRESULT _hr = raw_Repaint();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1495)
inline ITeePanelsListPtr ITeePreviewPanel::GetPanels ( ) {
    struct ITeePanelsList * _result = 0;
    HRESULT _hr = get_Panels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeePanelsListPtr(_result, false);
}

#pragma implementation_key(1496)
inline HRESULT ITeePreviewPanel::AddChart ( struct ITChart * Value ) {
    HRESULT _hr = raw_AddChart(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1497)
inline IGradientPtr ITeePreviewPanel::GetGradient ( ) {
    struct IGradient * _result = 0;
    HRESULT _hr = get_Gradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGradientPtr(_result, false);
}

#pragma implementation_key(1498)
inline IPenPtr ITeePreviewPanel::GetMargins ( ) {
    struct IPen * _result = 0;
    HRESULT _hr = get_Margins(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPenPtr(_result, false);
}

#pragma implementation_key(1499)
inline HRESULT ITeePreviewPanel::PrintPage ( ) {
    HRESULT _hr = raw_PrintPage();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1500)
inline HRESULT ITeePreviewPanel::AddChartLink ( long Value ) {
    HRESULT _hr = raw_AddChartLink(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IChartGrid wrapper method implementations
//

#pragma implementation_key(1501)
inline long IChartGrid::GetCol ( ) {
    long _result = 0;
    HRESULT _hr = get_Col(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1502)
inline void IChartGrid::PutCol ( long Value ) {
    HRESULT _hr = put_Col(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1503)
inline long IChartGrid::GetColCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ColCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1504)
inline long IChartGrid::GetColwidths ( long Index ) {
    long _result = 0;
    HRESULT _hr = get_Colwidths(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1505)
inline void IChartGrid::PutColwidths ( long Index, long Value ) {
    HRESULT _hr = put_Colwidths(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1506)
inline VARIANT_BOOL IChartGrid::GetEditorMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EditorMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1507)
inline void IChartGrid::PutEditorMode ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_EditorMode(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1508)
inline long IChartGrid::GetGridHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_GridHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1509)
inline long IChartGrid::GetGridWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_GridWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1510)
inline long IChartGrid::GetLeftCol ( ) {
    long _result = 0;
    HRESULT _hr = get_LeftCol(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1511)
inline void IChartGrid::PutLeftCol ( long Value ) {
    HRESULT _hr = put_LeftCol(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1512)
inline long IChartGrid::GetGridLink ( ) {
    long _result = 0;
    HRESULT _hr = get_GridLink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1513)
inline HRESULT IChartGrid::RecalcDimensions ( ) {
    HRESULT _hr = raw_RecalcDimensions();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1514)
inline VARIANT_BOOL IChartGrid::GetShowLabels ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1515)
inline void IChartGrid::PutShowLabels ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ShowLabels(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1516)
inline VARIANT_BOOL IChartGrid::GetShowColors ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowColors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1517)
inline void IChartGrid::PutShowColors ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ShowColors(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1518)
inline VARIANT_BOOL IChartGrid::GetShowFields ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1519)
inline void IChartGrid::PutShowFields ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ShowFields(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1520)
inline IChartGridColsPtr IChartGrid::Cols ( ) {
    struct IChartGridCols * _result = 0;
    HRESULT _hr = raw_Cols(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChartGridColsPtr(_result, false);
}

#pragma implementation_key(1521)
inline IChartGridRowsPtr IChartGrid::Rows ( ) {
    struct IChartGridRows * _result = 0;
    HRESULT _hr = raw_Rows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChartGridRowsPtr(_result, false);
}

//
// interface IChartGridNavigator wrapper method implementations
//

#pragma implementation_key(1522)
inline void IChartGridNavigator::PutGrid ( struct IChartGrid * _arg1 ) {
    HRESULT _hr = put_Grid(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1523)
inline void IChartGridNavigator::PutGridLink ( long _arg1 ) {
    HRESULT _hr = put_GridLink(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1524)
inline HRESULT IChartGridNavigator::EnableButtons ( ) {
    HRESULT _hr = raw_EnableButtons();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IChartPageNavigator wrapper method implementations
//

#pragma implementation_key(1525)
inline HRESULT IChartPageNavigator::EnableButtons ( ) {
    HRESULT _hr = raw_EnableButtons();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IChartEditorPanel wrapper method implementations
//

#pragma implementation_key(1526)
inline HRESULT IChartEditorPanel::SelectUnderMouse ( ) {
    HRESULT _hr = raw_SelectUnderMouse();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1527)
inline enum EPanelBevel IChartEditorPanel::GetBevelOuter ( ) {
    enum EPanelBevel _result;
    HRESULT _hr = get_BevelOuter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1528)
inline void IChartEditorPanel::PutBevelOuter ( enum EPanelBevel Value ) {
    HRESULT _hr = put_BevelOuter(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISeriesTextSource wrapper method implementations
//

#pragma implementation_key(1529)
inline HRESULT ISeriesTextSource::Close ( ) {
    HRESULT _hr = raw_Close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1530)
inline HRESULT ISeriesTextSource::Load ( ) {
    HRESULT _hr = raw_Load();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1531)
inline HRESULT ISeriesTextSource::LoadAsStream ( const _variant_t & AStream ) {
    HRESULT _hr = raw_LoadAsStream(AStream);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1532)
inline HRESULT ISeriesTextSource::LoadFromFile ( _bstr_t FileName ) {
    HRESULT _hr = raw_LoadFromFile(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1533)
inline HRESULT ISeriesTextSource::LoadFromURL ( _bstr_t URL ) {
    HRESULT _hr = raw_LoadFromURL(URL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1534)
inline HRESULT ISeriesTextSource::Open ( ) {
    HRESULT _hr = raw_Open();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1535)
inline VARIANT_BOOL ISeriesTextSource::GetActive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1536)
inline void ISeriesTextSource::PutActive ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Active(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1537)
inline long ISeriesTextSource::GetHeaderLines ( ) {
    long _result = 0;
    HRESULT _hr = get_HeaderLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1538)
inline void ISeriesTextSource::PutHeaderLines ( long Value ) {
    HRESULT _hr = put_HeaderLines(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1539)
inline ISeriesTextFieldsPtr ISeriesTextSource::GetFields ( ) {
    struct ISeriesTextFields * _result = 0;
    HRESULT _hr = get_Fields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISeriesTextFieldsPtr(_result, false);
}

#pragma implementation_key(1540)
inline _bstr_t ISeriesTextSource::GetFieldSeparator ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FieldSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1541)
inline void ISeriesTextSource::PutFieldSeparator ( _bstr_t Value ) {
    HRESULT _hr = put_FieldSeparator(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1542)
inline _bstr_t ISeriesTextSource::GetFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1543)
inline void ISeriesTextSource::PutFileName ( _bstr_t Value ) {
    HRESULT _hr = put_FileName(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1544)
inline _variant_t ISeriesTextSource::GetSeries ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Series(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1545)
inline void ISeriesTextSource::PutSeries ( const _variant_t & Value ) {
    HRESULT _hr = put_Series(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1546)
inline ISeriesTextFieldPtr ISeriesTextSource::AddField ( _bstr_t AName, long AIndex ) {
    struct ISeriesTextField * _result = 0;
    HRESULT _hr = raw_AddField(AName, AIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISeriesTextFieldPtr(_result, false);
}

//
// interface ISeries wrapper method implementations
//

#pragma implementation_key(1547)
inline VARIANT_BOOL ISeries::GetActive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1548)
inline void ISeries::PutActive ( VARIANT_BOOL Active ) {
    HRESULT _hr = put_Active(Active);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1549)
inline IAreaSeriesPtr ISeries::GetasArea ( ) {
    struct IAreaSeries * _result = 0;
    HRESULT _hr = get_asArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAreaSeriesPtr(_result, false);
}

#pragma implementation_key(1550)
inline IArrowSeriesPtr ISeries::GetasArrow ( ) {
    struct IArrowSeries * _result = 0;
    HRESULT _hr = get_asArrow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IArrowSeriesPtr(_result, false);
}

#pragma implementation_key(1551)
inline IBarSeriesPtr ISeries::GetasBar ( ) {
    struct IBarSeries * _result = 0;
    HRESULT _hr = get_asBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBarSeriesPtr(_result, false);
}

#pragma implementation_key(1552)
inline IBubbleSeriesPtr ISeries::GetasBubble ( ) {
    struct IBubbleSeries * _result = 0;
    HRESULT _hr = get_asBubble(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBubbleSeriesPtr(_result, false);
}

#pragma implementation_key(1553)
inline ICandleSeriesPtr ISeries::GetasCandle ( ) {
    struct ICandleSeries * _result = 0;
    HRESULT _hr = get_asCandle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICandleSeriesPtr(_result, false);
}

#pragma implementation_key(1554)
inline IErrorBarSeriesPtr ISeries::GetasErrorBar ( ) {
    struct IErrorBarSeries * _result = 0;
    HRESULT _hr = get_asErrorBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IErrorBarSeriesPtr(_result, false);
}

#pragma implementation_key(1555)
inline IFastLineSeriesPtr ISeries::GetasFastLine ( ) {
    struct IFastLineSeries * _result = 0;
    HRESULT _hr = get_asFastLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFastLineSeriesPtr(_result, false);
}

#pragma implementation_key(1556)
inline IGanttSeriesPtr ISeries::GetasGantt ( ) {
    struct IGanttSeries * _result = 0;
    HRESULT _hr = get_asGantt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGanttSeriesPtr(_result, false);
}

#pragma implementation_key(1557)
inline IHorizBarSeriesPtr ISeries::GetasHorizBar ( ) {
    struct IHorizBarSeries * _result = 0;
    HRESULT _hr = get_asHorizBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IHorizBarSeriesPtr(_result, false);
}

#pragma implementation_key(1558)
inline ILineSeriesPtr ISeries::GetasLine ( ) {
    struct ILineSeries * _result = 0;
    HRESULT _hr = get_asLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILineSeriesPtr(_result, false);
}

#pragma implementation_key(1559)
inline IPieSeriesPtr ISeries::GetasPie ( ) {
    struct IPieSeries * _result = 0;
    HRESULT _hr = get_asPie(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPieSeriesPtr(_result, false);
}

#pragma implementation_key(1560)
inline IPointSeriesPtr ISeries::GetasPoint ( ) {
    struct IPointSeries * _result = 0;
    HRESULT _hr = get_asPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPointSeriesPtr(_result, false);
}

#pragma implementation_key(1561)
inline IPolarSeriesPtr ISeries::GetasPolar ( ) {
    struct IPolarSeries * _result = 0;
    HRESULT _hr = get_asPolar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPolarSeriesPtr(_result, false);
}

#pragma implementation_key(1562)
inline IShapeSeriesPtr ISeries::GetasShape ( ) {
    struct IShapeSeries * _result = 0;
    HRESULT _hr = get_asShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IShapeSeriesPtr(_result, false);
}

#pragma implementation_key(1563)
inline ISurfaceSeriesPtr ISeries::GetasSurface ( ) {
    struct ISurfaceSeries * _result = 0;
    HRESULT _hr = get_asSurface(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISurfaceSeriesPtr(_result, false);
}

#pragma implementation_key(1564)
inline IVolumeSeriesPtr ISeries::GetasVolume ( ) {
    struct IVolumeSeries * _result = 0;
    HRESULT _hr = get_asVolume(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVolumeSeriesPtr(_result, false);
}

#pragma implementation_key(1565)
inline OLE_COLOR ISeries::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1566)
inline void ISeries::PutColor ( OLE_COLOR Color ) {
    HRESULT _hr = put_Color(Color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1567)
inline VARIANT_BOOL ISeries::GetColorEachPoint ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ColorEachPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1568)
inline void ISeries::PutColorEachPoint ( VARIANT_BOOL ColorEachPoint ) {
    HRESULT _hr = put_ColorEachPoint(ColorEachPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1569)
inline long ISeries::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1570)
inline short ISeries::GetCursor ( ) {
    short _result = 0;
    HRESULT _hr = get_Cursor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1571)
inline void ISeries::PutCursor ( short Cursor ) {
    HRESULT _hr = put_Cursor(Cursor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1572)
inline _variant_t ISeries::GetDataSource ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DataSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1573)
inline void ISeries::PutDataSource ( const _variant_t & DataSource ) {
    HRESULT _hr = put_DataSource(DataSource);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1574)
inline long ISeries::GetFirstValueIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_FirstValueIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1575)
inline ITeeFunctionPtr ISeries::GetFunctionType ( ) {
    struct ITeeFunction * _result = 0;
    HRESULT _hr = get_FunctionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeeFunctionPtr(_result, false);
}

#pragma implementation_key(1576)
inline enum EHorizontalAxis ISeries::GetHorizontalAxis ( ) {
    enum EHorizontalAxis _result;
    HRESULT _hr = get_HorizontalAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1577)
inline void ISeries::PutHorizontalAxis ( enum EHorizontalAxis HorizontalAxis ) {
    HRESULT _hr = put_HorizontalAxis(HorizontalAxis);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1578)
inline _bstr_t ISeries::GetLabelsSource ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LabelsSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1579)
inline void ISeries::PutLabelsSource ( _bstr_t LabelsSource ) {
    HRESULT _hr = put_LabelsSource(LabelsSource);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1580)
inline long ISeries::GetLastValueIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_LastValueIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1581)
inline IMarksPtr ISeries::GetMarks ( ) {
    struct IMarks * _result = 0;
    HRESULT _hr = get_Marks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMarksPtr(_result, false);
}

#pragma implementation_key(1582)
inline _bstr_t ISeries::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1583)
inline void ISeries::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1584)
inline _bstr_t ISeries::GetPercentFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PercentFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1585)
inline void ISeries::PutPercentFormat ( _bstr_t PercentFormat ) {
    HRESULT _hr = put_PercentFormat(PercentFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1586)
inline OLE_COLOR ISeries::GetPointColor ( long Index ) {
    OLE_COLOR _result;
    HRESULT _hr = get_PointColor(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1587)
inline void ISeries::PutPointColor ( long Index, OLE_COLOR Value ) {
    HRESULT _hr = put_PointColor(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1588)
inline _bstr_t ISeries::GetPointLabel ( long Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_PointLabel(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1589)
inline void ISeries::PutPointLabel ( long Index, _bstr_t Value ) {
    HRESULT _hr = put_PointLabel(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1590)
inline double ISeries::GetPointValue ( long Index ) {
    double _result = 0;
    HRESULT _hr = get_PointValue(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1591)
inline void ISeries::PutPointValue ( long Index, double Value ) {
    HRESULT _hr = put_PointValue(Index, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1592)
inline enum ESeriesClass ISeries::GetSeriesType ( ) {
    enum ESeriesClass _result;
    HRESULT _hr = get_SeriesType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1593)
inline VARIANT_BOOL ISeries::GetShowInLegend ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowInLegend(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1594)
inline void ISeries::PutShowInLegend ( VARIANT_BOOL ShowInLegend ) {
    HRESULT _hr = put_ShowInLegend(ShowInLegend);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1595)
inline _bstr_t ISeries::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1596)
inline void ISeries::PutTitle ( _bstr_t Title ) {
    HRESULT _hr = put_Title(Title);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1597)
inline _bstr_t ISeries::GetValueFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ValueFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1598)
inline void ISeries::PutValueFormat ( _bstr_t ValueFormat ) {
    HRESULT _hr = put_ValueFormat(ValueFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1599)
inline _bstr_t ISeries::GetValueMarkText ( long ValueIndex ) {
    BSTR _result = 0;
    HRESULT _hr = get_ValueMarkText(ValueIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1600)
inline enum EVerticalAxis ISeries::GetVerticalAxis ( ) {
    enum EVerticalAxis _result;
    HRESULT _hr = get_VerticalAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1601)
inline void ISeries::PutVerticalAxis ( enum EVerticalAxis VerticalAxis ) {
    HRESULT _hr = put_VerticalAxis(VerticalAxis);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1602)
inline IValueListPtr ISeries::GetXValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_XValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(1603)
inline IValueListPtr ISeries::GetYValues ( ) {
    struct IValueList * _result = 0;
    HRESULT _hr = get_YValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListPtr(_result, false);
}

#pragma implementation_key(1604)
inline long ISeries::GetZOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1605)
inline long ISeries::Add ( double AValue, _bstr_t ALabel, OLE_COLOR Value ) {
    long _result = 0;
    HRESULT _hr = raw_Add(AValue, ALabel, Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1606)
inline long ISeries::AddNull ( _bstr_t SomeLabel ) {
    long _result = 0;
    HRESULT _hr = raw_AddNull(SomeLabel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1607)
inline long ISeries::AddXY ( double AX, double AY, _bstr_t ALabel, OLE_COLOR Value ) {
    long _result = 0;
    HRESULT _hr = raw_AddXY(AX, AY, ALabel, Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1608)
inline long ISeries::CalcXPos ( long SomeValueIndex ) {
    long _result = 0;
    HRESULT _hr = raw_CalcXPos(SomeValueIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1609)
inline long ISeries::CalcXPosValue ( double SomeValue ) {
    long _result = 0;
    HRESULT _hr = raw_CalcXPosValue(SomeValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1610)
inline long ISeries::CalcXSizeValue ( double SomeValue ) {
    long _result = 0;
    HRESULT _hr = raw_CalcXSizeValue(SomeValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1611)
inline long ISeries::CalcYPos ( long SomeValueIndex ) {
    long _result = 0;
    HRESULT _hr = raw_CalcYPos(SomeValueIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1612)
inline long ISeries::CalcYPosValue ( double SomeValue ) {
    long _result = 0;
    HRESULT _hr = raw_CalcYPosValue(SomeValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1613)
inline long ISeries::CalcYSizeValue ( double SomeValue ) {
    long _result = 0;
    HRESULT _hr = raw_CalcYSizeValue(SomeValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1614)
inline HRESULT ISeries::CheckDataSource ( ) {
    HRESULT _hr = raw_CheckDataSource();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1615)
inline HRESULT ISeries::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1616)
inline long ISeries::Clicked ( long XCoord, long YCoord ) {
    long _result = 0;
    HRESULT _hr = raw_Clicked(XCoord, YCoord, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1617)
inline HRESULT ISeries::Delete ( long Index ) {
    HRESULT _hr = raw_Delete(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1618)
inline HRESULT ISeries::FillSampleValues ( long NumValues ) {
    HRESULT _hr = raw_FillSampleValues(NumValues);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1619)
inline long ISeries::GetMousePoint ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetMousePoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1620)
inline VARIANT_BOOL ISeries::IsNull ( long ValueIndex ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsNull(ValueIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1621)
inline HRESULT ISeries::RefreshSeries ( ) {
    HRESULT _hr = raw_RefreshSeries();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1622)
inline HRESULT ISeries::SetFunction ( enum EFunctionType AFunction ) {
    HRESULT _hr = raw_SetFunction(AFunction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1623)
inline HRESULT ISeries::SwapValues ( long a, long b ) {
    HRESULT _hr = raw_SwapValues(a, b);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1624)
inline double ISeries::XScreenToValue ( long ScreenCoord ) {
    double _result = 0;
    HRESULT _hr = raw_XScreenToValue(ScreenCoord, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1625)
inline _bstr_t ISeries::XValueToText ( double SomeValue ) {
    BSTR _result = 0;
    HRESULT _hr = raw_XValueToText(SomeValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1626)
inline double ISeries::YScreenToValue ( long ScreenCoord ) {
    double _result = 0;
    HRESULT _hr = raw_YScreenToValue(ScreenCoord, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1627)
inline _bstr_t ISeries::YValueToText ( double SomeValue ) {
    BSTR _result = 0;
    HRESULT _hr = raw_YValueToText(SomeValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1628)
inline IBezierSeriesPtr ISeries::GetasBezier ( ) {
    struct IBezierSeries * _result = 0;
    HRESULT _hr = get_asBezier(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBezierSeriesPtr(_result, false);
}

#pragma implementation_key(1629)
inline IContourSeriesPtr ISeries::GetasContour ( ) {
    struct IContourSeries * _result = 0;
    HRESULT _hr = get_asContour(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IContourSeriesPtr(_result, false);
}

#pragma implementation_key(1630)
inline IErrorSeriesPtr ISeries::GetasError ( ) {
    struct IErrorSeries * _result = 0;
    HRESULT _hr = get_asError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IErrorSeriesPtr(_result, false);
}

#pragma implementation_key(1631)
inline IPoint3DSeriesPtr ISeries::GetasPoint3D ( ) {
    struct IPoint3DSeries * _result = 0;
    HRESULT _hr = get_asPoint3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPoint3DSeriesPtr(_result, false);
}

#pragma implementation_key(1632)
inline IRadarSeriesPtr ISeries::GetasRadar ( ) {
    struct IRadarSeries * _result = 0;
    HRESULT _hr = get_asRadar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRadarSeriesPtr(_result, false);
}

#pragma implementation_key(1633)
inline long ISeries::AddNullXY ( double X, double Y, _bstr_t ALabel ) {
    long _result = 0;
    HRESULT _hr = raw_AddNullXY(X, Y, ALabel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1634)
inline _bstr_t ISeries::LegendString ( long LegendIndex, enum ELegendTextStyle LegendTextStyle ) {
    BSTR _result = 0;
    HRESULT _hr = raw_LegendString(LegendIndex, LegendTextStyle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1635)
inline OLE_COLOR ISeries::LegendItemColor ( long LegendIndex ) {
    OLE_COLOR _result;
    HRESULT _hr = raw_LegendItemColor(LegendIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1636)
inline long ISeries::CountLegendItems ( ) {
    long _result = 0;
    HRESULT _hr = raw_CountLegendItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1637)
inline long ISeries::LegendToValueIndex ( long LegendIndex ) {
    long _result = 0;
    HRESULT _hr = raw_LegendToValueIndex(LegendIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1638)
inline long ISeries::VisibleCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_VisibleCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1639)
inline HRESULT ISeries::AssignValues ( long SeriesIndex ) {
    HRESULT _hr = raw_AssignValues(SeriesIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1640)
inline long ISeries::GetHorizontalAxisCustom ( ) {
    long _result = 0;
    HRESULT _hr = get_HorizontalAxisCustom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1641)
inline void ISeries::PutHorizontalAxisCustom ( long Value ) {
    HRESULT _hr = put_HorizontalAxisCustom(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1642)
inline long ISeries::GetVerticalAxisCustom ( ) {
    long _result = 0;
    HRESULT _hr = get_VerticalAxisCustom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1643)
inline void ISeries::PutVerticalAxisCustom ( long Value ) {
    HRESULT _hr = put_VerticalAxisCustom(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1644)
inline IClockSeriesPtr ISeries::GetasClock ( ) {
    struct IClockSeries * _result = 0;
    HRESULT _hr = get_asClock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IClockSeriesPtr(_result, false);
}

#pragma implementation_key(1645)
inline IWindRoseSeriesPtr ISeries::GetasWindRose ( ) {
    struct IWindRoseSeries * _result = 0;
    HRESULT _hr = get_asWindRose(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWindRoseSeriesPtr(_result, false);
}

#pragma implementation_key(1646)
inline IBar3DSeriesPtr ISeries::GetasBar3D ( ) {
    struct IBar3DSeries * _result = 0;
    HRESULT _hr = get_asBar3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBar3DSeriesPtr(_result, false);
}

#pragma implementation_key(1647)
inline IImageBarSeriesPtr ISeries::GetasImageBar ( ) {
    struct IImageBarSeries * _result = 0;
    HRESULT _hr = get_asImageBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IImageBarSeriesPtr(_result, false);
}

#pragma implementation_key(1648)
inline HRESULT ISeries::DisconnectAxisCustom ( VARIANT_BOOL IsHorizontal ) {
    HRESULT _hr = raw_DisconnectAxisCustom(IsHorizontal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1649)
inline ITeePoint2DPtr ISeries::GetMouseValues ( ) {
    struct ITeePoint2D * _result = 0;
    HRESULT _hr = get_MouseValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITeePoint2DPtr(_result, false);
}

#pragma implementation_key(1650)
inline HRESULT ISeries::AddArray ( long ArraySize, const _variant_t & YArray, const _variant_t & XArray ) {
    HRESULT _hr = raw_AddArray(ArraySize, YArray, XArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1651)
inline long ISeries::GetDepth ( ) {
    long _result = 0;
    HRESULT _hr = get_Depth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1652)
inline void ISeries::PutDepth ( long Value ) {
    HRESULT _hr = put_Depth(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1653)
inline IDonutSeriesPtr ISeries::GetasDonut ( ) {
    struct IDonutSeries * _result = 0;
    HRESULT _hr = get_asDonut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDonutSeriesPtr(_result, false);
}

#pragma implementation_key(1654)
inline ITriSurfaceSeriesPtr ISeries::GetasTriSurface ( ) {
    struct ITriSurfaceSeries * _result = 0;
    HRESULT _hr = get_asTriSurface(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITriSurfaceSeriesPtr(_result, false);
}

#pragma implementation_key(1655)
inline IBoxPlotSeriesPtr ISeries::GetasBoxPlot ( ) {
    struct IBoxPlotSeries * _result = 0;
    HRESULT _hr = get_asBoxPlot(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBoxPlotSeriesPtr(_result, false);
}

#pragma implementation_key(1656)
inline IHorizBoxPlotSeriesPtr ISeries::GetasHorizBoxPlot ( ) {
    struct IHorizBoxPlotSeries * _result = 0;
    HRESULT _hr = get_asHorizBoxPlot(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IHorizBoxPlotSeriesPtr(_result, false);
}

#pragma implementation_key(1657)
inline IHistogramSeriesPtr ISeries::GetasHistogram ( ) {
    struct IHistogramSeries * _result = 0;
    HRESULT _hr = get_asHistogram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IHistogramSeriesPtr(_result, false);
}

#pragma implementation_key(1658)
inline IColorGridSeriesPtr ISeries::GetasColorGrid ( ) {
    struct IColorGridSeries * _result = 0;
    HRESULT _hr = get_asColorGrid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IColorGridSeriesPtr(_result, false);
}

#pragma implementation_key(1659)
inline IHorizLineSeriesPtr ISeries::GetasHorizLine ( ) {
    struct IHorizLineSeries * _result = 0;
    HRESULT _hr = get_asHorizLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IHorizLineSeriesPtr(_result, false);
}

#pragma implementation_key(1660)
inline IBarJoinSeriesPtr ISeries::GetasBarJoin ( ) {
    struct IBarJoinSeries * _result = 0;
    HRESULT _hr = get_asBarJoin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBarJoinSeriesPtr(_result, false);
}

#pragma implementation_key(1661)
inline IHighLowSeriesPtr ISeries::GetasHighLow ( ) {
    struct IHighLowSeries * _result = 0;
    HRESULT _hr = get_asHighLow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IHighLowSeriesPtr(_result, false);
}

#pragma implementation_key(1662)
inline IWaterfallSeriesPtr ISeries::GetasWaterfall ( ) {
    struct IWaterfallSeries * _result = 0;
    HRESULT _hr = get_asWaterfall(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWaterfallSeriesPtr(_result, false);
}

#pragma implementation_key(1663)
inline ISmithSeriesPtr ISeries::GetasSmith ( ) {
    struct ISmithSeries * _result = 0;
    HRESULT _hr = get_asSmith(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISmithSeriesPtr(_result, false);
}

#pragma implementation_key(1664)
inline IPyramidSeriesPtr ISeries::GetasPyramid ( ) {
    struct IPyramidSeries * _result = 0;
    HRESULT _hr = get_asPyramid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPyramidSeriesPtr(_result, false);
}

#pragma implementation_key(1665)
inline IMapSeriesPtr ISeries::GetasMap ( ) {
    struct IMapSeries * _result = 0;
    HRESULT _hr = get_asMap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMapSeriesPtr(_result, false);
}

#pragma implementation_key(1666)
inline IFunnelSeriesPtr ISeries::GetasFunnel ( ) {
    struct IFunnelSeries * _result = 0;
    HRESULT _hr = get_asFunnel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFunnelSeriesPtr(_result, false);
}

#pragma implementation_key(1667)
inline ICalendarSeriesPtr ISeries::GetasCalendar ( ) {
    struct ICalendarSeries * _result = 0;
    HRESULT _hr = get_asCalendar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICalendarSeriesPtr(_result, false);
}

#pragma implementation_key(1668)
inline HRESULT ISeries::FreeDatasource ( VARIANT_BOOL SurePrompt ) {
    HRESULT _hr = raw_FreeDatasource(SurePrompt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1669)
inline long ISeries::GetSeriesLink ( ) {
    long _result = 0;
    HRESULT _hr = get_SeriesLink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1670)
inline enum EDatasourceType ISeries::GetDatasourceType ( ) {
    enum EDatasourceType _result;
    HRESULT _hr = get_DatasourceType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1671)
inline void ISeries::PutDatasourceType ( enum EDatasourceType Value ) {
    HRESULT _hr = put_DatasourceType(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1672)
inline IValueListsPtr ISeries::GetValueLists ( ) {
    struct IValueLists * _result = 0;
    HRESULT _hr = get_ValueLists(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IValueListsPtr(_result, false);
}

#pragma implementation_key(1673)
inline VARIANT_BOOL ISeries::IsNan ( double Value ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsNan(Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1674)
inline HRESULT ISeries::DeleteRange ( long Start, long Quantity ) {
    HRESULT _hr = raw_DeleteRange(Start, Quantity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IMACDFunction wrapper method implementations
//

#pragma implementation_key(1675)
inline double IMACDFunction::GetPeriod2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Period2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1676)
inline void IMACDFunction::PutPeriod2 ( double Value ) {
    HRESULT _hr = put_Period2(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1677)
inline ISeriesPtr IMACDFunction::GetMACDExp ( ) {
    struct ISeries * _result = 0;
    HRESULT _hr = get_MACDExp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISeriesPtr(_result, false);
}

#pragma implementation_key(1678)
inline ISeriesPtr IMACDFunction::GetHistogram ( ) {
    struct ISeries * _result = 0;
    HRESULT _hr = get_Histogram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISeriesPtr(_result, false);
}

#pragma implementation_key(1679)
inline long IMACDFunction::GetPeriod3 ( ) {
    long _result = 0;
    HRESULT _hr = get_Period3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1680)
inline void IMACDFunction::PutPeriod3 ( long Value ) {
    HRESULT _hr = put_Period3(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IBollingerFunction wrapper method implementations
//

#pragma implementation_key(1681)
inline double IBollingerFunction::GetDeviation ( ) {
    double _result = 0;
    HRESULT _hr = get_Deviation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1682)
inline void IBollingerFunction::PutDeviation ( double Value ) {
    HRESULT _hr = put_Deviation(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1683)
inline VARIANT_BOOL IBollingerFunction::GetExponential ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Exponential(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1684)
inline void IBollingerFunction::PutExponential ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_Exponential(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1685)
inline ISeriesPtr IBollingerFunction::GetLowBand ( ) {
    struct ISeries * _result = 0;
    HRESULT _hr = get_LowBand(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISeriesPtr(_result, false);
}

//
// interface IADXFunction wrapper method implementations
//

#pragma implementation_key(1686)
inline ISeriesPtr IADXFunction::GetDMDown ( ) {
    struct ISeries * _result = 0;
    HRESULT _hr = get_DMDown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISeriesPtr(_result, false);
}

#pragma implementation_key(1687)
inline ISeriesPtr IADXFunction::GetDMUp ( ) {
    struct ISeries * _result = 0;
    HRESULT _hr = get_DMUp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISeriesPtr(_result, false);
}

//
// interface ITeeFunction wrapper method implementations
//

#pragma implementation_key(1688)
inline double ITeeFunction::GetPeriod ( ) {
    double _result = 0;
    HRESULT _hr = get_Period(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1689)
inline void ITeeFunction::PutPeriod ( double Period ) {
    HRESULT _hr = put_Period(Period);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1690)
inline ICurveFittingFunctionPtr ITeeFunction::GetasCurveFit ( ) {
    struct ICurveFittingFunction * _result = 0;
    HRESULT _hr = get_asCurveFit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICurveFittingFunctionPtr(_result, false);
}

#pragma implementation_key(1691)
inline IExpAvgFunctionPtr ITeeFunction::GetasExpAvg ( ) {
    struct IExpAvgFunction * _result = 0;
    HRESULT _hr = get_asExpAvg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExpAvgFunctionPtr(_result, false);
}

#pragma implementation_key(1692)
inline IMovingAvgFunctionPtr ITeeFunction::GetasMovAvg ( ) {
    struct IMovingAvgFunction * _result = 0;
    HRESULT _hr = get_asMovAvg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMovingAvgFunctionPtr(_result, false);
}

#pragma implementation_key(1693)
inline enum EFunctionPeriodStyle ITeeFunction::GetPeriodStyle ( ) {
    enum EFunctionPeriodStyle _result;
    HRESULT _hr = get_PeriodStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1694)
inline void ITeeFunction::PutPeriodStyle ( enum EFunctionPeriodStyle Value ) {
    HRESULT _hr = put_PeriodStyle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1695)
inline enum EFunctionPeriodAlign ITeeFunction::GetPeriodAlign ( ) {
    enum EFunctionPeriodAlign _result;
    HRESULT _hr = get_PeriodAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1696)
inline void ITeeFunction::PutPeriodAlign ( enum EFunctionPeriodAlign Value ) {
    HRESULT _hr = put_PeriodAlign(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1697)
inline IStdDeviationFunctionPtr ITeeFunction::GetasStdDeviation ( ) {
    struct IStdDeviationFunction * _result = 0;
    HRESULT _hr = get_asStdDeviation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IStdDeviationFunctionPtr(_result, false);
}

#pragma implementation_key(1698)
inline HRESULT ITeeFunction::BeginUpdate ( ) {
    HRESULT _hr = raw_BeginUpdate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1699)
inline HRESULT ITeeFunction::EndUpdate ( ) {
    HRESULT _hr = raw_EndUpdate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1700)
inline IRSIFunctionPtr ITeeFunction::GetasRSI ( ) {
    struct IRSIFunction * _result = 0;
    HRESULT _hr = get_asRSI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRSIFunctionPtr(_result, false);
}

#pragma implementation_key(1701)
inline IBollingerFunctionPtr ITeeFunction::GetasBollinger ( ) {
    struct IBollingerFunction * _result = 0;
    HRESULT _hr = get_asBollinger(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBollingerFunctionPtr(_result, false);
}

#pragma implementation_key(1702)
inline IADXFunctionPtr ITeeFunction::GetasADX ( ) {
    struct IADXFunction * _result = 0;
    HRESULT _hr = get_asADX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADXFunctionPtr(_result, false);
}

#pragma implementation_key(1703)
inline IMACDFunctionPtr ITeeFunction::GetasMACD ( ) {
    struct IMACDFunction * _result = 0;
    HRESULT _hr = get_asMACD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMACDFunctionPtr(_result, false);
}

#pragma implementation_key(1704)
inline IRMSFunctionPtr ITeeFunction::GetasRMS ( ) {
    struct IRMSFunction * _result = 0;
    HRESULT _hr = get_asRMS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRMSFunctionPtr(_result, false);
}

#pragma implementation_key(1705)
inline IAverageFunctionPtr ITeeFunction::GetasAverage ( ) {
    struct IAverageFunction * _result = 0;
    HRESULT _hr = get_asAverage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAverageFunctionPtr(_result, false);
}
